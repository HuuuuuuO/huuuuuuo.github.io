[{"author":null,"categories":["Tech"],"content":"","date":1736843928,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":3600,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1736911976,"objectID":"e31f4348233023e9629c6fb678397b46","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E9%A9%AC%E5%88%97%E6%AF%9B%E4%B8%BB%E5%B8%AD%E6%99%9A%E5%B9%B4%E7%9A%84%E5%9B%B0%E6%83%91/","publishdate":"2025-01-14T16:38:48+08:00","readingtime":8,"relpermalink":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E9%A9%AC%E5%88%97%E6%AF%9B%E4%B8%BB%E5%B8%AD%E6%99%9A%E5%B9%B4%E7%9A%84%E5%9B%B0%E6%83%91/","section":"post","summary":"本文转载修改自以下文章： https://zhuanlan.zhihu.com/p/701723610 马克思晚年的困惑 马克思是劳动者阶级建立劳动社会理论的创造者，对他的理论体系，马克思没有任何怀疑和困惑，他的困惑是在","tags":["阅读笔记"],"title":"阅读笔记：马、列、毛主席晚年的困惑","type":"post","url":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E9%A9%AC%E5%88%97%E6%AF%9B%E4%B8%BB%E5%B8%AD%E6%99%9A%E5%B9%B4%E7%9A%84%E5%9B%B0%E6%83%91/","weight":0,"wordcount":3584},{"author":null,"categories":["Tech"],"content":"","date":1731382642,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1600,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1734508715,"objectID":"528b6569d4a0d0199ebbf16ac59953c3","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E9%BB%91%E5%A1%9E%E6%82%89%E8%BE%BE%E5%A4%9A/","publishdate":"2024-11-12T11:37:22+08:00","readingtime":3,"relpermalink":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E9%BB%91%E5%A1%9E%E6%82%89%E8%BE%BE%E5%A4%9A/","section":"post","summary":"我看的是将姜乙译本的《悉达多》，读起来有诗的韵味。 哦，功德圆满的佛陀，只是，在您的法义中，在统一、逻辑完善的万物中却存在一个断裂之处。这一小","tags":["悉达多"],"title":"阅读笔记：黑塞《悉达多》","type":"post","url":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E9%BB%91%E5%A1%9E%E6%82%89%E8%BE%BE%E5%A4%9A/","weight":0,"wordcount":1503},{"author":null,"categories":["read"],"content":"","date":1722254026,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2800,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1734508169,"objectID":"7010b57e59e9367fc0aea645aba7b1e8","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%BC%97%E6%B4%9B%E5%A7%86%E7%88%B1%E7%9A%84%E8%89%BA%E6%9C%AF/","publishdate":"2024-07-29T19:53:46+08:00","readingtime":6,"relpermalink":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%BC%97%E6%B4%9B%E5%A7%86%E7%88%B1%E7%9A%84%E8%89%BA%E6%9C%AF/","section":"post","summary":"1 摘要 1.1 爱是一门艺术吗？ 弗洛姆的研究植根于弗洛伊德的精神分析学说和马克思主义哲学理论。他认为人是各自所在的产物，在现代工业化社会，人变得越来","tags":["爱的艺术"],"title":"阅读笔记：弗洛姆《爱的艺术》","type":"post","url":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%BC%97%E6%B4%9B%E5%A7%86%E7%88%B1%E7%9A%84%E8%89%BA%E6%9C%AF/","weight":0,"wordcount":2769},{"author":null,"categories":["Tech"],"content":"","date":1721091892,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1721093224,"objectID":"045df1e47adf515d7ce6b0266c497c26","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%87%E7%BB%B4%E9%92%A2%E6%8B%90%E7%82%B9/","publishdate":"2024-07-16T09:04:52+08:00","readingtime":1,"relpermalink":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%87%E7%BB%B4%E9%92%A2%E6%8B%90%E7%82%B9/","section":"post","summary":"演员郑伊健在一部赛车电影里有句话叫“人要比车凶”，指的是人一定要比工具强势。 ——黄仁宇《万历十五年》 一 人要比AI凶 计算机硬件条件的进步推动了","tags":["拐点","AI"],"title":"阅读笔记：万维钢《拐点》","type":"post","url":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%87%E7%BB%B4%E9%92%A2%E6%8B%90%E7%82%B9/","weight":0,"wordcount":302},{"author":null,"categories":["Tech"],"content":"","date":1718328637,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1718351351,"objectID":"d718ef991cebc52d5833149056f40311","permalink":"https://huuuuuuo.github.io/post/%E4%BB%A3%E7%A0%81%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D1mass%E7%AE%A1%E7%90%86%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/","publishdate":"2024-06-14T09:30:37+08:00","readingtime":3,"relpermalink":"/post/%E4%BB%A3%E7%A0%81%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D1mass%E7%AE%A1%E7%90%86%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/","section":"post","summary":"参考： https://www.cnblogs.com/obge/p/13155317.html https://cloud.tencent.com/developer/article/1716630 1 mass管理：不安全的绑定器 比如说有一个类，类中有很多个属性：性别，姓名，身份证号，准考证号，通过控制属性的公开与否，使得攻击者","tags":["代码漏洞","白盒扫描"],"title":"代码漏洞修复（1）：mass管理、访问控制","type":"post","url":"/post/%E4%BB%A3%E7%A0%81%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D1mass%E7%AE%A1%E7%90%86%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/","weight":0,"wordcount":1079},{"author":null,"categories":["Tech"],"content":"","date":1718325159,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":700,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1718326875,"objectID":"ed679c5b62a9845a2ab3b14f145b1da1","permalink":"https://huuuuuuo.github.io/post/%E7%99%BD%E7%9B%92%E6%89%AB%E6%8F%8F%E5%A6%82%E4%BD%95%E4%B8%8Eai%E7%BB%93%E5%90%88/","publishdate":"2024-06-14T08:32:39+08:00","readingtime":2,"relpermalink":"/post/%E7%99%BD%E7%9B%92%E6%89%AB%E6%8F%8F%E5%A6%82%E4%BD%95%E4%B8%8Eai%E7%BB%93%E5%90%88/","section":"post","summary":"1 出发点 将代码漏洞扫描（白盒扫描）与AI结合，可以通过多种方式来实现。 其出发点可以包括提高扫描的效率、准确性和覆盖率，提升功能使用便捷程度。","tags":["ai","白盒扫描"],"title":"白盒扫描如何与AI结合","type":"post","url":"/post/%E7%99%BD%E7%9B%92%E6%89%AB%E6%8F%8F%E5%A6%82%E4%BD%95%E4%B8%8Eai%E7%BB%93%E5%90%88/","weight":0,"wordcount":644},{"author":null,"categories":["Tech"],"content":"","date":1717519790,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1600,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1718072594,"objectID":"b17c0f85b1a355f64a41ed237e98bbcb","permalink":"https://huuuuuuo.github.io/post/git%E4%BD%BF%E7%94%A8%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/","publishdate":"2024-06-05T00:49:50+08:00","readingtime":4,"relpermalink":"/post/git%E4%BD%BF%E7%94%A8%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/","section":"post","summary":"参考： 【git 使用】如何在本地管理和切换多个 github 账号 Windows下使用ssh-add报错 Error connecting to agent: No such file or directory Git配置多个用户 1 创建 SSH 密钥 如果","tags":["git"],"title":"Git使用：如何在本地管理和切换多个github账号","type":"post","url":"/post/git%E4%BD%BF%E7%94%A8%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/","weight":0,"wordcount":1549},{"author":null,"categories":["Tech"],"content":"","date":1717514952,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1000,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1718764349,"objectID":"38d84c4e7c67ecf43403fe2102acf2fb","permalink":"https://huuuuuuo.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8F%8A%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0%E4%BC%98%E5%8C%96/","publishdate":"2024-06-04T23:29:12+08:00","readingtime":2,"relpermalink":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8F%8A%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0%E4%BC%98%E5%8C%96/","section":"post","summary":"参考： https://blog.csdn.net/fsfjdtpzus/article/details/106256925 1 目标 学习《神经网络与深度学习》第二章反向传播，并在第一章练习的基础上，将训练集掺入我们自己的数据进行训练，看看泛化效果如何。例如在","tags":["神经网络与深度学习","AI"],"title":"学习笔记：《神经网络与深度学习》第二章及第一章练习优化","type":"post","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8F%8A%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0%E4%BC%98%E5%8C%96/","weight":0,"wordcount":984},{"author":null,"categories":["Tech"],"content":"","date":1717070440,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1717484298,"objectID":"6d76b0c1669754df1396920e8600e910","permalink":"https://huuuuuuo.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0/","publishdate":"2024-05-30T20:00:40+08:00","readingtime":3,"relpermalink":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0/","section":"post","summary":"1 目标 构建一个自己手写的数据集，作为测试集，测试神经网络的性能。 2 步骤 数据处理：将图片转化为28*28的大小（同时进行灰度化，归一化等） 格式","tags":["神经网络与深度学习","AI"],"title":"学习笔记：《神经网络与深度学习》第一章练习","type":"post","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0/","weight":0,"wordcount":1376},{"author":null,"categories":["read"],"content":"","date":1717057445,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":700,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1734507998,"objectID":"6061211d4fc8b06913188b5cb87fc1e0","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%86%B7%E7%AC%91%E8%AF%9D%E6%94%B6%E9%9B%86/","publishdate":"2024-05-30T16:24:05+08:00","readingtime":2,"relpermalink":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%86%B7%E7%AC%91%E8%AF%9D%E6%94%B6%E9%9B%86/","section":"post","summary":"猫会喵喵叫，狗会汪汪汪，鸭会嘎嘎嘎，鸡会什么？ 鸡会留给有准备的人 一朵花为什么好笑？ 因为它有梗 为什么蚊子不吃辣椒？ 因为蚊子吃blood（不辣的","tags":["冷笑话"],"title":"阅读笔记：冷笑话收集","type":"post","url":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%86%B7%E7%AC%91%E8%AF%9D%E6%94%B6%E9%9B%86/","weight":0,"wordcount":681},{"author":null,"categories":["Tech"],"content":"","date":1716769507,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":3400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716867215,"objectID":"96c69d3583bbb8d959a89ce456c3e277","permalink":"https://huuuuuuo.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/","publishdate":"2024-05-27T08:25:07+08:00","readingtime":7,"relpermalink":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/","section":"post","summary":"本文阅读书籍与参考代码： 《神经网络与深度学习》 https://github.com/MichalDanielDobrzanski/DeepLearningPython 1 使⽤神经⽹络识别⼿写数字 神经⽹络使⽤样本来⾃动推断出识别⼿写数字的规则。另外，通过增加训练","tags":["神经网络与深度学习","AI"],"title":"学习笔记：《神经网络与深度学习》第一章","type":"post","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/","weight":0,"wordcount":3325},{"author":null,"categories":["Tech"],"content":"","date":1716453199,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716453408,"objectID":"35c55a14e961f034d2388e4921a12f71","permalink":"https://huuuuuuo.github.io/post/git%E6%96%B0%E5%BB%BA%E7%A9%BA%E5%88%86%E6%94%AF%E5%B9%B6%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/","publishdate":"2024-05-23T16:33:19+08:00","readingtime":1,"relpermalink":"/post/git%E6%96%B0%E5%BB%BA%E7%A9%BA%E5%88%86%E6%94%AF%E5%B9%B6%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/","section":"post","summary":"要新建一个空分支，其实就是新建一个分支，然后清空该分支下的所有文件 因为新建分支，该分支下的内容会和当前分支一样 1git branch qstart # 新建qstart分支 2git","tags":["git"],"title":"Git新建空分支并上传文件","type":"post","url":"/post/git%E6%96%B0%E5%BB%BA%E7%A9%BA%E5%88%86%E6%94%AF%E5%B9%B6%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/","weight":0,"wordcount":152},{"author":null,"categories":["read"],"content":"","date":1716279461,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716863289,"objectID":"42df8d2a08217921125abc0918b0b8a3","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9D%8E%E5%A8%9F%E6%88%91%E7%9A%84%E9%98%BF%E5%8B%92%E6%B3%B0/","publishdate":"2024-05-21T16:17:41+08:00","readingtime":1,"relpermalink":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9D%8E%E5%A8%9F%E6%88%91%E7%9A%84%E9%98%BF%E5%8B%92%E6%B3%B0/","section":"post","summary":"这本书应该是2010版的《我的阿勒泰》。 读了开头的三篇文章。初读的时候觉得，好像没有什么特别的。无非是出远门工作，回家又带了点东西来给家里人","tags":["李娟"],"title":"阅读笔记：李娟《我的阿勒泰》","type":"post","url":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9D%8E%E5%A8%9F%E6%88%91%E7%9A%84%E9%98%BF%E5%8B%92%E6%B3%B0/","weight":0,"wordcount":211},{"author":null,"categories":["Tech"],"content":"","date":1716253184,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2000,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"4ad9a8ec68f6e34eda91b558961a731f","permalink":"https://huuuuuuo.github.io/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0svm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/","publishdate":"2024-05-21T08:59:44+08:00","readingtime":4,"relpermalink":"/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0svm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/","section":"post","summary":"参考： https://zhuanlan.zhihu.com/p/49331510 https://zhuanlan.zhihu.com/p/24638007 https://zhuanlan.zhihu.com/p/357963858 https://www.cnblogs.com/pinard/p/5970503.html 1 SVM算法 支持向量机（Support Vector Machine，SVM）是一种经典的监督学习算法，用于解决二分类和多分类问题。其核心思","tags":["深度学习","SVM"],"title":"深度学习：SVM算法笔记","type":"post","url":"/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0svm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/","weight":0,"wordcount":1983},{"author":null,"categories":["Tech"],"content":"","date":1715909379,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"7748653884acaabeea9e958a51bdbc1f","permalink":"https://huuuuuuo.github.io/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0knn%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/","publishdate":"2024-05-17T09:29:39+08:00","readingtime":3,"relpermalink":"/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0knn%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/","section":"post","summary":"参考： https://zhuanlan.zhihu.com/p/25994179 https://zhuanlan.zhihu.com/p/26029567 https://zhuanlan.zhihu.com/p/650548703 1 什么是KNN kNN（k-nearest neighbor classification），即k近邻算法。 给定一个训练数据集，对新的输入实例，在训","tags":["深度学习","KNN"],"title":"深度学习：KNN算法笔记","type":"post","url":"/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0knn%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/","weight":0,"wordcount":1309},{"author":null,"categories":["read"],"content":"","date":1715418113,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":600,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"8ce2e475189dd70b06422300a85f2559","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%88%98%E6%85%88%E6%AC%A3%E6%9C%9D%E9%97%BB%E9%81%93/","publishdate":"2024-05-11T17:01:53+08:00","readingtime":2,"relpermalink":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%88%98%E6%85%88%E6%AC%A3%E6%9C%9D%E9%97%BB%E9%81%93/","section":"post","summary":"《朝闻道》 这篇小说主要写了科学家们为了得到宇宙终极真相而心甘情愿赴死的故事。 这表述了文章的主要思想——朝闻道，夕死可矣。对于科学家，终极真理","tags":["刘慈欣"],"title":"阅读笔记：刘慈欣《朝闻道》、《时间旅行》","type":"post","url":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%88%98%E6%85%88%E6%AC%A3%E6%9C%9D%E9%97%BB%E9%81%93/","weight":0,"wordcount":538},{"author":null,"categories":["read"],"content":"","date":1715413161,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":700,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"3fb5b64e1f40ac084df6c34cdf170fc6","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0ai%E5%90%AF%E7%A4%BA/","publishdate":"2024-05-11T15:39:21+08:00","readingtime":2,"relpermalink":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0ai%E5%90%AF%E7%A4%BA/","section":"post","summary":"本文为以下文章的阅读笔记： https://36kr.com/p/2770849347648260 不可否认，GPT经常会犯一些低级错误。但陈云飞认为，事实并不是GPT擅长的，而当它被用在教育方面时，凭借极强的逻","tags":["AI"],"title":"阅读笔记：AI启示","type":"post","url":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0ai%E5%90%AF%E7%A4%BA/","weight":0,"wordcount":689},{"author":null,"categories":["Tech"],"content":"","date":1714352563,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":800,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"2a25da812f9c71ede34e816b42649789","permalink":"https://huuuuuuo.github.io/post/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7jmeter%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/","publishdate":"2024-04-29T09:02:43+08:00","readingtime":2,"relpermalink":"/post/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7jmeter%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/","section":"post","summary":"1 性能指标 1.1 TPS TPS (transaction per second) 是服务端每秒处理请求的数量 TPS 最直观的反映了系统的处理能力，是重要的性能指标之一。 1.2 响应时长 响应时长 就是 服务端 处理请求耗","tags":["性能测试","jmeter"],"title":"性能测试：jmeter使用学习","type":"post","url":"/post/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7jmeter%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/","weight":0,"wordcount":706},{"author":null,"categories":["Tech"],"content":"","date":1713951518,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"9823c625df718a48a1a1f3cbc9c61774","permalink":"https://huuuuuuo.github.io/post/github%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81/","publishdate":"2024-04-24T17:38:38+08:00","readingtime":1,"relpermalink":"/post/github%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81/","section":"post","summary":"1 在cmd创建新仓库 1.1 在github页面上新建仓库 1.2 在本地新建仓库 首先，创建.gitignore文件，将不需要上传的文件和文件夹写进去，例如","tags":["github"],"title":"Github新建仓库并添加本地代码或文件","type":"post","url":"/post/github%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81/","weight":0,"wordcount":177},{"author":null,"categories":["Tech"],"content":"","date":1713940856,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":22000,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"6b78b82f6e291af023f2e7cad418b13b","permalink":"https://huuuuuuo.github.io/post/vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","publishdate":"2024-04-24T14:40:56+08:00","readingtime":44,"relpermalink":"/post/vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","section":"post","summary":"本文转载并修改自尚硅谷Vue3入门到实战 1. Vue3简介 2020年9月18日，Vue.js发布版3.0版本，代号：One Piece（n 经历了：","tags":["vue3"],"title":"Vue3学习笔记","type":"post","url":"/post/vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","weight":0,"wordcount":21906},{"author":null,"categories":["read"],"content":"","date":1713927841,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":900,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1734507987,"objectID":"43e7af62f176b0d877468206391dbaf0","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%87%E5%8E%86%E5%8D%81%E4%BA%94%E5%B9%B4%E6%91%98%E8%A6%81/","publishdate":"2024-04-24T11:04:01+08:00","readingtime":2,"relpermalink":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%87%E5%8E%86%E5%8D%81%E4%BA%94%E5%B9%B4%E6%91%98%E8%A6%81/","section":"post","summary":"粗略浏览了下《万历十五年》，主要思想大概是下面这句，也是本书结尾： 当一个人口众多的国家，各人行动全凭儒家简单粗浅而又无法固定的原则所限制，而","tags":["万历十五年"],"title":"阅读笔记：《万历十五年》摘要","type":"post","url":"/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%87%E5%8E%86%E5%8D%81%E4%BA%94%E5%B9%B4%E6%91%98%E8%A6%81/","weight":0,"wordcount":861},{"author":null,"categories":["Tech"],"content":"","date":1713453259,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"f2f25172f3637e210e5f5d932824a266","permalink":"https://huuuuuuo.github.io/post/html%E9%A1%B5%E9%9D%A2%E5%B5%8C%E5%85%A5%E6%B5%81%E7%A8%8B%E5%9B%BE/","publishdate":"2024-04-18T23:14:19+08:00","readingtime":1,"relpermalink":"/post/html%E9%A1%B5%E9%9D%A2%E5%B5%8C%E5%85%A5%E6%B5%81%E7%A8%8B%E5%9B%BE/","section":"post","summary":"想要在html页面中嵌入流程图，并且不能是图片，需要进行文本复制，同时还想要能够点击链接。考虑的方案是html+js。","tags":["html","流程图","drawio","Mermaid"],"title":"Html页面嵌入流程图","type":"post","url":"/post/html%E9%A1%B5%E9%9D%A2%E5%B5%8C%E5%85%A5%E6%B5%81%E7%A8%8B%E5%9B%BE/","weight":0,"wordcount":59},{"author":null,"categories":["Tech"],"content":"","date":1712840589,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"33f250ad2f034f674e1018224b6efe74","permalink":"https://huuuuuuo.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E6%94%B9%E9%80%A0%E6%96%B0%E5%A2%9E%E7%83%AD%E6%A6%9C/","publishdate":"2024-04-11T21:03:09+08:00","readingtime":3,"relpermalink":"/post/hugo%E5%8D%9A%E5%AE%A2%E6%94%B9%E9%80%A0%E6%96%B0%E5%A2%9E%E7%83%AD%E6%A6%9C/","section":"post","summary":"1 显示效果 通过接口获取各个平台的热搜榜，集成在自己的博客上 2 解决方法 首先，要找到热榜的接口，通过js访问接口来获取各大网站的热门榜。我使用的","tags":["hugo","博客改造"],"title":"Hugo博客改造：新增热榜","type":"post","url":"/post/hugo%E5%8D%9A%E5%AE%A2%E6%94%B9%E9%80%A0%E6%96%B0%E5%A2%9E%E7%83%AD%E6%A6%9C/","weight":0,"wordcount":1372},{"author":null,"categories":["Tech"],"content":"","date":1712763103,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":700,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"1021041184689710d8030b7060dc1e15","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E5%B9%B4%E6%9C%88%E6%97%A5%E6%97%B6%E9%97%B4%E8%BF%9B%E5%BA%A6%E6%9D%A1/","publishdate":"2024-04-10T23:31:43+08:00","readingtime":2,"relpermalink":"/post/hugo%E5%A2%9E%E5%8A%A0%E5%B9%B4%E6%9C%88%E6%97%A5%E6%97%B6%E9%97%B4%E8%BF%9B%E5%BA%A6%E6%9D%A1/","section":"post","summary":"1 显示效果 增加年、月、日的时间进度条显示，如下，可以显示当前时间在今天、当月、当年的进度。 2 解决方案 在侧边栏layouts\\partials","tags":["hugo","进度条","博客改造"],"title":"Hugo：增加年月日时间进度条","type":"post","url":"/post/hugo%E5%A2%9E%E5%8A%A0%E5%B9%B4%E6%9C%88%E6%97%A5%E6%97%B6%E9%97%B4%E8%BF%9B%E5%BA%A6%E6%9D%A1/","weight":0,"wordcount":602},{"author":null,"categories":["Tech"],"content":"","date":1712584612,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1741590072,"objectID":"0f236ecbf1d3879896bbef61e9fca97a","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/","publishdate":"2024-04-08T21:56:52+08:00","readingtime":3,"relpermalink":"/post/hugo%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/","section":"post","summary":"1 显示效果 给hugo博客添加天气预报的效果，其实不只是给hugo，所有博客都是通用的。 我自己想要一打开就能看到天气，所以增加了这个功能。可以","tags":["hugo","天气预报","博客改造"],"title":"Hugo：添加天气预报","type":"post","url":"/post/hugo%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/","weight":0,"wordcount":1134},{"author":null,"categories":["Tech"],"content":"","date":1712250329,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"e792347c304e9f42584b4c69bf629289","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E5%8F%B0%E8%AF%8D%E9%9A%8F%E6%9C%BA%E6%98%BE%E7%A4%BA/","publishdate":"2024-04-05T01:05:29+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%A2%9E%E5%8A%A0%E5%8F%B0%E8%AF%8D%E9%9A%8F%E6%9C%BA%E6%98%BE%E7%A4%BA/","section":"post","summary":"1 显示效果 2 解决方法 因为没找到这种台词的接口，于是就去网上搜罗了一堆放在csv里面，然后页面刷新的时候自动从csv中抽取一行台词进行展示。分","tags":["hugo","博客改造"],"title":"Hugo：增加台词随机展示","type":"post","url":"/post/hugo%E5%A2%9E%E5%8A%A0%E5%8F%B0%E8%AF%8D%E9%9A%8F%E6%9C%BA%E6%98%BE%E7%A4%BA/","weight":0,"wordcount":431},{"author":null,"categories":["Tech"],"content":"","date":1712234001,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"7538ef6fcb9a7a8e43cce469f6ed8836","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%AD%E8%8B%B1%E6%96%87%E4%B9%8B%E9%97%B4%E8%87%AA%E5%8A%A8%E5%8A%A0%E7%A9%BA%E6%A0%BC/","publishdate":"2024-04-04T20:33:21+08:00","readingtime":1,"relpermalink":"/post/hugo%E4%B8%AD%E8%8B%B1%E6%96%87%E4%B9%8B%E9%97%B4%E8%87%AA%E5%8A%A8%E5%8A%A0%E7%A9%BA%E6%A0%BC/","section":"post","summary":"1 显示效果 中英文之间auto自动加空格 2 解决方法 可以使用 盘古之白 在文件layouts\\partials\\footer.html中，加入以下代","tags":["hugo"],"title":"Hugo：中英文之间自动加空格","type":"post","url":"/post/hugo%E4%B8%AD%E8%8B%B1%E6%96%87%E4%B9%8B%E9%97%B4%E8%87%AA%E5%8A%A8%E5%8A%A0%E7%A9%BA%E6%A0%BC/","weight":0,"wordcount":121},{"author":null,"categories":["Tech"],"content":"Hugo的归档显示改为年月日统计","date":1712224593,"description":"Hugo的归档显示改为年月日统计","dir":"post\\","excerpt_html":"Hugo的归档显示改为年月日统计","excerpt_text":"Hugo的归档显示改为年月日统计","expirydate":-62135596800,"fuzzywordcount":400,"html":"Hugo的归档显示改为年月日统计","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"9ab438d09db5296eb018402dbf556f18","permalink":"https://huuuuuuo.github.io/post/hugo%E5%BD%92%E6%A1%A3%E6%94%B9%E4%B8%BA%E5%B9%B4%E6%9C%88%E7%BB%9F%E8%AE%A1/","publishdate":"2024-04-04T17:56:33+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%BD%92%E6%A1%A3%E6%94%B9%E4%B8%BA%E5%B9%B4%E6%9C%88%E7%BB%9F%E8%AE%A1/","section":"post","summary":"1 显示效果 在归档archive页面中，我将归档显示方式改为先按日，再按月和年来统计。 2 解决方法 在文件 layouts\\_default\\archive.html 中修改统计方式： 重点是 第一个按年分组要","tags":["hugo"],"title":"Hugo：归档改为年月日统计","type":"post","url":"/post/hugo%E5%BD%92%E6%A1%A3%E6%94%B9%E4%B8%BA%E5%B9%B4%E6%9C%88%E7%BB%9F%E8%AE%A1/","weight":0,"wordcount":311},{"author":null,"categories":["Tech"],"content":"Hugo实现顶部阅读进度条功能","date":1712061866,"description":"Hugo实现顶部阅读进度条功能","dir":"post\\","excerpt_html":"Hugo实现顶部阅读进度条功能","excerpt_text":"Hugo实现顶部阅读进度条功能","expirydate":-62135596800,"fuzzywordcount":300,"html":"Hugo实现顶部阅读进度条功能","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"9bba5a7773b4de0d20e11ceb3850ca7a","permalink":"https://huuuuuuo.github.io/post/hugo%E9%98%85%E8%AF%BB%E8%BF%9B%E5%BA%A6%E6%9D%A1/","publishdate":"2024-04-02T20:44:26+08:00","readingtime":1,"relpermalink":"/post/hugo%E9%98%85%E8%AF%BB%E8%BF%9B%E5%BA%A6%E6%9D%A1/","section":"post","summary":"1 显示效果 今天突然想起来可以搞一个阅读进度条的功能，还挺好看的，通过一番搜寻找到了一个很不错的解决方案，最终实现效果如下： 2 解决方案 要实现在","tags":["hugo"],"title":"Hugo：阅读进度条","type":"post","url":"/post/hugo%E9%98%85%E8%AF%BB%E8%BF%9B%E5%BA%A6%E6%9D%A1/","weight":0,"wordcount":257},{"author":null,"categories":["Tech"],"content":"","date":1711956492,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"ba162133db8a620a8d0b4c2f0737e94f","permalink":"https://huuuuuuo.github.io/post/hugo%E5%B0%86%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/","publishdate":"2024-04-01T15:28:12+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%B0%86%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/","section":"post","summary":"1 显示效果 现在可以按照最后更新时间进行排序了 2 修改代码 在 layouts\\partials\\portfolio.html 中，将以下一行代码替换成后面三行。 原代码： 1\u0026lt;!-- {{ $paginator := .Paginate (where (where .Site.Pages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;) \u0026#34;IsPage\u0026#34; true) }} --\u0026gt; 替换成： 1{{ $sortedPages","tags":["hugo","lastmod"],"title":"Hugo：将首页文章按照最后修改时间显示","type":"post","url":"/post/hugo%E5%B0%86%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/","weight":0,"wordcount":139},{"author":null,"categories":["Tech"],"content":"","date":1711935954,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1700,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"6a24bfbef4ff156922a65a9ff1b5b5b2","permalink":"https://huuuuuuo.github.io/post/hugo%E5%AD%A6%E4%B9%A0/","publishdate":"2024-04-01T09:45:54+08:00","readingtime":4,"relpermalink":"/post/hugo%E5%AD%A6%E4%B9%A0/","section":"post","summary":"此文章用于长期更新hugo学习的内容 1 模板 1├── layouts 2└── themes 3 └── mytheme 4 └── layouts 5 ├── 404.html // 404页面模板 6 ├── _default 7 │ ├── baseof.html // 默认的基","tags":["hugo"],"title":"Hugo学习笔记（长期更新）","type":"post","url":"/post/hugo%E5%AD%A6%E4%B9%A0/","weight":0,"wordcount":1601},{"author":null,"categories":["Tech"],"content":"","date":1711932015,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":900,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"b6839164e24735f5d66accd7f3971ea1","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2/","publishdate":"2024-04-01T08:40:15+08:00","readingtime":2,"relpermalink":"/post/hugo%E5%A2%9E%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2/","section":"post","summary":"想要在网站上做几个新页面 1 在配置文件中新增标签 1 [[params.addtional_menus]] 2 title = \u0026#34;TREND\u0026#34; 3 href = \u0026#34;/trend\u0026#34; 2 新增页面布局 2.1 沿用已有布局 新增了标签以后，点进去是404，这是因为还没有","tags":["hugo","增加新页面"],"title":"Hugo：增加新页面","type":"post","url":"/post/hugo%E5%A2%9E%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2/","weight":0,"wordcount":873},{"author":null,"categories":["Tech"],"content":"","date":1711887971,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2000,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"24452958043601cf30d7e71cef42b371","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","publishdate":"2024-03-31T20:26:11+08:00","readingtime":4,"relpermalink":"/post/hugo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","section":"post","summary":"1 显示效果 可以看到在右上角有一个搜索图标，原本是这个主题带的，原本是点击以后会进入一个新的 search页面进行搜索，但是我用的时候发现这个功","tags":["hugo","搜索","fuse"],"title":"Hugo：增加搜索功能","type":"post","url":"/post/hugo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","weight":0,"wordcount":1982},{"author":null,"categories":["Tech"],"content":"","date":1711869783,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"ca6a8eb9b615c73bae7a4e72ac37c513","permalink":"https://huuuuuuo.github.io/post/githubpages%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/","publishdate":"2024-03-31T15:23:03+08:00","readingtime":1,"relpermalink":"/post/githubpages%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/","section":"post","summary":"1 申请域名 可以去找个免费域名网站，我用的是： 域名申请或者购买成功了以后，我们还需要解析域名。 2 解析域名 输入ping xxx.github.io","tags":["githubpages","域名","dns"],"title":"GithubPages配置域名","type":"post","url":"/post/githubpages%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/","weight":0,"wordcount":135},{"author":null,"categories":["Tech"],"content":"","date":1711866836,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"89f8b462d6cfa89ae6d07c60e8679b5e","permalink":"https://huuuuuuo.github.io/post/%E5%9F%9F%E5%90%8Da%E8%AE%B0%E5%BD%95cname%E7%AD%89%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88/","publishdate":"2024-03-31T14:33:56+08:00","readingtime":5,"relpermalink":"/post/%E5%9F%9F%E5%90%8Da%E8%AE%B0%E5%BD%95cname%E7%AD%89%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88/","section":"post","summary":"今天想要给博客搞个域名，涉及了一大堆专业名词，在此记录一下。 1 域名 域名就是最常见的网址，比如 www.baidu.com ，因为ip地址不好记，所以用域名来代替，我们访","tags":["域名","A记录","CNAME","DNS"],"title":"域名、A记录、CNAME等都是什么","type":"post","url":"/post/%E5%9F%9F%E5%90%8Da%E8%AE%B0%E5%BD%95cname%E7%AD%89%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88/","weight":0,"wordcount":2408},{"author":null,"categories":["Tech"],"content":"","date":1711801604,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"d984774c675340fd0275a4ceb2240e77","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E9%9A%8F%E6%9C%BA%E6%B5%8F%E8%A7%88%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/","publishdate":"2024-03-30T20:26:44+08:00","readingtime":1,"relpermalink":"/post/hugo%E6%B7%BB%E5%8A%A0%E9%9A%8F%E6%9C%BA%E6%B5%8F%E8%A7%88%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/","section":"post","summary":"偶然看见了一位大佬的博客 给 Hugo 博客添加随机文章入口 ，发现了他做了这个功能，感觉可以搞一下，于是借鉴了她的代码，感谢。 1 显示效果 在博客的右上角添","tags":["hugo","随机浏览"],"title":"Hugo：添加随机浏览文章功能","type":"post","url":"/post/hugo%E6%B7%BB%E5%8A%A0%E9%9A%8F%E6%9C%BA%E6%B5%8F%E8%A7%88%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/","weight":0,"wordcount":214},{"author":null,"categories":["Tech"],"content":"","date":1711785208,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1000,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"664866d395d5deab061e8a0ec3f491e9","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%AD%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/","publishdate":"2024-03-30T15:53:28+08:00","readingtime":2,"relpermalink":"/post/hugo%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%AD%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/","section":"post","summary":"首先感谢 眠于水月间 大佬，文章主要收集于他的文章，[Hugo | 在 Stack 主题上可行的短代码们] 本文旨在收集一些有趣的短代码，因此主要是呈现使用方式，","tags":["hugo","shortcodes","短代码"],"title":"Hugo：一些有趣的短代码收集","type":"post","url":"/post/hugo%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%AD%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/","weight":0,"wordcount":907},{"author":null,"categories":["Tech"],"content":"","date":1711776731,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"b1a2db90287447053a1e20099c6bab9e","permalink":"https://huuuuuuo.github.io/post/hugo%E6%96%87%E5%AD%97%E6%A0%87%E8%AE%B0/","publishdate":"2024-03-30T13:32:11+08:00","readingtime":1,"relpermalink":"/post/hugo%E6%96%87%E5%AD%97%E6%A0%87%E8%AE%B0/","section":"post","summary":"1 显示效果 第一种，正经标记： 对文字进行标记 第二种，将文字放在代码里，利用代码的颜色来进行标记： 对文字进行标记 2 解决方案 首先，利用短代码，添加","tags":["hugo","mark","标记"],"title":"Hugo：文字标记","type":"post","url":"/post/hugo%E6%96%87%E5%AD%97%E6%A0%87%E8%AE%B0/","weight":0,"wordcount":201},{"author":null,"categories":["Tech"],"content":"","date":1711771186,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":800,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"2f8d5d10e5c8d97ef28dca1789782e93","permalink":"https://huuuuuuo.github.io/post/hugo%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%90%8E%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/","publishdate":"2024-03-30T11:59:46+08:00","readingtime":2,"relpermalink":"/post/hugo%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%90%8E%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/","section":"post","summary":"1 显示效果 目前的显示效果如下，每篇文章可以正常显示最后修改时间。 但是之前， 这两个地方都是显示同一个时间，那就是最近一次 git 提交时间的8小时之前","tags":["hugo","lastmod"],"title":"Hugo：文章发布后最后修改时间不一致问题","type":"post","url":"/post/hugo%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%90%8E%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/","weight":0,"wordcount":740},{"author":null,"categories":["Tech"],"content":"","date":1711735860,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":600,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"4866736a48fc28151d59ffc1046ffd3b","permalink":"https://huuuuuuo.github.io/post/hugo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E9%A3%8E%E6%A0%BC/","publishdate":"2024-03-30T02:11:00+08:00","readingtime":2,"relpermalink":"/post/hugo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E9%A3%8E%E6%A0%BC/","section":"post","summary":"1 代码高亮风格 代码高亮风格很多，可以参见 Chroma Style Gallery 看起来都不错，可以考虑添加进 hugo 2 遇到问题 之前我已经在 config.toml 中已经添加如下配置： 1[markup] 2 [markup.highlight] 3 codeFences = true 4 guessSyntax =","tags":["hugo","代码高亮","Chroma Style Gallery"],"title":"Hugo：代码高亮风格","type":"post","url":"/post/hugo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E9%A3%8E%E6%A0%BC/","weight":0,"wordcount":591},{"author":null,"categories":["Tech"],"content":"","date":1711734194,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":900,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"10b5d7cb6adad9f1ec1fef3c6408ca6b","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E7%83%AD%E5%8A%9B%E5%9B%BE/","publishdate":"2024-03-30T01:43:14+08:00","readingtime":2,"relpermalink":"/post/hugo%E6%B7%BB%E5%8A%A0%E7%83%AD%E5%8A%9B%E5%9B%BE/","section":"post","summary":"1 显示效果 鼠标未移动到上面的时候，根据发表文章的数量显示热力图： 如果鼠标移动到上面，会显示当天发表的文章详情，并且可以点击进行跳转： 2 解决方","tags":["hugo","热力图"],"title":"Hugo：添加热力图","type":"post","url":"/post/hugo%E6%B7%BB%E5%8A%A0%E7%83%AD%E5%8A%9B%E5%9B%BE/","weight":0,"wordcount":867},{"author":null,"categories":["Tech"],"content":"","date":1711646170,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":["hugo","图片放大","灯箱","fancybox"],"kind":"page","lang":"en","lastmod":1716452916,"objectID":"bc0e7d3f6905fece5531bdf8a9d456c7","permalink":"https://huuuuuuo.github.io/post/hugo%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7/","publishdate":"2024-03-29T01:16:10+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7/","section":"post","summary":"1 显示效果 想要知乎这种图片点击放大的效果，一查才知道是灯箱。 2 解决方案 2.1 修改 config.toml 在 config.toml文件中，添加如下代码： 1[params] 2 fancybox = true 2.2 创建","tags":["hugo","图片放大","灯箱","fancybox"],"title":"Hugo：图片点击放大","type":"post","url":"/post/hugo%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7/","weight":0,"wordcount":188},{"author":null,"categories":["Tech"],"content":"","date":1711608947,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"e57543c6b97c45742a0c0a0e954e08ef","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/","publishdate":"2024-03-28T14:55:47+08:00","readingtime":1,"relpermalink":"/post/hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/","section":"post","summary":"1 显示效果 2 解决方案 我正在使用的主题所提供的评论方案是： 1 [params.giscus] 2 data_repo=\u0026#34;your GitHub repo\u0026#34; 3 data_repo_id=\u0026#34;your repo id\u0026#34; 4 data_category=\u0026#34;your category\u0026#34; 5 data_category_id=\u0026#34;your category id\u0026#34; 6 data_mapping=\u0026#34;pathname\u0026#34; 7 data_reactions_enabled=\u0026#34;1\u0026#34; 8 data_emit_metadata=\u0026#34;0\u0026#34; 9 data_theme=\u0026#34;light\u0026#34; 10 data_lang=\u0026#34;en\u0026#34; 11 crossorigin=\u0026#34;anonymous\u0026#34; 在申请giscus 的时候，","tags":["hugo","评论","giscus"],"title":"Hugo：添加评论功能","type":"post","url":"/post/hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/","weight":0,"wordcount":251},{"author":null,"categories":["Tech"],"content":"","date":1711553028,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"84db042cb3d1bb238270430264cd42d1","permalink":"https://huuuuuuo.github.io/post/hugo%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/","publishdate":"2024-03-27T23:23:48+08:00","readingtime":3,"relpermalink":"/post/hugo%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/","section":"post","summary":"1 目前显示效果 1git add . 2git commit -m \u0026#34;update\u0026#34; 3git push origin master 2 解决方案 2.1 内容折叠 新建 themes\\hugo-theme-cleanwhite\\layouts\\shortcodes\\details.html 文件，并添加以下代码： 1\u0026lt;details style=\u0026#34;background-color:#ffffff;border-radius:6px;border:2px dashed rgba(187, 181, 181, 0.712);\u0026#34;\u0026gt; 2 \u0026lt;summary\u0026gt; \u0026lt;font color=#817f7f\u0026gt; \u0026gt; \u0026gt; \u0026gt; 展开 \u0026gt; \u0026gt; \u0026gt; \u0026lt;/font\u0026gt;\u0026lt;/summary\u0026gt; 3 {{ .Inner | markdownify }} 4\u0026lt;/details\u0026gt; 以","tags":["hugo","折叠","代码块"],"title":"Hugo：内容折叠与代码块大小限制","type":"post","url":"/post/hugo%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/","weight":0,"wordcount":1326},{"author":null,"categories":["Tech"],"content":"","date":1711550419,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"725606181735d66cb3fd989646ff1bba","permalink":"https://huuuuuuo.github.io/post/hugo%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/","publishdate":"2024-03-27T22:40:19+08:00","readingtime":1,"relpermalink":"/post/hugo%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/","section":"post","summary":"显示效果 解决方案 本文使用 不蒜子 来进行网站访问量的统计 前期也踩了几个坑，最后在官网发现了最佳解决方案，只需要将官网上的两行代码稍加改进就可以在","tags":["hugo","访问量"],"title":"Hugo：访问量统计","type":"post","url":"/post/hugo%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/","weight":0,"wordcount":392},{"author":null,"categories":["Tech"],"content":"","date":1711549646,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"aec01b3379f370864dab32c4eff79680","permalink":"https://huuuuuuo.github.io/post/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/","publishdate":"2024-03-27T22:27:26+08:00","readingtime":1,"relpermalink":"/post/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/","section":"post","summary":"显示效果 解决方案 本博客使用的是 霞鹜文楷 ，要在网站使用此字体，可以查看 霞鹜文楷屏幕阅读版 网络字体仓库 1、插入代码 将以下代码插入 themes\\hugo-theme-cleanwhite\\layouts\\partials\\head.html 1\u0026lt;html\u0026gt; 2\u0026lt;head\u0026gt; 3 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-web/style.css\u0026#34; /\u0026gt;","tags":["hugo","自定义","字体"],"title":"Hugo：自定义字体","type":"post","url":"/post/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/","weight":0,"wordcount":208},{"author":null,"categories":["Tech"],"content":"","date":1711530928,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"d778ae246021b388b63459ff0dd51a6a","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%80%E9%94%AE%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/","publishdate":"2024-03-27T17:15:28+08:00","readingtime":1,"relpermalink":"/post/hugo%E4%B8%80%E9%94%AE%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/","section":"post","summary":"文章参考自：https://github.com/sengmitnick/hugo-theme-hello-friend-ng/commit","tags":["hugo"],"title":"Hugo：一键回到顶部","type":"post","url":"/post/hugo%E4%B8%80%E9%94%AE%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/","weight":0,"wordcount":368},{"author":null,"categories":["Tech"],"content":"","date":1711526703,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"8d8e07debb6dcb0a509398def1e68509","permalink":"https://huuuuuuo.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","publishdate":"2024-03-27T16:05:03+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","section":"post","summary":"文章参考自 https://thirdshire.com/hugo-stack-renovation/ 显示效果 解决方案 1\u0026lt;!-- Add blog running time --\u0026gt; 2本博客已稳定运行 3\u0026lt;span id=\u0026#34;runningdays\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 4\u0026lt;script\u0026gt; 5let s1 = \u0026#39;2024-3-18\u0026#39;; //website start date 6s1 = new Date(s1.replace(/-/g, \u0026#34;/\u0026#34;)); 7let s2 = new Date(); 8let timeDifference = s2.getTime() - s1.getTime(); 9 10let days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); 11let","tags":["hugo"],"title":"Hugo：博客运行时间","type":"post","url":"/post/hugo%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","weight":0,"wordcount":154},{"author":null,"categories":["Tech"],"content":"","date":1711525118,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"8966776e7a9c9ada238d1f20b78bf50c","permalink":"https://huuuuuuo.github.io/post/hugo%E6%80%BB%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/","publishdate":"2024-03-27T15:38:38+08:00","readingtime":1,"relpermalink":"/post/hugo%E6%80%BB%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/","section":"post","summary":"文章参考自 https://thirdshire.com/hugo-stack-renovation/ 显示效果 解决方法 我是直接在主题上面改的，在主题的 layouts/partials/footer.html 里增加以下代码： 1\u0026lt;!-- 添加在copyright之前 --\u0026gt; 2 3\u0026lt;!-- Add total page and word count time --\u0026gt; 4{{$scratch := newScratch}} 5{{ range","tags":["hugo","字数统计"],"title":"Hugo：总字数统计","type":"post","url":"/post/hugo%E6%80%BB%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/","weight":0,"wordcount":116},{"author":null,"categories":["Tech"],"content":"","date":1711511059,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"c44aa516db8f5b3ffcc23be61f107a60","permalink":"https://huuuuuuo.github.io/post/git%E4%B9%8B.gitignore%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","publishdate":"2024-03-27T11:44:19+08:00","readingtime":1,"relpermalink":"/post/git%E4%B9%8B.gitignore%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","section":"post","summary":"文章转载修改自：https://blog.csdn.net/wwwtotoro/article/details/91042307 在根目录中新","tags":["git","gitignore"],"title":"Git：.gitignore无效解决方法","type":"post","url":"/post/git%E4%B9%8B.gitignore%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","weight":0,"wordcount":208},{"author":null,"categories":["Tech"],"content":"","date":1711505767,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"e1183f2dc35b553f2773d828d71f404e","permalink":"https://huuuuuuo.github.io/post/python%E6%97%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","publishdate":"2024-03-27T10:16:07+08:00","readingtime":1,"relpermalink":"/post/python%E6%97%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","section":"post","summary":"1 背景 有一个程序，使用asp、mysql、python实现，想要实现在另一台windows环境部署，需要将部署方法最简化。 目前考虑的方案是，","tags":["python","windows","sqlite"],"title":"Python无环境部署","type":"post","url":"/post/python%E6%97%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","weight":0,"wordcount":322},{"author":null,"categories":["Tech"],"content":"","date":1711018526,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"801a7e870b84e0512842736ce3ebda76","permalink":"https://huuuuuuo.github.io/post/hugo%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96/","publishdate":"2024-03-21T18:55:26+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96/","section":"post","summary":"使用hugo搭建博客的时候，md文件的图片存储路径有问题，对其进行改进 1、typora配置 图像存储路径改为如图，其中是以相对路径 ./ 开头 2、用","tags":["hugo","优化","脚本"],"title":"Hugo：图片存储路径优化","type":"post","url":"/post/hugo%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96/","weight":0,"wordcount":312},{"author":null,"categories":["Tech"],"content":"","date":1710997968,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"e9a2392476a5554e132dfbca2b9dca70","permalink":"https://huuuuuuo.github.io/post/hugo%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/","publishdate":"2024-03-21T13:12:48+08:00","readingtime":1,"relpermalink":"/post/hugo%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/","section":"post","summary":"本文转载与修改自：Hugo插件之代码块拷贝插件 添加按钮-css 我们通过检查博客内容页面发现，hugo生成的每个代码块格式如下： 没有语法突出显","tags":["hugo","copy","代码块"],"title":"Hugo：代码块拷贝","type":"post","url":"/post/hugo%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/","weight":0,"wordcount":486},{"author":null,"categories":["Tech"],"content":"","date":1710992202,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"2a18229f2d9a478d682323f5c2a084f2","permalink":"https://huuuuuuo.github.io/post/%E8%BF%9E%E6%8E%A5github%E6%97%B6connection-reset%E7%9A%84%E9%97%AE%E9%A2%98/","publishdate":"2024-03-21T11:36:42+08:00","readingtime":1,"relpermalink":"/post/%E8%BF%9E%E6%8E%A5github%E6%97%B6connection-reset%E7%9A%84%E9%97%AE%E9%A2%98/","section":"post","summary":"git连接时遇到问题 1ssh -T git@github.com 2Connection reset by 140.82.113.3 port 22 解决方案 在所生成ssh秘钥文件夹下（~/.ssh/）使用文本文档新建 config文件（无后缀）。 修改代","tags":["git","reset","ssh","git bug"],"title":"连接github时connection reset的问题","type":"post","url":"/post/%E8%BF%9E%E6%8E%A5github%E6%97%B6connection-reset%E7%9A%84%E9%97%AE%E9%A2%98/","weight":0,"wordcount":175},{"author":null,"categories":["Tech"],"content":"","date":1710945042,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"92fdbb87f0a4bd1f777338d973c30bd1","permalink":"https://huuuuuuo.github.io/post/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/","publishdate":"2024-03-20T22:30:42+08:00","readingtime":1,"relpermalink":"/post/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/","section":"post","summary":"本地编辑md我用的是typora，用一些快捷键会更好用 设置标题 ctrl + 1 ~6 标题1~6 等同于 一级标题：#+空格+标题内容 二级标题：##+空格+标题","tags":["typora","快捷键"],"title":"Typora快捷键","type":"post","url":"/post/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/","weight":0,"wordcount":335},{"author":null,"categories":["Tech"],"content":"","date":1710937842,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":800,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"2d17061a1bfccc1e03c911016720427d","permalink":"https://huuuuuuo.github.io/post/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","publishdate":"2024-03-20T20:30:42+08:00","readingtime":2,"relpermalink":"/post/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","section":"post","summary":"Git是一个分布式版本控制系统，用于跟踪文件的更改，协作开发，以及管理项目的版本。 index：暂存区 workspace：工作区 resposi","tags":["git"],"title":"git基本使用","type":"post","url":"/post/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","weight":0,"wordcount":734},{"author":null,"categories":["Tech"],"content":"","date":1710927042,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":900,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"d8dd340e5564597b9bdd40a58cea2a60","permalink":"https://huuuuuuo.github.io/post/hugo%E6%97%A5%E5%B8%B8%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/","publishdate":"2024-03-20T17:30:42+08:00","readingtime":2,"relpermalink":"/post/hugo%E6%97%A5%E5%B8%B8%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/","section":"post","summary":"1、新建文章 进入blog本地仓库，新疆文章，写文章并修改 1cd F:\\vscode\\hugo-root 2hugo new post/文章名字.md 2、本地验证 1hugo serve -D --disableFastRender 2或 3hugo serve 3、更新public目录","tags":["hugo","github","pages"],"title":"Hugo：日常更新流程","type":"post","url":"/post/hugo%E6%97%A5%E5%B8%B8%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/","weight":0,"wordcount":879},{"author":null,"categories":["Tech"],"content":"","date":1710892800,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":5000,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"e4ec200ac1035408afb950d1f4bd1865","permalink":"https://huuuuuuo.github.io/post/%E5%85%B3%E4%BA%8Egpt%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%BD%B1%E5%93%8D%E8%BD%AC%E8%BD%BD-copy/","publishdate":"2024-03-20T00:00:00Z","readingtime":10,"relpermalink":"/post/%E5%85%B3%E4%BA%8Egpt%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%BD%B1%E5%93%8D%E8%BD%AC%E8%BD%BD-copy/","section":"post","summary":"视频是关于GPT的底层原理和未来影响。将抛开技术细节，少用专业名词，在整体功能上讲解ChatGPT 的「工作原理」「制造过程」「涌现的能力」「","tags":["gpt","大模型","ai","人工智能","B站","视频"],"title":"关于GPT的底层原理和未来影响（转载）","type":"post","url":"/post/%E5%85%B3%E4%BA%8Egpt%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%BD%B1%E5%93%8D%E8%BD%AC%E8%BD%BD-copy/","weight":0,"wordcount":4936},{"author":null,"categories":["Tech"],"content":"","date":1710892800,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":8900,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716456537,"objectID":"bca0c1b924751b098cc380fd9d4c2fef","permalink":"https://huuuuuuo.github.io/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAhugo+githubpages-copy/","publishdate":"2024-03-20T00:00:00Z","readingtime":18,"relpermalink":"/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAhugo+githubpages-copy/","section":"post","summary":"本文借鉴并修改自 Windows下使用hugo和Github Pages配置博客 1 下载安装hugo 访问最新版本页面下载，推荐使用 Hugo extended 版本 解压到某","tags":["hugo","githubpages","博客搭建"],"title":"博客搭建：Hugo+GithubPages","type":"post","url":"/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAhugo+githubpages-copy/","weight":0,"wordcount":8817},{"author":null,"categories":["Tech"],"content":"","date":1710847842,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"d788f04c2b9fb683af008e1f857592b1","permalink":"https://huuuuuuo.github.io/post/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","publishdate":"2024-03-19T19:30:42+08:00","readingtime":3,"relpermalink":"/post/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","section":"post","summary":"1 failed to push some refs 报错 1git push -u origin main 2To https://github.com/xxxx.git 3 ! [rejected] main -\u0026gt; main (non-fast-forward) 4error: failed to push some refs to \u0026#39;https://github.com/xxxx.git\u0026#39; 5hint: Updates were rejected because the tip of your current branch is behind 6hint: its remote counterpart. Integrate the remote changes (e.g. 7hint: \u0026#39;git pull ...\u0026#39;) before pushing again. 8hint: See the \u0026#39;Note about fast-forwards\u0026#39; in \u0026#39;git push --help\u0026#39; for","tags":["git","branch","分支","git bug"],"title":"git push：本地分支和远程分支冲突问题解决","type":"post","url":"/post/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","weight":0,"wordcount":1089},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"img_move_back\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1716867298,"objectID":"a7a6760ccafd401a944e6f6f5ea0d7a4","permalink":"https://huuuuuuo.github.io/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/","section":"img_move_back","summary":"本文阅读书籍与参考代码： https://github.com/MichalDanielDobrzanski/DeepLearningPython 1 使⽤神经⽹络识别⼿写数字 神经⽹络使⽤样本来⾃动推断出识别⼿写数字的规则。另外，通过增加训练样本的数量，⽹络可以学","tags":null,"title":"","type":"img_move_back","url":"/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/","weight":0,"wordcount":3314},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"img_move_back\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1717471641,"objectID":"46a8f65685be5c9fa2ebc8b59a506760","permalink":"https://huuuuuuo.github.io/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0/","section":"img_move_back","summary":"1 目标 构建一个自己手写的数据集，作为测试集，测试神经网络的性能。 2 步骤 数据处理：将图片转化为28*28的大小（同时进行灰度化，归一化等） 格式","tags":null,"title":"","type":"img_move_back","url":"/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0/","weight":0,"wordcount":1372},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"img_move_back\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1718764028,"objectID":"b7cec163cad9ba89cca16fcbfbc4dc6e","permalink":"https://huuuuuuo.github.io/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8F%8A%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0%E4%BC%98%E5%8C%96/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8F%8A%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0%E4%BC%98%E5%8C%96/","section":"img_move_back","summary":"参考： https://blog.csdn.net/fsfjdtpzus/article/details/106256925 1 目标 学习《神经网络与深度学习》第二章反向传播，并在第一章练习的基础上，将训练集掺入我们自己的数据进行训练，看看泛化效果如何。例如在","tags":null,"title":"","type":"img_move_back","url":"/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8F%8A%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0%E4%BC%98%E5%8C%96/","weight":0,"wordcount":984},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://huuuuuuo.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"About Me Hello ~\nIf you\u0026rsquo;ve got something to say, just leave a comment😊 ~","tags":null,"title":"About","type":"page","url":"/about/","weight":0,"wordcount":15},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"daily\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"66bd27693cdb5d30d463f1c963f4bf00","permalink":"https://huuuuuuo.github.io/daily/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/daily/","section":"","summary":"","tags":null,"title":"Daily","type":"page","url":"/daily/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"movies\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"3417987f742739edfee9b601f3677c9d","permalink":"https://huuuuuuo.github.io/movies/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/movies/","section":"","summary":"","tags":null,"title":"Movies","type":"page","url":"/movies/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive\\","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":1716452916,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://huuuuuuo.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Timeline","type":"archive","url":"/archive/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"trend\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"07b241bb6e9cb8c82386b89b82b1b919","permalink":"https://huuuuuuo.github.io/trend/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/trend/","section":"","summary":"","tags":null,"title":"Trend","type":"page","url":"/trend/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"tweet\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1716452917,"objectID":"61365a8827963e2c32d3bf163231ea58","permalink":"https://huuuuuuo.github.io/tweet/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tweet/","section":"","summary":"\r","tags":null,"title":"Tweet","type":"page","url":"/tweet/","weight":0,"wordcount":0},{"categories":["Tech"],"contents":" 本文转载修改自以下文章：\nhttps://zhuanlan.zhihu.com/p/701723610\n马克思晚年的困惑 马克思是劳动者阶级建立劳动社会理论的创造者，对他的理论体系，马克思没有任何怀疑和困惑，他的困惑是在实践中遇到的无产阶级革命的动力问题。这种动力包括革命的热情、领导的坚强有力。马克思主义的实践，从十八世纪初就在欧洲开始实行，到一八七一年的法国巴黎公社成立达到高潮，实践证明马克思主义的理论是科学的。所以，尽管巴黎公社只存在七十一天，马克思仍高度评价巴黎公社是一次“全新的革命”，是无产阶级夺取政权、建立无产阶级专政的“一次伟大的尝试”，是巴黎工人阶级的“一次伟大的创举”。但仅存在七十一天的巴黎公社教训是深刻的。\n从巴黎公社的失败中，马克思看到了资本的力量。巴黎公社是在普法战争的国际资本争夺的缝隙里成功的，普法战争一结束，巴黎公社立即成为国际资本联合绞杀的对象，巴黎公社的失败是必然的。资本不仅有足够的政治力量镇压工人运动，而且有足够的经济实力缓解同工人的矛盾，消退工人阶级革命热情，收买工人组织形成工人贵族。\n所以，马克思在巴黎公社之后以主要精力用于同无政府主义、工联主义和改良主义作斗争。\n无政府主义和工联主义主张工人组织要有充分的自由，国际组织要以联合会的形式存在，工人斗争主要是经济斗争，实际其背后的原因是资本对工人组织的收买诱惑力在起作用；马克思则主张建立“与有产阶级建立的一切旧政党对立的独立政党”，把工人阶级的斗争从经济斗争不断引向政治斗争，只有这样才能彻底推翻旧政权建立新政权，“实现这一革命的最终目标——消灭阶级”。\n改良主义是主张同资产阶级合作，实行“利益协调”，主张在资本主义范围内改善工人的劳动条件和经济生活，争取普选权和劳动立法权，反对推翻资本主义制度的政治斗争。这很显然是站在资产阶级立场上，代表资产阶级利益。\n由于资本主义处在上升阶段，马克思同无政府主义、工联主义的斗争和改良主义的斗争均不凑效，革命的动力难以解决，欧洲共产主义运动从巴黎公社后步入下波路，直至现在也没回升，这是马克思晚年最困惑的一个问题。\n列宁晚年的困惑 列宁解决了马克思晚年的困惑，找到了俄国无产阶级革命的动力。这个动力就是没有任何其他国家的工农群众遭受这样最残酷的剥削和最野蛮的压迫、使这里的人民有最强烈革命要求；俄国的资本主义不发达，无法形成强大的政治力量；资本主义不发达使得资本没有足够的实力调整资产阶级与工人阶级的矛盾，没有足够的实力分化和收买工人阶级贵族，破坏工人阶级的领导力量。\n但是带来另一个问题，因为资本主义不发达而造成的，建设社会主义的物质基础很薄弱。要解决社会主义在和资本主义“谁战胜谁”的问题时，最终要看谁能以最快的速度发展生产力。\n贫穷不是社会主义，贫穷战胜不了资本主义。这是列宁晚年最困惑的一个问题。列宁的新经济政策就是在这种背景下产生的。列宁的新经济政策，就是无产阶级掌握经济命脉，允许资本主义成分在无产阶级经济中存在，同时对它们加以限制，并准备着消灭它们。列宁这一新经济政策的关键点是：一、无产阶级经济必须掌握着绝对控制权和领导权。二、必须对资本进行限制，不允许超越服务于无产阶级经济的范畴。三、目标是消灭资本主义经济建立完全的社会主义经济。这三点缺一不可，掌握起来十分困难，列宁晚年一直为保证新经济政策的正确实施进行着不懈的斗争。\n毛主席晚年的困惑 毛主席晚年最大的困惑是劳动者如何在复辟与反复辟的斗争中巩固无产阶级统治的统治。劳动人民当家做主实际是一个假命题，劳动人民是一个界限模糊，庞大而松散的群体，要做一国的主人实在很难，它必须通过一种形式来代表自己，这就是工人阶级的政党——共产党。\n但工人阶级政党在强大资本的收买和诱惑下，很容易变质，滑入修正主义的泥沼。马克思时代欧洲的工人运动的接连失败都和工人阶级组织滑入工人阶级贵族有关。马克思、恩克斯反对第一国际、第二国际中的修正主义的斗争充分证明这一点。列宁尽管十分注意这个问题，在同修正主义的斗争中占据着优势，取得了十月革命的胜利，但赫鲁晓夫的上台彻底葬送了世界上首个劳动者政权。苏联滑入修正主义，是国际共产主义运动中颠覆性的震荡。\n毛主席和中国共产党已对赫鲁晓夫对共产主义的背叛达到谈修色变的程度，当在制定接班人的五个条件时，每一条都有赫鲁晓夫的名字。为了防止资本主义复辟，毛主席还采取了一系列措施，比如进行社教运动，干部下放劳动同工农相结合，知识分子深入到群众中去、知识青年上山下乡接受贫下中农的再教育等，最后不惜冒“粉身碎骨”的风险发动文化大革命。\n如何巩固无产阶级的统治建立劳动者主宰的社会，这不仅是毛主席的晚年困惑，也是整个国际共产主义运动的困惑。\n阅读笔记 马克思的困惑 资本不仅有足够的政治力量镇压工人运动，而且有足够的经济实力缓解同工人的矛盾，消退工人阶级革命热情，收买工人组织形成工人贵族。\n改良主义是主张同资产阶级合作，实行“利益协调”，主张在资本主义范围内改善工人的劳动条件和经济生活，争取普选权和劳动立法权，反对推翻资本主义制度的政治斗争。这很显然是站在资产阶级立场上，代表资产阶级利益。\n马克思的困惑在于革命的动力难以解决，并且工人阶级也有其软弱性，容易被经济利益和缓和措施所妥协，导致无法建立一个新的政权，从而达不到真正的消灭阶级的作用，如此也更无法进一步实现共产主义。\n列宁的困惑 贫穷不是社会主义，贫穷战胜不了资本主义。\n列宁的新经济政策，就是无产阶级掌握经济命脉，允许资本主义成分在无产阶级经济中存在，同时对它们加以限制，并准备着消灭它们。\n列宁这一新经济政策的关键点是：一、无产阶级经济必须掌握着绝对控制权和领导权。二、必须对资本进行限制，不允许超越服务于无产阶级经济的范畴。三、目标是消灭资本主义经济建立完全的社会主义经济。\n列宁解决了马克思的困惑，找到了无产阶级革命的动力，人民有最强烈革命要求，俄国的资本主义不发达，无法形成强大的政治力量，也没有足够的实力破坏工人阶级的领导力量。从而，他成功实现了无产阶级革命。\n但在经济建设中，他遇到了新的问题——如何建设社会主义，并且始终控制住资本，保证建设的正确实施。\n难点有很多，例如怎么保证无产阶级经济始终掌握着绝对控制权和领导权，怎么保证最终能够消灭资本主义经济建立完全的社会主义经济。\n毛主席的困惑 毛主席晚年最大的困惑是劳动者如何在复辟与反复辟的斗争中巩固无产阶级统治的统治。\n但工人阶级政党在强大资本的收买和诱惑下，很容易变质，滑入修正主义的泥沼。\n赫鲁晓夫的上台彻底葬送了世界上首个劳动者政权。苏联滑入修正主义，是国际共产主义运动中颠覆性的震荡。\n为了防止资本主义复辟，毛主席还采取了一系列措施，比如进行社教运动，干部下放劳动同工农相结合，知识分子深入到群众中去、知识青年上山下乡接受贫下中农的再教育等，最后不惜冒“粉身碎骨”的风险发动文化大革命。\n如何巩固无产阶级的统治建立劳动者主宰的社会，这不仅是毛主席的晚年困惑，也是整个国际共产主义运动的困惑。\n毛主席早年间曾经通过“三湾改编”将共产主义信仰深入到基层，但多年以后还在困惑于如何对抗人性中的惯性，如何抵制诱惑，这说明了精神革命的任重道远。\n因此，他想通过上山下乡等运动来维持队伍的纯洁性。\n困惑一直未消失过 其实不管是马克思的困惑，抑或是列宁和毛主席的疑惑，从未真正被解决过。\n针对马克思的革命动力与其受到诱惑之间的困惑，列宁探索了一条适合当时状况下俄国的革命路线，但是并不具有普适性，或者说一定程度上需要各国结合实际走自己的道路。但是当前矛盾被越来越掩盖的状况下，这种革命动力是否还能真的被找到并且运用到实际，是越来越艰难的。结合当下身份政治愈演愈烈、世界越来越细分和割裂的背景，难度不言而喻。\n列宁在经济建设中引入资本主义，并且让无产阶级保证主导权和绝对控制，但是绝对控制的终点是政党，政党的终点还是人，人的信仰就不可能百分百可靠。除非未来真的有思想钢印这种东西，否则章北海只能是万里挑一，但是这种东西不太可能运用于实际。因此解决这一点需要依靠的是顶层的制度设计，不依赖于人本身，而是靠绝对的机器运转。\n毛主席曾经做过“三湾改编”，支部建在连上，将思想贯彻到具体每个人身上，这一定程度上保证了革命队伍的纯洁性和信仰的落地性。但终究不可考验人性，除非人的素质能达到极高的程度，但若因此而相信某些人，岂不是又落入了软弱性的旧坑里了。如何巩固无产阶级的统治，关键点不在于统治，而在于让统治者一直代表无产阶级，代表劳动者。这仅靠统治者的自觉是很难做到的。也许可以将生产力水平、生活水平提高到最高的地步，但是人的欲望在于胜过他人，因此欲望将会无穷膨胀。\n我们应该认识到，任何阶级都有其软弱性和局限性，根本原因在于人本身的软弱性和局限性。因此他们三者的困惑其实一直是同一个，那就是如何能够保持钢铁般的意志、崇高的信仰，从而抵制诱惑将革命进行到底，各种意义、各个层面上的革命。\n","date":"2025-01-14T16:38:48+08:00","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E9%A9%AC%E5%88%97%E6%AF%9B%E4%B8%BB%E5%B8%AD%E6%99%9A%E5%B9%B4%E7%9A%84%E5%9B%B0%E6%83%91/","section":"post","tags":["阅读笔记"],"title":"阅读笔记：马、列、毛主席晚年的困惑"},{"categories":["Tech"],"contents":"我看的是将姜乙译本的《悉达多》，读起来有诗的韵味。\n哦，功德圆满的佛陀，只是，在您的法义中，在统一、逻辑完善的万物中却存在一个断裂之处。这一小小的缝隙让这个统一的世界呈现出些许陌生、些许新奇；呈现出些许迥异于从前，且无法被证实的东西：那就是您的超世拔俗，获得解脱的法义。\n您通过探索，求道，通过深观，禅修，通过认知，彻悟而非通过法义修成正果！——这就是我的想法，哦，世尊，没人能通过法义得到解脱！哦，世尊佛陀，您从未以言辞或法义宣讲您在证觉成道之际所发生的事！\n我们沙门寻求弃绝于‘我’，哦，世尊。假如我皈依于您，哦，世尊，我担忧我的‘我’只是表面地、虚假地获得安宁，得到解脱。而事实上，我的‘我’却仍在生存、壮大。因为，我会将法义，我的后来者，我对您的爱，以及僧团当作我。\n“佛陀劫掠了我。”悉达多想，“他劫掠了我，但他馈赠得更多。他夺走了我的朋友，那曾经信奉我，如今信奉他的朋友；那曾经是我的影子，如今是乔达摩的影子的朋友。而他所馈赠的，则是悉达多，是我的自我。”\n这位漫步的思考者自问：“你原先打算从法义里，从师父处学到什么？你学了很多，却无法真正学到的又是什么？”他最终发现：“答案是‘我’。我要学的即是‘我’的意义及本质。‘我’，是我要摆脱、要制胜的东西。‘我’，却是我无法制胜，只能欺罔、逃遁，只能隐藏的东西。当真！世上再没什么别的，像我的‘我’这样让我费解。是‘我’，这个谜，让我活着，让我有别于他人，让我成为悉达多！在世上，我最一无所知的莫过于‘我’，莫过于悉达多！”\n“哦，”他深吸了口气，释然道，“我不会再让悉达多溜走！不会再让阿特曼和尘世疾苦成为我思想和生命的中心。我再也不会为寻找废墟后的秘密而扼杀自己，肢解自己。无论是《瑜伽吠陀》《阿达婆吠陀》，还是其他任何教义我都不再修习。我不再苦修。我要拜自己为师。我要认识自己，认识神秘的悉达多。”\n“我曾多么麻木和迟钝！”这位疾步之人心想，“如果一个人要在一本书中探寻意义，他便会逐字逐句去阅读它，研习它，爱它；他不会忽视每一个词、每一个字，把它们看作表象，看作偶然和毫无价值的皮毛。可我哪，我这个有意研读世界之书、自我存在之书的人，却预先爱上一个臆想的意义。我忽视了书中的语词。我把现象世界看作虚妄。我视眼目所见、唇齿所尝的仅为没有价值而表面的偶然之物。不，这些都已过去。我已苏生。我切实已苏生。今天即是我的生日。”\n在明晰又可敬的法义中不包含世尊的历程，那个您独自超越众生的秘密。这就是我在聆听法义时思考和认识的。这就是我为何要继续我的求道之路——并非去寻找更好的法义，我知道它并不存在——而是为摆脱所有圣贤及法义，独自去实现我的目标，或者去幻灭。\n知道了世界的道理，但是不知道如何寻求世界的道理。\n所求并非其中义，而是得其之法。\n他环视四周，宛如与世界初逢。世界是美的，绚烂的；世界是奇异的，神秘的！这儿是湛蓝，这儿是灿黄，那儿是艳绿。高天河流飘逸，森林山峦高耸。一切都是美的。一切都充满秘密和魔力。而置身其中的他，悉达多，这个苏醒之人，正走向他自己。这初次映入悉达多眼帘的一切，这灿黄和湛蓝，河流和森林，都不再是摩罗的法术，玛雅的面纱，不再是深思的、寻求圆一的婆罗门所蔑视的现象世界中愚蠢而偶然的纷繁。蓝就是蓝，河水就是河水。在悉达多看来，如果在湛蓝中，在河流中，潜居着独一的神性，那这恰是神性的形式和意义。它就在这儿的灿黄、湛蓝中，在那儿的天空、森林中，在悉达多中。意义和本质绝非隐藏在事物背后，它们就在事物当中，在一切事物当中。\n万物不是阻碍自己探索心灵的路障，而是他们本身，他们的存在就是意义本身。\n探索藏在事物后面的意义，反而掩盖了其就是事物本身。\n","date":"2024-11-12T11:37:22+08:00","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E9%BB%91%E5%A1%9E%E6%82%89%E8%BE%BE%E5%A4%9A/","section":"post","tags":["悉达多"],"title":"阅读笔记：黑塞《悉达多》"},{"categories":["read"],"contents":"1 摘要 1.1 爱是一门艺术吗？ 弗洛姆的研究植根于弗洛伊德的精神分析学说和马克思主义哲学理论。他认为人是各自所在的产物，在现代工业化社会，人变得越来越自我疏离，这种孤立感导致人们潜意识下渴望与他人结合、联系。 爱情不是一种与人的成熟程度无关，只需要投入身心的感情。 大多数人认为爱情首先是自己能否被人爱，而不是自己有没有能力爱的问题。因此对他们来说，关键是：我会被人爱吗？我如何才能值得被人爱？ 男子通常采取的方法是在其社会地位所允许的范围内，尽可能地去获得名利和权力，而女子则是通过保持身段和服饰打扮使自己富有魅力；而男女都喜欢采用的方式则是使自己具有文雅的举止，有趣的谈吐，乐于助人，谦虚和谨慎。 我们这个社会大多数人所理解的“值得被人爱”无非是赢得人心和对异性有吸引力这两种倾向的混合物而已。 产生在爱这件事上一无可学这一看法的第二个原因是人们认为爱的问题是一个对象问题，而不是能力问题。他们认为爱本身十分简单，困难在于找到爱的对象或被爱的对象。 十九世纪在许多传统的文化中爱情往往不是自发的、最后导致婚姻的个人经历。婚姻多半是通过男女双方的家庭、介绍人或者在没有撮合者的情况下以条约的方式确定下来并进行的。婚姻要门当户对。至于爱情，人们认为婚后自然而然就会产生。 我想做一笔交易，那我既要考虑从社会价值的角度出发，对方值不值得我追求，也要考虑基于我的一目了然的实力以及潜在的实力，对方会不会看中我。这样当男女双方感觉到在考虑到他们本身的交换价值的情况下，已经找到市场上所提供的最合适的对象，他们就开始相爱。在这笔交易中，如同购买地皮一样，对方的有发展前途的潜力也起到很大的作用。 在一个商业化占统治地位以及把物质成功看得高于一切的文化中，事实上是没有理由对下列事实抱有吃惊的态度：人与人之间的爱情关系也遵循同控制商品和劳动力市场一样的基本原则。\n社会对人的异化侵蚀到爱情，使得人最终可能失去自己作为人的鲜活性。\n产生在爱情这件事上一无可学这一看法的第三个错误是人们不了解“堕入情网”同“持久的爱”这两者的区别。 两个迄今为止同我们一样是相互陌生的人，当他们突然决定拆除使他俩分隔的那堵高墙，相许对方，融为一体时，他俩相结合的一刹那就成为最幸福、最激动人心的经历。这一经历对那些迄今为止没有享受过爱情的孤独者来说就更显美好和不可思议。这种男女之间突如其发的奇迹般的亲密之所以容易发生，往往是同性的吸引力和性结合密切相关或者恰恰是由此而引起的。 但这种类型的爱情就其本质来说不可能持久。这两个人虽然熟谙对方，但他俩之间的信任会越来越失去其奇迹般的特点，一直到隔坤、失望和无聊把一息尚存的魅力都抹掉为止。当然一开始双方都不会想到这点。 再也找不出一种行为或一项行动像爱情那样以如此巨大的希望开始，又以如此高比例的失败而告终。 人们一方面渴望爱情，另一方面却把其他的东西：如成就、地位、名利和权力看得重于爱情。我们几乎把所有的精力都用于努力达到上述目的，却很少用来学会爱情这门艺术。 难道只有获取名利才值得人们付出代价？而“爱情”只对灵魂有用，在现代意义上毫无用处的爱情只是一种奢望，一种不值得人们付出代价的奢望吗？ 事实是：人们往往把这种如痴如醉的入迷，疯狂的爱恋看作是强烈爱情的表现，而实际上这只是证明了这些男女过去是多么地寂寞。\n我认为，瞬间的痴迷不全是过去的孤独寂寞导致的，在生命尺度上，能让你怦然心动的东西就让这份生命有了活着的意义，除了爱情还有什么能够表述这种两性关系呢。\n1.2 爱情是对人类生存问题的回答 我们所能看到的动物的爱情或者更确切地说动物身上类似爱情的东西，主要是动物的一部分本能。在人身上只能看到这一本能的残余。 人继续是自然的一部分，但又同自然分离 人只了解过去，对未来——除了知道要以死亡告终外一无所知。 人拥有理智；人是生命，一种意识到自我存在的生命。人意识到自己，他人，人的过去和发展前途的可能性。人对他的单一存在的觉悟，对他短暂生命的觉悟，人意识到生不由己，死的必然，人知道自己的孤独和与世隔绝，意识到面对社会和自然的威力自己的无能为力——所有这一切都使他的特殊和孤寂的存在成为无法忍受的监禁。如果人不能从他的监狱中解放出来和打碎这一监狱，如果他不能以这种或那种方式，同他人或周围世界结合在一起，他就会疯狂。\n作者显然认为，爱情是帮助人类从孤独的牢笼中解脱的办法\n如何克服这种孤独感，如何超越个人的天地，实现人类的大同。 人可以通过信拜动物、祭人或军事掠夺、奢侈享受、清教徒式的节制、狂热的工作、艺术活动和创造性的劳动，通过对上帝和他人的爱情作出自己的回答。 一直到孩子发育到产生孤独感和个性这个阶段，母亲的存在才不足以消除他的孤独感，他必须以其他的方法克服这种孤独感。 达到这一目的的一种途径是不同形式的纵欲。 性的体验常常是和这种纵欲紧密联系在一起的。性纵欲可以达到同恍惚状态和吸毒一样的效果。集体性纵欲的仪式流传很广，其效果是参加者在此后一段时间内不会有强烈的孤独感，但渐渐地恐惧感又会上升，因此就必须重复这一仪式。 只要纵欲是一个部落的集体活动，就不可能引起恐惧和羞愧的感觉。这样的一种行为是“正确的”，甚至是一种美德，因为这是一种集体活动 酒和毒品是生活在一个非集体纵欲的时代一些人所选择的方式。同生活在集体纵欲文化时代的人相反，这些人受到良心谴责的痛苦。他们一方面想通过酗酒和吸毒去克服孤独感，但在纵欲以后他们的孤独感却加剧了，所以不得不更经常地，更强烈地去重复纵欲行为。 有些人拼命地想借性纵欲使自己克服由于孤独而产生的恐惧感，但其结果只能是越来越孤独，因为没有爱情的性交只能在一刹那间填补两个人之间的沟壑。 但是，无论是过去的人，还是现代人，克服孤独感最常用的方法却与此截然相反。这一方法就是通过同一组人保持一致，通过同一组人的习惯、风格和看法保持一致来达到同其他人的结合。 随着文化的发展，一组人的人数也随之增长，它变成了一个政治体、国家或一个教派。 在这种结合中，参加者为了使自己属于这一组人而失去了大部分个性。如果我与他人完全一样，我的感情、思想与他人一致，我的衣着、习惯和看法都与这一组人的楷模看齐，我就可得救，就不会再经历可怕的孤独。 我们只有理解了人是多么害怕与别人隔绝，才能懂得担心与众不同和同一群人疏远会产生何等的威力。 大多数人并不意识到自己身上有这种要求。他们生活在一种幻觉中，以为自己是按照个人的意愿行事，是具有个性的人，是经过大脑的思考形成自己的看法——他们认为他们的观点之所以和大多数人吻合纯粹是巧合罢了。\n人们以为自己在一场盛大狂欢下装扮独特，但身处于这场狂欢时就早已入局。\n至于他们尚存的、希望自己有个性的要求则通过微不足道的东西得到满足：如在手提箱和毛衣上绣上自己的名字的缩写字母，在玻璃窗口上挂上自己的名牌，参加一个政党或者一个学生联合会。 ","date":"2024-07-29T19:53:46+08:00","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%BC%97%E6%B4%9B%E5%A7%86%E7%88%B1%E7%9A%84%E8%89%BA%E6%9C%AF/","section":"post","tags":["爱的艺术"],"title":"阅读笔记：弗洛姆《爱的艺术》"},{"categories":["Tech"],"contents":" 演员郑伊健在一部赛车电影里有句话叫“人要比车凶”，指的是人一定要比工具强势。\n——黄仁宇《万历十五年》\n一 人要比AI凶 计算机硬件条件的进步推动了AI的发展，而AI（主要是语言模型）之所以能达到今天的高度，主要是因为它足够大。大了，很多能力就涌现出来了。\n涌现的意思是，当一个复杂系统复杂到一定程度，就会发生超越系统元素简单叠加的、自组织的现象。\n事后分析，涌现新能力的关键机制叫作“思维链”。简单说，思维链就是当模型听到一个东西之后，它会嘟嘟囔囔自 说自话地，把自己知道的有关这个东西的各种事情一个个说出来。\n可以预见，如果这条把模型堆大的道路可行，模型的思维能力便越来越强——也就是嘟嘟囔囔，很多事情都自己领悟了。\n","date":"2024-07-16T09:04:52+08:00","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%87%E7%BB%B4%E9%92%A2%E6%8B%90%E7%82%B9/","section":"post","tags":["拐点","AI"],"title":"阅读笔记：万维钢《拐点》"},{"categories":["Tech"],"contents":" 参考：\nhttps://www.cnblogs.com/obge/p/13155317.html\nhttps://cloud.tencent.com/developer/article/1716630\n1 mass管理：不安全的绑定器 比如说有一个类，类中有很多个属性：性别，姓名，身份证号，准考证号，通过控制属性的公开与否，使得攻击者无法将任意值绑定到属性，例如更改身份证号。\nMVC模型 Spring MVC 基于 MVC 模式，因此理解 Spring MVC 需要先对 MVC 模式有所了解。\nMVC是 model、view、和controller的缩写，是软件开发中一种常用的架构模式。\nMVC各部分根据职责进行分离，使程序的结构更为直观，增加了程序的可扩展性、可维护性、可复用性。\n可以用如下的图形来表示MVC三者之间的关系：\n模型(Model)\n模型封装了数据及对数据的操作，可以直接对数据库进行访问，不依赖视图和控制器，也就是说模型并不关注数据如何展示，只负责提供数据。GUI 程序模型中数据的变化一般会通过观察者模式通知视图，而在 web 中则不会这样。\n视图(View)\n视图从模型中拉取数据，只负责展示，没有具体的程序逻辑。\n控制器(Controller)\n控制器用于控制程序的流程，将模型中的数据展示到视图中。\n把view和controller控制分开，要控制哪些可以直接请求，哪些不行。\n修复方案 所以，针对这种漏洞，可以分为两个方向考虑：\n使用SpringMVC框架：控制\n老代码改不动：则暂时搁置。\n2 访问控制：数据库 用户应该对他们需要的数据具有适当的访问权，既不能多也不能少（即用户不能对过多的数据具有访问权）。\n访问控制：需要给用户提供他们所需的访问权，且仅提供他们所需的访问权。\n例如，考试查询成绩，如果只需要输入准考证号，就可以查询到用户成绩，那么把准考证号改几位数，便可以遍历所有用户的成绩，那么就产生了越权风险，所有用户的信息都泄露了。\n而如果，加入一个查询条件，例如性别，姓名呢？也不行。性别就两个选项，遍历无非就是多遍历一个选项，也就是翻一倍而已，与一个id没有本质区别。姓名查询，如果是熟人，同班同学，那么也会导致很容易泄露。\n那么添加什么条件比较好呢？例如身份证号，或者其他不容易猜到的信息，这种东西一般大家没那么容易记住，或者说遍历，那么就会相对安全一点。\n程序未做恰当的验证，类似于数据库越权。如果用户只需要输入id就可以进行查询，那么就可能存在越权查询的情况。\n修复方案 所以，针对这种漏洞，可以分为两个方向考虑：\n非用户输入类查询：程序内部控制，那么没有被越权的风险。 用户输入类查询： 用户只需要输入一个查询条件，便可获取信息，那么需要添加多种限定条件进行限制。 用户输入多种条件，但是多种条件也较容易被猜到，那么与A情况无异。 用户输入多种条件，并且多种条件不容易被猜到，那么经过代码审核，具体判断后，可以视为无风险。 ","date":"2024-06-14T09:30:37+08:00","permalink":"https://huuuuuuo.github.io/post/%E4%BB%A3%E7%A0%81%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D1mass%E7%AE%A1%E7%90%86%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/","section":"post","tags":["代码漏洞","白盒扫描"],"title":"代码漏洞修复（1）：mass管理、访问控制"},{"categories":["Tech"],"contents":"1 出发点 将代码漏洞扫描（白盒扫描）与AI结合，可以通过多种方式来实现。\n其出发点可以包括提高扫描的效率、准确性和覆盖率，提升功能使用便捷程度。\n2 现状 目前要将白盒扫描与AI相结合，可能会存在的困难有：\n训练数据：如何找出大量漏洞，使得模型可以进行训练。 训练计划：如何制定训练计划，让AI知道这是漏洞。其实这是NLP的范畴了。 修复情况：如何找出对应漏洞的修复方案，并且对修复方案进行取舍。修复方案可能有好多种，具体哪种是与当前代码上下文最匹配，又得结合实际情况判别，这其中又有训练数据可能不够的问题。 网络构建：NLP范畴的AI，我还没有接触过，网络模型选择、构建，损失函数的选择等都需要考虑。 1 准确率 找出正确的漏洞\n2 覆盖率 尽量找出所有漏洞\n3 效率 尽快找出漏洞\n4 功能性 功能辅助：找出漏洞后的修复方案提供等\n5 扩展性 与其他工具或工作结合，例如性能测试、IDE\n1.1 智能匹配和推荐 AI可以用于分析大量的代码库和历史漏洞数据库，学习并识别出特定的漏洞模式。基于这些模式，AI可以智能匹配当前代码中可能存在的漏洞，并推荐修复措施。这不仅可以节省开发者时间，还可以提高漏洞检测的准确性。\n生成测试用例 AI技术，如自然语言处理（NLP）和机器学习（ML），可以用于自动化生成测试用例。通过分析代码的结构和逻辑，AI可以生成针对特定漏洞的测试场景，从而提高白盒扫描的覆盖率。\nIDE插件 AI技术可以集成到开发者工具中，如IDE插件，提供即时的漏洞检测和建议。这样，开发者在编写代码时就可以得到实时的反馈，避免潜在的安全漏洞。\n","date":"2024-06-14T08:32:39+08:00","permalink":"https://huuuuuuo.github.io/post/%E7%99%BD%E7%9B%92%E6%89%AB%E6%8F%8F%E5%A6%82%E4%BD%95%E4%B8%8Eai%E7%BB%93%E5%90%88/","section":"post","tags":["ai","白盒扫描"],"title":"白盒扫描如何与AI结合"},{"categories":["Tech"],"contents":" 参考：\n【git 使用】如何在本地管理和切换多个 github 账号\nWindows下使用ssh-add报错 Error connecting to agent: No such file or directory\nGit配置多个用户\n1 创建 SSH 密钥 如果有两个 github 账户，一个工作用的，用户名是 company_account；另一个是私人的：personal_account。所以，我要创建两个密钥，每个账号一个：\n操作为：\n打开cmd;\n依次输入命令:\n1cd ~/.ssh 2ssh-keygen -t rsa -C \u0026#34;1356409766@qq.com\u0026#34; 3ssh-keygen -t rsa -C \u0026#34;3083074260@qq.com\u0026#34; 当出现 “Enter file in which to save the key” 的提示时，将文件保存为 id_rsa_\u0026lt;\u0026gt;。在我的示例中，我将文件保存为 ~/.ssh/id_rsa_personal 和 ~/.ssh/id_rsa_company;\n效果如图：\n找到 C:\\Users\\personal_account.ssh 下，可以看到，生成了下面四个文件：\nid_rsa_personal id_rsa_personal.pub id_rsa_company id_rsa_company.pub 2 将新密钥绑定到 github 账号 用记事本打开 id_rsa_personal.pub 文件，全选复制； 来到我的私人github账户，找到 setting，打开，点击 “SSH and GPG keys” 选项，可以看到有一个 “add SSH key” 按钮，将刚才复制的内容粘贴到文本区域，同时添加一个相关标题；成功之后是这个样子的： 相对的，在其他账户上重复相对应的操作；以我的为例，则是把 id_rsa_company.pub 的内容粘贴到我工作账户 company_account 的 ssh 上; 3 创建一个配置 config 文件来管理 key 在 ~/.ssh/ 目录下创建一个 config 文件\n复制代码找到这个文件，并用编辑器打开(我的是 vscode)，然后将下面内容写入文件，保存:\n1# personal_account 2Host github.com 3User personal_account@qq.com 4Hostname ssh.github.com 5PreferredAuthentications publickey 6IdentityFile ~/.ssh/id_rsa 7Port 443 8 9# company_account 10Host company 11HostName ssh.github.com 12User company_account@163.com 13IdentityFile ~/.ssh/id_rsa_company 这里我们的主机名称不是 github.com，而是将其命名为 github.com 和 company。不同之处在于，我们现在附加了之前创建的新标识文件: id_rsa_\u0026lt;\u0026gt;；因为我是个别是公司账户，所以我就是在原来个人账户的基础上新增了company的host。\n4 更新存储的key 在更新存储之前，我们要先检查一下本地的 OpenSSH 服务有没有开启。不然会出错。 开启 ssh 服务的流程为：\n设置 → 应用 → 可选功能 → [OpenSSH服务器]\n计算机管理 → 服务和应用程序 → 服 务→ OpenSSH Authentication Agent\u0026amp;OpenSSH Server → 右击\n启动之后看到的是这样子的：\n开始 SSH 服务之后，我们就可以使用ssh 命令了。\n验证一下！ github 是否能识别到这些 keys；在cmd中输入：\n1ssh -T git@personal 2ssh -T git@company 可以看到 “Hi personal_account! You’ve successfully authenticated, but GitHub does not provide shell access.” 的提示语。这表明，github 能识别这些 keys 了。Cool !\n5 测试 clone 和 push 以我的私人账户为例，我想把 personal_account 账号上的 Look-Thinking 仓库克隆到本地，然后操作。\n在cmd 上输入：\n1git clone git@personal:personal_account/Look-Thinking.git 可以看到可以成功把该仓库克隆过来：\n还是以在我的私人 github 账号 personal_account 上操作为例。在 账号上创建 work-test 仓库；然后在本地创建 test 文件夹。创建好 readme.md 文件后,将其 push 到 github ;\n1git init 2git add . 3git commit -am \u0026#34;first commit\u0026#34; 4git remote add origin git@personal:personal_account/test.git 5git push -u origin master 将文件push成功之后是这样的：\n可以在github账户上看到在本地对 readme.md的操作结果。git pull 同理。\n6 仓库账户配置 将随便一个git项目下将全局账户设置为私人账户，因为我是就个别账户是公司账户，所以其余都设置成私人账户，如果账户很多，也可以分别设置：\n1git config --global user.name \u0026#34;personal_account\u0026#34; 2git config --global user.email \u0026#34;personal_account@163.com\u0026#34; 3git config user.name 4git config user.email 在公司git项目下将账户设置为公司账户，不需要加--global，因为这里是局部账户设置：\n1git config user.name \u0026#34;company_account\u0026#34; 2git config user.email \u0026#34;company_account@163.com\u0026#34; 3git config user.name 4git config user.email 7 更改远程仓库 如果某个本地仓库之前已经用 git remote add 和远程仓库建立过连接，我们需要先清除当前连接，不然会报错：“fatal: remote origin already exists.”；清除当前连接之后，然后连接新的账号里的仓库，如：\n1git remote rm origin 2git remote add origin git@company:company_account/work-test.git 这里，我们就断开了之前和 personal_account 账号的连接，然后切换到了 company_account 账号。 这样配置好之后，就可以直接使用命令行操作了，这个账户也不需要再继续调整什么了，不同账户之间切换直接切换到目录就行了\n8 总结 前面的1-4步都配置好后，在单独某个账户下的操作为：\n配置本git项目账户名 配置本git项目账户邮箱 清除当前连接 新建连接，host为我们重新设置的company git更新 1@REM git config user.name \u0026#34;flamencogo\u0026#34; 2@REM git config user.email \u0026#34;flamencogo@163.com\u0026#34; 3@REM git config user.name 4@REM git config user.email 5@REM git remote rm origin 6@REM git remote add origin git@company:flamencogo/NeuralNetworkandDeepLearning.git 7git add . 8git commit -m \u0026#34;update\u0026#34; 9git push origin main ","date":"2024-06-05T00:49:50+08:00","permalink":"https://huuuuuuo.github.io/post/git%E4%BD%BF%E7%94%A8%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/","section":"post","tags":["git"],"title":"Git使用：如何在本地管理和切换多个github账号"},{"categories":["Tech"],"contents":" 参考：\nhttps://blog.csdn.net/fsfjdtpzus/article/details/106256925\n1 目标 学习《神经网络与深度学习》第二章反向传播，并在第一章练习的基础上，将训练集掺入我们自己的数据进行训练，看看泛化效果如何。例如在其中几个epoch中，将训练数据指定为我们的数据（随机选择），测试结果是否会更好。\n2 添加训练集 切割数据集的时候，设定训练集的比例\n1def array_split(array_data,label_data,train_data_ratio): 2 combined = list(zip(array_data, label_data)) 3 random.shuffle(combined) 4 array_data[:], label_data[:] = zip(*combined) 5 6 train_size = int(len(array_data) * train_data_ratio) 7 test_size = len(array_data) - train_size 8 9 # 提取训练集和测试集 10 train_set_array, train_set_label = array_data[:train_size], label_data[:train_size] 11 test_set_array, test_set_label = array_data[train_size:], label_data[train_size:] 12 13 return train_set_array, train_set_label,test_set_array, test_set_label 在第j个epoch中，利用j来求余，调整添加的频率\n1if j % 1 == 0: 2 mini_batches_mydata_tarin = [ 3 mydata_tarin[k:k+mini_batch_size] 4 for k in range(0, n_mydata_tarin, mini_batch_size)] 5 6 if len(mini_batches_mydata_tarin) != 0: 7 mini_batches = mini_batches + mini_batches_mydata_tarin 设定为1，即为每个epoch都添加。mini_batch_size设为5，学习率为1.5，9的倍数的epoch添加自己的训练集，结果为18%。\n16 : 0.0% 25 : 50.0% 39 : 0.0% 47 : 100.0% 58 : 100.0% 64 : 0.0% 72 : 25.0% 81 : 0.0% 90 : 0.0% 103 : 0.0% 11Epoch 28 : 4 / 22 18.18% 18.18% mini_batch_size设为10，学习率为3.0，1的倍数的epoch添加自己的训练集，结果为23%。\n18 : 50.0% 27 : 20.0% 31 : 0.0% 45 : 0.0% 53 : 0.0% 62 : 0.0% 70 : 50.0% 86 : 0.0% 94 : 50.0% 10Epoch 22 : 5 / 22 22.73% 22.73% 在上述参数下，将数据集分割的比例改为0.2，结果为27%。\n在上述参数下，将数据集分割的比例改为0，也就是不掺入自己的数据，结果为27%。\n有可能是掺入的数据污染了原始训练集，所以自己的数据加的越多，结果越差。\n3 反向传播 3.1 四个方程 BP1：输出层误差的⽅程\nBP2：使⽤下⼀层的误差来表⽰当前层的误差。\n通过组合 (BP1) 和 (BP2)，我们可以计算任何层的误差 δl。⾸先使⽤ (BP1) 计算 δL，然后应⽤⽅程 (BP2) 来计算 δL−1，然后再次⽤⽅程 (BP2) 来计算 δL−2，如此⼀步⼀步地反向传播完整个⽹络。 BP3：代价函数关于⽹络中任意偏置的改变率\nBP4：代价函数关于任何⼀个权重的改变率\n3.2 计算误差 计算神经网络的输出(预测值)和真值的误差。 计算完误差后，需要将这个误差向不断的向前一层传播。向前一层传播时，需要考虑到前一个神经元的权重系数(因为不同神经元的重要性不同，因此回传时需要考虑权重系数)。 与前向传播时相同，反向传播时后一层的节点会与前一层的多个节点相连，因此需要对所有节点的误差求和。 计算出每个神经元的误差，接下来就更新权重。 3.3 更新权重 η代表学习率，w′是更新后的权重，通过这个式子来更新权重。\n计算好误差，并且更新权重，反向传播就结束了。\n将这个过程不断重复，就可以不断减小误差，提高正确率，获得比较好的模型了。\n","date":"2024-06-04T23:29:12+08:00","permalink":"https://huuuuuuo.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8F%8A%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0%E4%BC%98%E5%8C%96/","section":"post","tags":["神经网络与深度学习","AI"],"title":"学习笔记：《神经网络与深度学习》第二章及第一章练习优化"},{"categories":["Tech"],"contents":"1 目标 构建一个自己手写的数据集，作为测试集，测试神经网络的性能。\n2 步骤 数据处理：将图片转化为28*28的大小（同时进行灰度化，归一化等）\n格式转换：转为mnist数据集的格式。这一步将图片转为下面这样，第一个\n读取并测试：将原本的mnist_loader.py改为加载自己的测试集，并运行test1.py进行测试\n3 数据处理 灰度化、转化为28*28的大小、归一化并反相（因为输入为白底黑字，若为黑底白字就不需要）：\n1img = Image.open(os.path.join(root, filename)).convert(\u0026#39;L\u0026#39;) 2resized_img = img.resize((28, 28)) 3normalized_arr =1-arr.astype(np.float32) / 255 不过这样生成的图片是灰度的，而不是纯黑白的。实验证明，准确率比较低，因此仿照官方测试集进行处理。\n对于准确率来说，数据处理的怎么样很重要。如果数据处理的时候只进行灰度化，识别结果会比较差，准确率最高为18%。如果加一点对比度，结果会有点提升，能到23%左右，但是拉不开区别。\n若进行了纯黑纯白化，即通过设置阈值，在阈值以上的全部设置为255，阈值以下的全部设置为0，那么图片将变为黑底白字的只有两个极端的图片，如下图，此时识别结果就会好很多，最高能达到40%。\n1arr = np.array(resized_img) 2 3# 将数据拉平成一维数组 4arr_1 = arr.flatten() 5 6# 计算每个元素的出现次数 7counts = np.bincount(arr_1) 8 9# 找出出现次数最多的元素 10max_count = max(counts) 11most_frequent_elements = np.where(counts == max_count)[0][0] 12# print(most_frequent_elements) 13 14# 设置阈值和区间 15intervals=40 16threshold_1 = most_frequent_elements-int(intervals/2) 17threshold_2 = most_frequent_elements+int(intervals/2) 18 19# 调整阈值，将之绝对化为0和255，输出画面可变为纯黑白 20arr[(arr \u0026gt; threshold_1) \u0026amp; (arr \u0026lt; threshold_2)] = 255 21arr[arr \u0026lt; threshold_1] = 0 置于为何设置阈值和区间，通过下图的像素分布可以看出，有很大一部分的像素深度位于一个区间，而这个区间则是背景像素所在的区间（背景像素占比最多）。\n如果简单设置一个阈值，则可能出现如下结果：\n1threshold=127 2arr[arr \u0026gt; threshold] = 255 3arr[arr \u0026lt; threshold] = 0 同样这张图片，在前面可以被调整成下面这样，差别很大。\n4 格式转换 本书例子里面，mnist数据集的格式是mnist.pkl，里面直接把训练集和测试集都包括进去了\n1training_data, validation_data, test_data = pickle.load(f, encoding=\u0026#34;latin1\u0026#34;) 我们要做的就是：转换我们自己的图片数据为pkl，并作为test_data。\n输出原本数据集的数组形状可以得知，原本的数据集形状是（10000，784），这意味着要把我们从图片转化而来的（28，28）数组展平，而标签数据已经通过文件夹名字获取（这里的前提是，我们将各个数字放在其对应的文件夹中，完成分类，例如数字1就放在文件夹“1”中）。\n1# 图片数据，归一化数据拉平成一维数组 2flattened_arr = normalized_arr.flatten() 3array_data.append(flattened_arr) 4 5# 标签数据 6label = get_label(root) 7label_data.append(label) 8 9label_data_out=np.array(label_data, dtype=np.int64) 10array_data_out=np.array(array_data, dtype=np.float32) 然后我们将这些数据保存成pkl：\n1def save_as_pkl_gz(data_list, file_path): 2 with gzip.open(file_path, \u0026#39;wb\u0026#39;) as f: 3 pickle.dump(data_list, f) 4 5def save_images(images_data, label_data, directory): 6 os.makedirs(directory, exist_ok=True) 7 for i, (image, label) in enumerate(zip(images_data, label_data)): 8 sub_dir = os.path.join(directory, label) 9 os.makedirs(sub_dir, exist_ok=True) 10 image.save(f\u0026#39;{sub_dir}/image_{label}_{i}.png\u0026#39;) 5 读取并测试 在mnist_loader.py修改这个函数代码，将测试集替换成我们自己的：\n1def load_data(): 2 f = gzip.open(\u0026#39;mnist.pkl.gz\u0026#39;, \u0026#39;rb\u0026#39;) 3 training_data, validation_data, test_data = pickle.load(f, encoding=\u0026#34;latin1\u0026#34;) 4 f.close() 5 6 f_mydata = gzip.open(\u0026#39;mydata.pkl.gz\u0026#39;, \u0026#39;rb\u0026#39;) 7 test_data = pickle.load(f_mydata, encoding=\u0026#34;latin1\u0026#34;) 8 f_mydata.close() 9 10 return (training_data, validation_data, test_data) 最终，在使用官方训练集，我们自己的测试集进行测试的情况下，结果如下。其中0和9的识别率降低，推测与写法以及7和9易混淆有关。\n1[(4, 0), (5, 0), (2, 0), (7, 0), (0, 0), (7, 0), (9, 0), (0, 0), (4, 0), 2(1, 1), (6, 1), (6, 1), (1, 1), (1, 1), (5, 1), (1, 1), (5, 1), (5, 1), 3(1, 2), (2, 2), (2, 2), (2, 2), (2, 2), (1, 2), (2, 2), (6, 2), (1, 2), (8, 2), 4(5, 3), (3, 3), (3, 3), (3, 3), (3, 3), (5, 3), (5, 3), (4, 3), (1, 3), 5(4, 4), (5, 4), (0, 4), (4, 4), (4, 4), (9, 4), (4, 4), (6, 4), (9, 4), (8, 4), 6(1, 5), (5, 5), (1, 5), (5, 5), (5, 5), (5, 5), (5, 5), (1, 5), (5, 5), (5, 5), 7(1, 6), (6, 6), (1, 6), (5, 6), (6, 6), (6, 6), (6, 6), (6, 6), (4, 6), (5, 6), 8(1, 7), (2, 7), (2, 7), (7, 7), (1, 7), (1, 7), (7, 7), (7, 7), (5, 7), (1, 7), 9(6, 8), (8, 8), (8, 8), (5, 8), (8, 8), (8, 8), (8, 8), (8, 8), (8, 8), (8, 8), 10(1, 9), (1, 9), (1, 9), (2, 9), (7, 9), (5, 9), (7, 9), (5, 9), (7, 9)] 110 : 22.22% 121 : 44.44% 132 : 50.0% 143 : 44.44% 154 : 40.0% 165 : 70.0% 176 : 50.0% 187 : 30.0% 198 : 80.0% 209 : 0.0% 21Epoch 2 : 42 / 96 43.75% 43.75% ","date":"2024-05-30T20:00:40+08:00","permalink":"https://huuuuuuo.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0/","section":"post","tags":["神经网络与深度学习","AI"],"title":"学习笔记：《神经网络与深度学习》第一章练习"},{"categories":["read"],"contents":" 猫会喵喵叫，狗会汪汪汪，鸭会嘎嘎嘎，鸡会什么？\n鸡会留给有准备的人\n一朵花为什么好笑？\n因为它有梗\n为什么蚊子不吃辣椒？\n因为蚊子吃blood（不辣的）\n迪迦哪里的？\n东北的，因为我迪迦在东北\n知道狐狸为什么站不起来吗？\n因为他狡猾\n晏子使楚，晏子被人羞辱后离开，有认识晏子的大臣一听，急忙追去，\n说“晏子！晏子！没有你我可怎么活啊！”\n你知道恐怖片中为什么诡异的房子里都会有钢琴和邮箱吗？\n因为钢琴…住了几个妖，邮箱住了几个魔\n进门要求填个人信息，我瞎填的，\n于是我的身份成为了秘密:“瞎填瞎填悄悄过去，留下小秘密~”\n煎蛋爱上了荷包蛋，它拿着吉他，走到荷包蛋楼下唱：“这是一首煎蛋的小情歌。”\n虾和蚌同时考了100分，老师问虾你抄谁的？\n虾说：“我抄蚌的。”老师说：“你棒什么棒。”\n一只迷路的蚂蚁问另一只蚂蚁:“你都如何回蚁窝？”被问的蚂蚁说:“带着笑或是很沉默”\n蚂蚁的牙是什么颜色的，蚂蚁牙黑，蚂蚁牙黑\n从前有个猎人，他正在丛林中打猎，看见了一只狐狸，于是对着狐狸开了一枪，但他自己却死了，其实内是个反射弧\n为什么阿姨不流汗，因为阿姨怕留下姨汗\n知道海鸥到哪不会叫吗？巴黎，因为巴黎鸥来哑（巴黎欧莱雅）\n为什么许仙每次生气，白素贞一唱歌许仙就绕过他了，因为她擅长绕蛇歌曲\n为什么超人要穿紧身衣？因为救人要紧\n为什么哆啦A梦没有脖子？因为蓝脖积泥\n吃着吃着停电了，我连忙扒拉了两口饭，突然灯亮了，我惊呼：“莫非这就是传说中的扒拉拉能亮？”\n满分10分给你8.5分，你知道为什么吗？因为我有1.5语\n小猪小牛和小羊一起去便利店，出来的时候小猪和小牛被揍的鼻青脸肿，而小羊却没有。为什么呢？因为，便利店24小时不打烊\n","date":"2024-05-30T16:24:05+08:00","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%86%B7%E7%AC%91%E8%AF%9D%E6%94%B6%E9%9B%86/","section":"post","tags":["冷笑话"],"title":"阅读笔记：冷笑话收集"},{"categories":["Tech"],"contents":" 本文阅读书籍与参考代码：\n《神经网络与深度学习》\nhttps://github.com/MichalDanielDobrzanski/DeepLearningPython\n1 使⽤神经⽹络识别⼿写数字 神经⽹络使⽤样本来⾃动推断出识别⼿写数字的规则。另外，通过增加训练样本的数量，⽹络可以学到更多关于⼿写数字的知识，这样就能够提升⾃⾝的准确性。\n1.1 感知器 ⼀个感知器接受⼏个⼆进制输⼊，x1, x2, . . .，并产⽣⼀个⼆进制输出。你可以将感知器看作依据权重来作出决定的设备。感知器的规则可以写为：\n感知器网络可以表示为如下，并且我们完全能⽤感知器⽹络来计算任何逻辑功能，例如“与”，“或”和“与⾮”：\n1.2 S型神经元 假设我们把⽹络中的权重（或者偏置）做些微⼩的改动。就像我们⻢上会看到的，这⼀属性会让学习变得可能：\n如果对权重（或者偏置）的微⼩的改动真的能够仅仅引起输出的微⼩变化，那我们可以利⽤这⼀事实来修改权重和偏置，让我们的⽹络能够表现得像我们想要的那样。\n例如，假设⽹络错误地把⼀个“9”的图像分类为“8”。我们能够计算出怎么对权重和偏置做些⼩的改动，这样⽹络能够接近于把图像分类为“9”。\n然后我们要重复这个⼯作，反复改动权重和偏置来产⽣更好的输出。这时⽹络就在学习。\n实际上，⽹络中单个感知器上⼀个权重或偏置的微⼩改动有时候会引起那个感知器的输出完全翻转，如 0 变到 1。因此，虽然你的“9”可能被正确分类，⽹络在其它图像上的⾏为很可能以⼀些很难控制的⽅式被完全改变。\n我们引⼊⼀种称为 S 型神经元的新的⼈⼯神经元来克服这个问题。S 型神经元和感知器类似，但是被修改为权重和偏置的微⼩改动只引起输出的微⼩变化。这对于让神经元⽹络学习起来是很关键的。\nS 型神经元有多个输⼊，x1, x2, . . .。但是这些输⼊可以取 0 和 1 中的任意值，⽽不仅仅是 0 或 1。例如，0.638 。\n其中z ≡ w · x + b，σ 有时被称为逻辑函数。\n形状如下：\nσ 函数的平滑特性，正是关键因素，⽽不是其细部形式。σ 的平滑意味着权重和偏置的微⼩变化，即 ∆wj 和 ∆b，会从神经元产⽣⼀个微⼩的输出变化 ∆output。实际上它的意思⾮常简单（这可是个好消息）：∆output 是⼀个反映权重和偏置变化 —— 即 ∆wj 和 ∆b —— 的线性函数。这⼀线性使得选择权重和偏置的微⼩变化来达到输出的微⼩变化的运算变得容易。\nS 型神经元不仅仅输出 0 或 1。它可以输出 0 和 1 之间的任何实数，所以诸如 0.173。\n1.3 神经⽹络的架构 有这样一个网络：\n这个⽹络中，最左边的称为输⼊层，其中的神经元称为输⼊神经元。\n最右边的，即输出层，包含有输出神经元，在本例中，输出层只有⼀个神经元。\n中间层，既然这层中的神经元既不是输⼊也不是输出，则被称为隐藏层。“隐藏”这⼀术语也许听上去有些神秘——但它实际上仅仅意味着“既⾮输⼊也⾮输出”。\n1.3.1 网络层的设计 设计⽹络的输⼊输出层通常是⽐较直接的。例如，假设我们尝试确定⼀张⼿写数字的图像上是否写的是“9”。很⾃然地，我们可以将图⽚像素的强度进⾏编码作为输⼊神经元来设计⽹络。\n如果图像是⼀个 64 × 64 的灰度图像，那么我们会需要 4096 = 64 × 64 个输⼊神经元，每个强度取 0 和 1 之间合适的值。\n输出层只需要包含⼀个神经元，当输出值⼩于 0.5 时表⽰“输⼊图像不是⼀个 9”，⼤于 0.5 的值表⽰“输⼊图像是⼀个 9”。\n⽬前为⽌，我们讨论的神经⽹络，都是以上⼀层的输出作为下⼀层的输⼊。这种⽹络被称为前馈神经⽹络。\n1.4 ⼀个简单的分类⼿写数字的⽹络 我们给⽹络的训练数据会有很多扫描得到的 28 × 28 的⼿写数字的图像组成，所有输⼊层包含有 784 = 28 × 28个神经元。输⼊像素是灰度级的，值为 0.0 表⽰⽩⾊，值为 1.0 表⽰⿊⾊，中间数值表⽰逐渐暗淡的灰⾊。\n⽹络的第⼆层是⼀个隐藏层。我们⽤ n 来表⽰神经元的数量，我们将给 n 实验不同的数值。⽰例中⽤⼀个⼩的隐藏层来说明，仅仅包含 n = 15 个神经元。\n⽹络的输出层包含有 10 个神经元。如果第⼀个神经元激活，即输出 ≈ 1，那么表明⽹络认为数字是⼀个 0。\n1.4.1 隐藏层的神经元在做什么 假设隐藏层的第⼀个神经元只是⽤于检测如下的图像是否存在：\n为了达到这个⽬的，它通过对此图像对应部分的像素赋予较⼤权重，对其它部分赋予较⼩的 权重。同理，我们可以假设隐藏层的第⼆，第三，第四个神经元是为检测下列图⽚是否存在：\n这四幅图像组合在⼀起构成了前⾯显⽰的⼀⾏数字图像中的 0：\n1.4.2 练习——十进制转二进制 通过在上述的三层神经⽹络加⼀个额外的⼀层就可以实现按位表⽰数字。额外的⼀层把原来的输出层转化为⼀个⼆进制表⽰，如下图所⽰。为新的输出层寻找⼀些合适的权重和偏置。假定原先的 3 层神经⽹络在第三层得到正确输出（即原来的输出层）的激活值⾄少是0.99，得到错误的输出的激活值⾄多是0.01。\n原数字 二进制表示 0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111 8 1000 9 1001 四位二进制用abcd表示，当十进制输入为8，9的时候，a=1。\n所以可以设置权重为[0，0，0，0，0，0，0，0，1，1]T\n例如，计算第一个神经元a的w·x，当第三层十进制输出8时：\n激活值：当该位激活时=0.99，未激活时=0.01。第三层输出8时，8那个位置激活了，所以激活值=0.99 9的权重为1，但是未激活，所以激活值为0.01 计算各位的权重·激活值并进行相加，结果=1.00 原数字 权重 激活值 计算w·激活值 0 0 0.01 0 1 0 0.01 0 2 0 0.01 0 3 0 0.01 0 4 0 0.01 0 5 0 0.01 0 6 0 0.01 0 7 0 0.01 0 8 1 0.99 0.99 9 1 0.01 0.01 1.00 又例如，计算第三个神经元c的w·x，当第三层十进制输出7时：\n激活值：当该位激活时=0.99，未激活时=0.01。第三层输出7时，7那个位置激活了，所以激活值=0.99 2、3、6的权重为1，但是未激活，所以激活值为0.01 计算各位的权重·激活值并进行相加，结果=1.02 原数字 权重 激活值 计算w·激活值 0 0 0.01 0 1 0 0.01 0 2 1 0.01 0.01 3 1 0.01 0.01 4 0 0.01 0 5 0 0.01 0 6 1 0.01 0.01 7 1 0.99 0.99 8 0 0.01 0 9 0 0.01 0 1.02 最后可以得出总表：\n数字 w·x（第一个神经元） 第二个神经元 第三个神经元 第四个神经元 0 0.02 0.04 0.04 0.05 1 0.02 0.04 0.04 1.03 2 0.02 0.04 1.02 0.05 3 0.02 0.04 1.02 1.03 4 0.02 1.02 0.04 0.05 5 0.02 1.02 0.04 0.05 6 0.02 1.02 1.02 0.05 7 0.02 1.02 1.02 1.03 8 1.00 0.04 0.04 0.05 9 1.00 0.04 0.04 0.05 可以看出最大误差为0.05，那么我们可以设置偏置b为-0.06，就可以消去误差，然后规定至少大于0激活。比如，当第三层输出的数字为7，得出4个神经元adcd的输出w·x分别为[0.02，1.02，1.02，1.03]，这时候去掉误差-0.06，得到[-0.04，0.96，0.96，0.97]，-0.04未激活，结果=0。此时adcd=0111，也就是十进制的7。\n1.5 使⽤梯度下降算法进⾏学习 把每个训练输⼊ x 看作⼀个 28 × 28 = 784维的向量。每个向量中的项⽬代表图像中单个像素的灰度值。我们⽤ y = y(x) 表⽰对应的期望输出，这⾥ y 是⼀个 10 维的向量。\n我们希望有⼀个算法，能让我们找到权重和偏置，以⾄于⽹络的输出 y(x) 能够拟合所有的训练输⼊ x。为了量化我们如何实现这个⽬标，我们定义⼀个损失函数：\n这⾥ w 表⽰所有的⽹络中权重的集合，b 是所有的偏置，n 是训练输⼊数据的个数，a 是表⽰当输⼊为 x 时输出的向量，求和则是在总的训练输⼊ x 上进⾏的。\n我们训练算法的⽬的，是最⼩化权重和偏置的代价函数 C(w, b)。换句话说，我们想要找到⼀系列能让代价尽可能⼩的权重和偏置。\n我们将采⽤称为梯度下降的算法来达到这个⽬的。\n梯度下降算法⼯作的⽅式就是重复计算梯度 ∇C，然后沿着相反的⽅向移动，沿 着⼭⾕“滚落”。我们可以想象它像这样：\n梯度下降法可以被视为⼀种在 C 下降最快的⽅向上做微⼩变化的⽅法。\n1.6 实现我们的⽹络来分类数字 ⼀旦我们给⼀个⽹络学会了⼀组好的权重集和偏置集，它能很容易地被移植到⽹络浏览器中以 Javascript 运⾏，或者如在移动设备上的本地应⽤。\n建立一个test1.py文件，写入以下代码：\n1import mnist_loader 2import network 3 4training_data, validation_data, test_data = mnist_loader.load_data_wrapper() 5net = network.Network([784, 30, 10]) 6net.SGD(training_data, 30, 10, 3.0, test_data=test_data) 代码输出如下，最高准确率为95.08%：\n1Epoch 0 : 8937 / 10000 2... 3Epoch 19 : 9508 / 10000 4... 5Epoch 29 : 9488 / 10000 将隐藏层神经元数量改到 100，准确率提升到了96%以上，⾄少在这种情况下，使⽤更多的隐藏神经元帮助我们得到了更好的结果。\n当然，为了获得这些准确性，我不得不对训练的迭代期数量，⼩批量数据⼤⼩和学习速率η做特别的选择。正如我上⾯所提到的，这些在我们的神经⽹络中被称为超参数，以区别于通过我们的学习算法所学到的参数（权重和偏置）。如果我们选择了糟糕的超参数，我们会得到较差的结果。\n","date":"2024-05-27T08:25:07+08:00","permalink":"https://huuuuuuo.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/","section":"post","tags":["神经网络与深度学习","AI"],"title":"学习笔记：《神经网络与深度学习》第一章"},{"categories":["Tech"],"contents":"要新建一个空分支，其实就是新建一个分支，然后清空该分支下的所有文件\n因为新建分支，该分支下的内容会和当前分支一样\n1git branch qstart # 新建qstart分支 2git checkout qstart # 切换到qstart分支 3git rm -rf.\t# 清空qstart分支 4# 将文件放进该目录下 5git add . # 添加所有文件进行提交 6git commit -m \u0026#34;Initial commit\u0026#34;\t# 提交修改 7git push origin qstart\t# 推送qstart分支到远程仓库 ","date":"2024-05-23T16:33:19+08:00","permalink":"https://huuuuuuo.github.io/post/git%E6%96%B0%E5%BB%BA%E7%A9%BA%E5%88%86%E6%94%AF%E5%B9%B6%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/","section":"post","tags":["git"],"title":"Git新建空分支并上传文件"},{"categories":["read"],"contents":"这本书应该是2010版的《我的阿勒泰》。\n读了开头的三篇文章。初读的时候觉得，好像没有什么特别的。无非是出远门工作，回家又带了点东西来给家里人。叙事中都带着常见的心情，笔触也简单。\n但是多读了几篇，开始感受到一些些魔力，轻快的节奏，纯真的笔调，就像让我呼吸到了阿勒泰草原上的新鲜空气一样。\n——2024.5.23\n有些轻松幽默的气质在的，要多看看，沉浸下去的话，能体会到作者的语气，铺面而来好像和你对话一样。\n——2024.5.28\n","date":"2024-05-21T16:17:41+08:00","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%9D%8E%E5%A8%9F%E6%88%91%E7%9A%84%E9%98%BF%E5%8B%92%E6%B3%B0/","section":"post","tags":["李娟"],"title":"阅读笔记：李娟《我的阿勒泰》"},{"categories":["Tech"],"contents":" 参考：\nhttps://zhuanlan.zhihu.com/p/49331510\nhttps://zhuanlan.zhihu.com/p/24638007\nhttps://zhuanlan.zhihu.com/p/357963858\nhttps://www.cnblogs.com/pinard/p/5970503.html\n1 SVM算法 支持向量机（Support Vector Machine，SVM）是一种经典的监督学习算法，用于解决二分类和多分类问题。其核心思想是通过在特征空间中找到一个最优的超平面来进行分类，并且间隔最大。\n图1：\n1.1 决策面 红色和蓝色的二维数据点显然是可以被一条直线分开的，在模式识别领域称为线性可分问题。然而将两类数据点分开的直线显然不止一条。(b)和(c)分别给出了A、B两种不同的分类方案，其中黑色实线为分界线，术语称为“决策面”。\n1.2 分类间隔、支持向量 在保证决策面方向不变且不会出现错分样本的情况下移动决策面，会在原来的决策面两侧找到两个极限位置（越过该位置就会产生错分现象），如虚线所示。\n虚线的位置由决策面的方向和距离原决策面最近的几个样本的位置决定。而这两条平行虚线正中间的分界线就是在保持当前决策面方向不变的前提下的最优决策面。两条虚线之间的垂直距离就是这个最优决策面对应的分类间隔。\n显然每一个可能把数据集正确分开的方向都有一个最优决策面，而不同方向的最优决策面的分类间隔通常是不同的，那个具有“最大间隔”的决策面就是SVM要寻找的最优解。而这个真正的最优解对应的两侧虚线所穿过的样本点，就是SVM中的支持样本点，称为“支持向量”。\n对于图1中的数据，A决策面就是SVM寻找的最优解，而相应的三个位于虚线上的样本点在坐标系中对应的向量就叫做支持向量。\n到这里，我们明确了SVM算法要解决的是一个最优分类器的设计问题。\n2 随机梯度下降SGD 2.1 梯度下降法 大多数机器学习或者深度学习算法都涉及某种形式的优化。 优化指的是改变 x 以最小化或最大化某个函数 f(x)的任务。\n我们通常以最小化 f(x)指代大多数最优化问题。最大化可经由最小化算法最小化 -f(x)来实现。 我们把要最小化或最大化的函数称为目标函数或准则。 当我们对其进行最小化时，我们也把它称为代价函数、损失函数或误差函数。\n肯定有人问既然要最小化它，那求个导数，然后使得导数等于0求出不就好了吗？Emmmm\u0026hellip;是的，有这样的解法，可以去了解正规方程组求解。但是那样的方式太难求解，然后在高维的时候，可能不可解，但机器学习或深度学习中，很多都是超高维的，所以也一般不用那种方法。\n总之，梯度下降是另一种优化的不错方式，比直接求导好很多。\n2.2 梯度方向 梯度的方向总是指向函数值增大的方向，即自变量沿着梯度的方向移动，函数值总是增大的。\n梯度方向是上升方向，目标函数大多是loss函数，基本都是求最小值，那么就是就取梯度的负方向。\n梯度下降的方向就是用负梯度方向为搜索方向，沿着梯度下降的方向求解极小值\n在最小化损失函数时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。\n可在数学上证明，此处不赘述。\n2.3 梯度下降的直观解释 首先来看看梯度下降的一个直观的解释。比如我们在一座大山上的某处位置，由于我们不知道怎么下山，于是决定走一步算一步，也就是在每走到一个位置的时候，求解当前位置的梯度，沿着梯度的负方向，也就是当前最陡峭的位置向下走一步，然后继续求解当前位置梯度，向这一步所在位置沿着最陡峭最易下山的位置走一步。这样一步步的走下去，一直走到觉得我们已经到了山脚。当然这样走下去，有可能我们不能走到山脚，而是到了某一个局部的山峰低处。\n从上面的解释可以看出，梯度下降不一定能够找到全局的最优解，有可能是一个局部最优解。当然，如果损失函数是凸函数，梯度下降法得到的解就一定是全局最优解。\n2.4 相关概念 步长（Learning rate）：步长决定了在梯度下降迭代的过程中，每一步沿梯度负方向前进的长度。用上面下山的例子，步长就是在当前这一步所在位置沿着最陡峭最易下山的位置走的那一步的长度。\n特征（feature）：指的是样本中输入部分，比如2个单特征的样本\r，则第一个样本特征为x(0)，第一个样本输出为y(0)。\n假设函数（hypothesis function）（拟合函数）：在监督学习中，为了拟合输入样本，而使用的假设函数，记为hθ(x)。比如对于单个特征的m个样本\r(i=1,2,\u0026hellip;m)，可以采用拟合函数如下： 。\n损失函数（loss function）：为了评估模型拟合的好坏，通常用损失函数来度量拟合的程度。损失函数极小化，意味着拟合程度最好，对应的模型参数即为最优参数。在线性回归中，损失函数通常为样本输出和假设函数的差取平方。比如对于m个样本（xi,yi）(i=1,2,\u0026hellip;m)，采用线性回归，损失函数为：\n其中xi表示第i个样本特征，yi表示第i个样本对应的输出，hθ(xi) 为假设函数。\n2.5 批量梯度下降法 批量梯度下降法（Batch Gradient Descent）\n2.6 随机梯度下降法 随机梯度下降法（Stochastic Gradient Descent）\n2.7 小批量梯度下降法 小批量梯度下降法（Mini-batch Gradient Descent）\n","date":"2024-05-21T08:59:44+08:00","permalink":"https://huuuuuuo.github.io/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0svm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/","section":"post","tags":["深度学习","SVM"],"title":"深度学习：SVM算法笔记"},{"categories":["Tech"],"contents":" 参考：\nhttps://zhuanlan.zhihu.com/p/25994179\nhttps://zhuanlan.zhihu.com/p/26029567\nhttps://zhuanlan.zhihu.com/p/650548703\n1 什么是KNN kNN（k-nearest neighbor classification），即k近邻算法。\n给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近的K个实例，这K个实例的多数属于某个类，就把该输入实例分类到这个类中。\n图中，绿色的圆所标示的数据则是待分类的数据，我们根据k近邻的思想来给绿色圆点进行分类。\n如果K=3，绿色圆点的最邻近的3个点是2个红色小三角形和1个蓝色小正方形，少数从属于多数，基于统计的方法，判定绿色的这个待分类点属于红色的三角形一类。 如果K=5，绿色圆点的最邻近的5个邻居是2个红色三角形和3个蓝色的正方形，还是少数从属于多数，基于统计的方法，判定绿色的这个待分类点属于蓝色的正方形一类。 k值既不能过大，也不能过小，我们一般选取一个较小的数值，通常采取 交叉验证法来选取最优的k值。（也就是说，选取k值很重要的关键是实验调参，类似于神经网络选取多少层这种，通过调整超参数来得到一个较好的结果）\n2 距离 定义中所说的最邻近是如何度量呢？我们怎么知道谁跟测试点最邻近。这里我们一般用欧式距离来计算。\n数据可以理解成是由几个维度定义成的，这几个维度可以看成是几个坐标轴，数据在空间中的位置就是这几个坐标定义成的点，那么在计算数据之间的距离的时候，就是在计算空间之中两点的距离。\n3 特征归一化 用一个人身高(cm)与脚码（尺码）大小来作为特征值，类别为男性或者女性。我们现在如果有5个训练样本，分布如下：\nA [(179,42),男] B [(178,43),男] C [(165,36)女] D [(177,42),男] E [(160,35),女]\n很容易看到第一维身高特征是第二维脚码特征的4倍左右，那么在进行距离度量的时候，我们就会偏向于第一维特征。这样造成俩个特征并不是等价重要的，最终可能会导致距离计算错误，从而导致预测错误。\n现在我来了一个测试样本 F(167,43)，让我们来预测他是男性还是女性，我们采取k=3来预测。\n下面我们用欧式距离分别算出F离训练样本的欧式距离，然后选取最近的3个，多数类别就是我们最终的结果，计算如下：\n最近的前三个分别是C,D,E三个样本，那么由C,E为女性，D为男性，女性多于男性得到我们要预测的结果为女性。\n这样问题就来了，一个女性的脚43码的可能性，远远小于男性脚43码的可能性，那么为什么算法还是会预测F为女性呢？那是因为由于各个特征量纲的不同，在这里导致了身高的重要性已经远远大于脚码了，这是不客观的。所以我们应该让每个特征都是同等重要的！这也是我们要归一化的原因！\n归一化后，每个坐标就统一为百分比，不会出现数据差距过大的情况\n4 概述 算法的总过程：来了一个新的输入实例，我们算出该实例与每一个训练点的距离（这里的复杂度为0(n)比较大，所以引出了下文的kd树等结构），然后找到前k个，这k个哪个类别数最多，我们就判断新的输入实例是哪类！ 距离：与该实例最近邻的k个实例，这个最近邻的定义是通过不同距离函数来定义，我们最常用的是欧式距离。 归一化：为了保证每个特征同等重要性，我们这里对每个特征进行归一化。 k值：k值的选取，既不能太大，也不能太小，何值为最好，需要实验调整参数确定！ ","date":"2024-05-17T09:29:39+08:00","permalink":"https://huuuuuuo.github.io/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0knn%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/","section":"post","tags":["深度学习","KNN"],"title":"深度学习：KNN算法笔记"},{"categories":["read"],"contents":"《朝闻道》 这篇小说主要写了科学家们为了得到宇宙终极真相而心甘情愿赴死的故事。\n这表述了文章的主要思想——朝闻道，夕死可矣。对于科学家，终极真理就是他们所追求的道。为了获得那个穷极一生都不一定能够得到的真理，生命看起来就是最小的代价而已。\n没有什么比热爱还要动人的了。\n我认为这其实一直是中国传统精神的一部分，人们会说见义勇为，会以死捐躯，这是中国传统精神里面把精神置于肉体生命之上的大气。\n但是现代，人们更明白生命的宝贵，因此做出这种决定会更加艰难，当一个人置于这种情境下做出选择的时候，人性的形象也更加壮美。\n《时间旅行》 迫于环境和人口压力，人类中有八千万人要往后进行穿越，相信未来有更好的解决方案，人们冷冻了在冷库里面，到每个时代，由先遣队来探路，大使来决定是否在这个时代停留。\n所经历的时代，逐渐喧嚣，人们的自我表达越来越强烈。\n但是当在最后一个时代停下的时候，地球却失去了人的踪迹。\n人类什么都没有给未来留下。\n“什么都没留下，怎么可能？！”\n“他们没什么话要说了。”\n最后这句话使大家再次陷入沉默。\n“这一切您都预料到了，是吗？”先遣队长问大使，“那么，您应该想到原因了？”\n“我们能想到，但永远无法理解。原因要在哲学的深度上找。在对存在思考到终极时，他们认为不存在是最合理的，并选择了它。”\n","date":"2024-05-11T17:01:53+08:00","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%88%98%E6%85%88%E6%AC%A3%E6%9C%9D%E9%97%BB%E9%81%93/","section":"post","tags":["刘慈欣"],"title":"阅读笔记：刘慈欣《朝闻道》、《时间旅行》"},{"categories":["read"],"contents":" 本文为以下文章的阅读笔记：\nhttps://36kr.com/p/2770849347648260\n不可否认，GPT经常会犯一些低级错误。但陈云飞认为，事实并不是GPT擅长的，而当它被用在教育方面时，凭借极强的逻辑推理能力和丰富的知识库，它往往会让使用者感到惊艳。\nGPT丰富的知识库像一个老师，能够做出经验输出和推理，这正是我们学习过程中所需要的教育。\n在陈云飞看来，3年以内，翻译、客服、审核员、分析师和初级程序员都是最容易被AI替代的岗位。与此同时，又会衍生出提示词工程师和AI训练师这类新的岗位需求。届时市面上可能会涌现出许多专门培训AI培训师的机构，预期盛况可以参考当年office兴起后的培训班数量。\n而无论是新兴行业，还是传统行业，有一种能力始终通用，那就是能把人与人连接起来的本事。所以像销售、产品经理、项目经理这种复合类的岗位，不可替代性最强。\n3年以内太乐观了，很多企业还是有着大公司病，并且有些岗位虽然使用AI可以更快地解决问题，但也不代表就必须使用AI，不出错可能才是更重要的一点。传统行业或者特殊行业里面，人力有时候不仅仅是用来产出的，也是为了担责。\n现状是，虽然不一定大家都深度将其作为生产力工具，但是可能大部分人都或多或少会使用到。\n并且，在大城市到小城市，大公司到小公司，使用深度和广度都有差别。因此这也是一个需求点。\n毕竟，在唯变不变的年代，比起“体面高薪”的工作本身，永远保持“不下牌桌”的能力，才是更加抗风险的选择。\n不下牌桌，依靠被动收入来获取所需的收入，也即是财务自由的一种，这才是当代一种更好地选择——在工作之外有一个并行的收入。\n不过说到底，他的模式还是做出一个爆款，然后打造个人IP，成为网红，通过咨询和广告等进行变现。\n","date":"2024-05-11T15:39:21+08:00","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0ai%E5%90%AF%E7%A4%BA/","section":"post","tags":["AI"],"title":"阅读笔记：AI启示"},{"categories":["Tech"],"contents":"1 性能指标 1.1 TPS TPS (transaction per second) 是服务端每秒处理请求的数量\nTPS 最直观的反映了系统的处理能力，是重要的性能指标之一。\n1.2 响应时长 响应时长 就是 服务端 处理请求耗费的时间\n平均响应时长 就是服务端 处理请求的平均耗费时间。\n1.3 并发连接 和 并发用户 并发连接数 是 服务端 和客户端 建立的 TCP连接的数量\n并发用户数 是 服务端 同时服务的 用户的数量 。\n用户的一个操作可能引发多个并发连接。\n1.4 CPU/内存/磁盘/网络 负载 我们做性能测试时，不能只看 TPS、响应时长 等指标是否达到，也要看被测系统在达到这些指标时，机器本身的负载情况。\n所谓负载情况，主要是： CPU占用率， 内存使用，磁盘IO、磁盘使用率。\n在性能测试分析时，我们主要关注这两点：\n是否接近满负荷 如果在达到这些指标时，机器已经处于满负荷状态：CPU使用率 接近 100%， 内存几乎用光，那也是不行的。 因为随时系统可能出问题。就是说再加点压力，或者再持续一段时间，就很可能出现响应超时甚至响应错误的情况。 是否资源使用持续上升 这点特别体现在 内存使用率 上。 如果系统资源使用图上，\r内存使用率是一个斜线不断上升的情况，那么很可能被测系统存在内存泄露。\r这样只要再持续一段时间，就很可能出现系统因内存耗尽而奔溃的现象。 出现这样的图表，\r就应该添加测试用例，做一个较长时间的性能测试（longevity testing），观查系统的行为。\r2 Jmeter工具 JMeter主要用于 服务端系统 的性能测试，主要是接口测试。比如测试 web网站，API服务器 的性能。\nRamp-Up 时间 意思是总耗时，以秒为单位。\n循环次数 意思是执行线程组里面定义的动作行为 多少轮 。 缺省就做一轮。\nSampler 取样器 定义一个具体的请求。\n测试计划其实就是一个测试用例，对应一个测试场景。\n参考：\nhttps://www.byhy.net/etc/loadtest/process/measure/#cp\n","date":"2024-04-29T09:02:43+08:00","permalink":"https://huuuuuuo.github.io/post/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7jmeter%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/","section":"post","tags":["性能测试","jmeter"],"title":"性能测试：jmeter使用学习"},{"categories":["Tech"],"contents":"1 在cmd创建新仓库 1.1 在github页面上新建仓库 1.2 在本地新建仓库 首先，创建.gitignore文件，将不需要上传的文件和文件夹写进去，例如：\n1node_modules 2.DS_Store 3dist 4dist-ssr 5coverage 6*.local 7 8/cypress/videos/ 9/cypress/screenshots/ 接着，执行以下命令\n1echo \u0026#34;# vue3_test\u0026#34; \u0026gt;\u0026gt; README.md 2git init\t# 初始化 3git add .\t# 添加本地所有文件 4git commit -m \u0026#34;first commit\u0026#34;\t# 初始化 5git branch -M main\t# 初始化 6git remote add origin https://github.com/HuuuuuuO/vue3_test.git\t# 初始化 7git push -u origin main\t# 初始化 2 从cmd推送一个已经存在的仓库 1git remote add origin https://github.com/HuuuuuuO/vue3_test.git 2git branch -M main 3git push -u origin main ","date":"2024-04-24T17:38:38+08:00","permalink":"https://huuuuuuo.github.io/post/github%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81/","section":"post","tags":["github"],"title":"Github新建仓库并添加本地代码或文件"},{"categories":["Tech"],"contents":" 本文转载并修改自尚硅谷Vue3入门到实战\n1. Vue3简介 2020年9月18日，Vue.js发布版3.0版本，代号：One Piece（n\n经历了：4800+次提交、40+个RFC、600+次PR、300+贡献者\n官方发版地址：Release v3.0.0 One Piece · vuejs/core\n截止2023年10月，最新的公开版本为：3.3.4\n1.1. 【性能的提升】 打包大小减少41%。\n初次渲染快55%, 更新渲染快133%。\n内存减少54%。\n1.2.【 源码的升级】 使用Proxy代替defineProperty实现响应式。\n重写虚拟DOM的实现和Tree-Shaking。\n1.3. 【拥抱TypeScript】 Vue3可以更好的支持TypeScript。 1.4. 【新的特性】 Composition API（组合API）：\nsetup\nref与reactive\ncomputed与watch\n\u0026hellip;\u0026hellip;\n新的内置组件：\nFragment\nTeleport\nSuspense\n\u0026hellip;\u0026hellip;\n其他改变：\n新的生命周期钩子\ndata 选项应始终被声明为一个函数\n移除keyCode支持作为 v-on 的修饰符\n\u0026hellip;\u0026hellip;\n2. 创建Vue3工程 2.1. 【基于 vue-cli 创建】 点击查看官方文档\n备注：目前vue-cli已处于维护模式，官方推荐基于 Vite 创建项目。\n1## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上 2vue --version 3 4## 安装或者升级你的@vue/cli 5npm install -g @vue/cli 6 7## 执行创建命令 8vue create vue_test 9 10## 随后选择3.x 11## Choose a version of Vue.js that you want to start the project with (Use arrow keys) 12## \u0026gt; 3.x 13## 2.x 14 15## 启动 16cd vue_test 17npm run serve 2.2. 【基于 vite 创建】(推荐) vite 是新一代前端构建工具，官网地址：https://vitejs.cn，vite的优势如下：\n轻量快速的热重载（HMR），能实现极速的服务启动。\n对 TypeScript、JSX、CSS 等支持开箱即用。\n真正的按需编译，不再等待整个应用编译完成。\nwebpack构建 与 vite构建对比图如下：\r具体操作如下（点击查看官方文档） 1## 1.创建命令 2npm create vue@latest 3 4## 2.具体配置 5## 配置项目名称 6√ Project name: vue3_test 7## 是否添加TypeScript支持 8√ Add TypeScript? Yes 9## 是否添加JSX支持 10√ Add JSX Support? No 11## 是否添加路由环境 12√ Add Vue Router for Single Page Application development? No 13## 是否添加pinia环境 14√ Add Pinia for state management? No 15## 是否添加单元测试 16√ Add Vitest for Unit Testing? No 17## 是否添加端到端测试方案 18√ Add an End-to-End Testing Solution? » No 19## 是否添加ESLint语法检查 20√ Add ESLint for code quality? Yes 21## 是否添加Prettiert代码格式化 22√ Add Prettier for code formatting? No 自己动手编写一个App组件\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;app\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;你好啊！\u0026lt;/h1\u0026gt; 4 \u0026lt;/div\u0026gt; 5\u0026lt;/template\u0026gt; 6 7\u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; 8 export default { 9 name:\u0026#39;App\u0026#39; //组件名 10 } 11\u0026lt;/script\u0026gt; 12 13\u0026lt;style\u0026gt; 14 .app { 15 background-color: #ddd; 16 box-shadow: 0 0 10px; 17 border-radius: 10px; 18 padding: 20px; 19 } 20\u0026lt;/style\u0026gt; 安装官方推荐的vscode插件：\n总结：\nVite 项目中，index.html 是项目的入口文件，在项目最外层。 加载index.html后，Vite 解析 \u0026lt;script type=\u0026quot;module\u0026quot; src=\u0026quot;xxx\u0026quot;\u0026gt; 指向的JavaScript。 Vue3**中是通过 **createApp 函数创建一个应用实例。 2.3. 【一个简单的效果】 Vue3向下兼容Vue2语法，且Vue3中的模板中可以没有根标签\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h2\u0026gt;姓名：{{name}}\u0026lt;/h2\u0026gt; 4 \u0026lt;h2\u0026gt;年龄：{{age}}\u0026lt;/h2\u0026gt; 5 \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;修改名字\u0026lt;/button\u0026gt; 6 \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;年龄+1\u0026lt;/button\u0026gt; 7 \u0026lt;button @click=\u0026#34;showTel\u0026#34;\u0026gt;点我查看联系方式\u0026lt;/button\u0026gt; 8 \u0026lt;/div\u0026gt; 9\u0026lt;/template\u0026gt; 10 11\u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; 12 export default { 13 name:\u0026#39;App\u0026#39;, 14 data() { 15 return { 16 name:\u0026#39;张三\u0026#39;, 17 age:18, 18 tel:\u0026#39;13888888888\u0026#39; 19 } 20 }, 21 methods:{ 22 changeName(){ 23 this.name = \u0026#39;zhang-san\u0026#39; 24 }, 25 changeAge(){ 26 this.age += 1 27 }, 28 showTel(){ 29 alert(this.tel) 30 } 31 }, 32 } 33\u0026lt;/script\u0026gt; 2.4. 【控制台调试】 下载Vue.js官方调试工具，解压后将其中的crx插件拖入chrome的扩展程序，即可安装，然后就可以在f12里面看见了。\n3. Vue3核心语法 3.1. 【OptionsAPI 与 CompositionAPI】 Vue2的API设计是Options（配置）风格的。 Vue3的API设计是Composition（组合）风格的。 Options API 的弊端 Options类型的 API，数据、方法、计算属性等，是分散在：data、methods、computed中的，若想新增或者修改一个需求，就需要分别修改：data、methods、computed，不便于维护和复用。\nComposition API 的优势 可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。\n说明：以上四张动图原创作者：大帅老猿\n3.2. 【拉开序幕的 setup】 setup 概述 setup是Vue3中一个新的配置项，值是一个函数，它是 Composition API “表演的舞台”，组件中所用到的：数据、方法、计算属性、监视\u0026hellip;\u0026hellip;等等，均配置在setup中。\n特点如下：\nsetup函数返回的对象中的内容，可直接在模板中使用。 setup中访问this是undefined。 setup函数会在beforeCreate之前调用，它是“领先”所有钩子执行的。 第20行：\r数据（注意：此时的name、age、tel都不是响应式数据）\r其中响应式可以简单理解为：后期数据变化了，会进行自动更新 1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h2\u0026gt;姓名：{{name}}\u0026lt;/h2\u0026gt; 4 \u0026lt;h2\u0026gt;年龄：{{age}}\u0026lt;/h2\u0026gt; 5 \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;修改名字\u0026lt;/button\u0026gt; 6 \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;年龄+1\u0026lt;/button\u0026gt; 7 \u0026lt;button @click=\u0026#34;showTel\u0026#34;\u0026gt;点我查看联系方式\u0026lt;/button\u0026gt; 8 \u0026lt;/div\u0026gt; 9\u0026lt;/template\u0026gt; 10 11\u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; 12 export default { 13 name:\u0026#39;Person\u0026#39;, 14 setup(){ 15 // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据） 16 17 let name = \u0026#39;张三\u0026#39; 18 let age = 18 19 let tel = \u0026#39;13888888888\u0026#39; 20 21 // 方法，原来写在methods中 22 function changeName(){ 23 name = \u0026#39;zhang-san\u0026#39; //注意：此时这么修改name页面是不变化的 24 console.log(name) 25 } 26 function changeAge(){ 27 age += 1 //注意：此时这么修改age页面是不变化的 28 console.log(age) 29 } 30 function showTel(){ 31 alert(tel) 32 } 33 34 // 返回一个对象，对象中的内容，模板中可以直接使用 35 return {name,age,tel,changeName,changeAge,showTel} 36 } 37 } 38\u0026lt;/script\u0026gt; setup 的返回值 若返回一个对象：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。** 若返回一个函数：则可以自定义渲染内容，代码如下： 1setup(){ 2 return ()=\u0026gt; \u0026#39;你好啊！\u0026#39; 3} setup 与 Options API 的关系 Vue2 的配置（data、methos\u0026hellip;\u0026hellip;）中可以访问到 setup中的属性、方法。 但在setup中不能访问到Vue2的配置（data、methods\u0026hellip;\u0026hellip;）。 如果与Vue2冲突，则setup优先。 setup 语法糖 setup函数有一个语法糖，这个语法糖，可以让我们把setup独立出去，代码如下：\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h2\u0026gt;姓名：{{name}}\u0026lt;/h2\u0026gt; 4 \u0026lt;h2\u0026gt;年龄：{{age}}\u0026lt;/h2\u0026gt; 5 \u0026lt;button @click=\u0026#34;changName\u0026#34;\u0026gt;修改名字\u0026lt;/button\u0026gt; 6 \u0026lt;button @click=\u0026#34;changAge\u0026#34;\u0026gt;年龄+1\u0026lt;/button\u0026gt; 7 \u0026lt;button @click=\u0026#34;showTel\u0026#34;\u0026gt;点我查看联系方式\u0026lt;/button\u0026gt; 8 \u0026lt;/div\u0026gt; 9\u0026lt;/template\u0026gt; 10 11\u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; 12 export default { 13 name:\u0026#39;Person\u0026#39;, 14 } 15\u0026lt;/script\u0026gt; 16 17\u0026lt;!-- 下面的写法是setup语法糖 --\u0026gt; 18\u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; 19 console.log(this) //undefined 20 //数据（注意：此时的name、age、tel都不是响应式数据） 21 let name = \u0026#39;张三\u0026#39; 22 let age = 18 23 let tel = \u0026#39;13888888888\u0026#39; 24 25 // 方法 26 function changName(){ 27 name = \u0026#39;李四\u0026#39;//注意：此时这么修改name页面是不变化的 28 } 29 function changAge(){ 30 console.log(age) 31 age += 1 //注意：此时这么修改age页面是不变化的 32 } 33 function showTel(){ 34 alert(tel) 35 } 36\u0026lt;/script\u0026gt; 扩展：上述代码，还需要编写一个不写setup的script标签，去指定组件名字，比较麻烦，我们可以借助vite中的插件简化\n第一步：npm i vite-plugin-vue-setup-extend -D 第二步：vite.config.ts 1import { defineConfig } from \u0026#39;vite\u0026#39; 2import VueSetupExtend from \u0026#39;vite-plugin-vue-setup-extend\u0026#39; 3 4export default defineConfig({ 5 plugins: [ VueSetupExtend() ] 6}) 第三步：\u0026lt;script setup lang=\u0026quot;ts\u0026quot; name=\u0026quot;Person\u0026quot;\u0026gt; 3.3. 【ref 创建：基本类型的响应式数据】 **作用：**定义响应式变量。 语法：let xxx = ref(初始值)。 **返回值：**一个RefImpl的实例对象，简称ref对象或ref，ref对象的value属性是响应式的。 注意点： JS中操作数据需要：xxx.value，但模板中不需要.value，直接使用即可。 对于let name = ref('张三')来说，name不是响应式的，name.value是响应式的。 1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h2\u0026gt;姓名：{{name}}\u0026lt;/h2\u0026gt; 4 \u0026lt;h2\u0026gt;年龄：{{age}}\u0026lt;/h2\u0026gt; 5 \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;修改名字\u0026lt;/button\u0026gt; 6 \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;年龄+1\u0026lt;/button\u0026gt; 7 \u0026lt;button @click=\u0026#34;showTel\u0026#34;\u0026gt;点我查看联系方式\u0026lt;/button\u0026gt; 8 \u0026lt;/div\u0026gt; 9\u0026lt;/template\u0026gt; 10 11\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;Person\u0026#34;\u0026gt; 12 import {ref} from \u0026#39;vue\u0026#39; 13 // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。 14 let name = ref(\u0026#39;张三\u0026#39;) 15 let age = ref(18) 16 // tel就是一个普通的字符串，不是响应式的 17 let tel = \u0026#39;13888888888\u0026#39; 18 19 function changeName(){ 20 // JS中操作ref对象时候需要.value 21 name.value = \u0026#39;李四\u0026#39; 22 console.log(name.value) 23 24 // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。 25 // name = ref(\u0026#39;zhang-san\u0026#39;) 26 } 27 function changeAge(){ 28 // JS中操作ref对象时候需要.value 29 age.value += 1 30 console.log(age.value) 31 } 32 function showTel(){ 33 alert(tel) 34 } 35\u0026lt;/script\u0026gt; 3.4. 【reactive 创建：对象类型的响应式数据】 作用：定义一个响应式对象（基本类型不要用它，要用ref，否则报错） 语法：let 响应式对象= reactive(源对象)。 **返回值：**一个Proxy的实例对象，简称：响应式对象。 注意点：reactive定义的响应式数据是“深层次”的。 1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h2\u0026gt;汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万\u0026lt;/h2\u0026gt; 4 \u0026lt;h2\u0026gt;游戏列表：\u0026lt;/h2\u0026gt; 5 \u0026lt;ul\u0026gt; 6 \u0026lt;li v-for=\u0026#34;g in games\u0026#34; :key=\u0026#34;g.id\u0026#34;\u0026gt;{{ g.name }}\u0026lt;/li\u0026gt; 7 \u0026lt;/ul\u0026gt; 8 \u0026lt;h2\u0026gt;测试：{{obj.a.b.c.d}}\u0026lt;/h2\u0026gt; 9 \u0026lt;button @click=\u0026#34;changeCarPrice\u0026#34;\u0026gt;修改汽车价格\u0026lt;/button\u0026gt; 10 \u0026lt;button @click=\u0026#34;changeFirstGame\u0026#34;\u0026gt;修改第一游戏\u0026lt;/button\u0026gt; 11 \u0026lt;button @click=\u0026#34;test\u0026#34;\u0026gt;测试\u0026lt;/button\u0026gt; 12 \u0026lt;/div\u0026gt; 13\u0026lt;/template\u0026gt; 14 15\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 16import { reactive } from \u0026#39;vue\u0026#39; 17 18// 数据 19let car = reactive({ brand: \u0026#39;奔驰\u0026#39;, price: 100 }) 20let games = reactive([ 21 { id: \u0026#39;ahsgdyfa01\u0026#39;, name: \u0026#39;英雄联盟\u0026#39; }, 22 { id: \u0026#39;ahsgdyfa02\u0026#39;, name: \u0026#39;王者荣耀\u0026#39; }, 23 { id: \u0026#39;ahsgdyfa03\u0026#39;, name: \u0026#39;原神\u0026#39; } 24]) 25let obj = reactive({ 26 a:{ 27 b:{ 28 c:{ 29 d:666 30 } 31 } 32 } 33}) 34 35function changeCarPrice() { 36 car.price += 10 37} 38function changeFirstGame() { 39 games[0].name = \u0026#39;流星蝴蝶剑\u0026#39; 40} 41function test(){ 42 obj.a.b.c.d = 999 43} 44\u0026lt;/script\u0026gt; 3.5. 【ref 创建：对象类型的响应式数据】 其实ref接收的数据可以是：基本类型、对象类型。 若ref接收的是对象类型，内部其实也是调用了reactive函数。 1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h2\u0026gt;汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万\u0026lt;/h2\u0026gt; 4 \u0026lt;h2\u0026gt;游戏列表：\u0026lt;/h2\u0026gt; 5 \u0026lt;ul\u0026gt; 6 \u0026lt;li v-for=\u0026#34;g in games\u0026#34; :key=\u0026#34;g.id\u0026#34;\u0026gt;{{ g.name }}\u0026lt;/li\u0026gt; 7 \u0026lt;/ul\u0026gt; 8 \u0026lt;h2\u0026gt;测试：{{obj.a.b.c.d}}\u0026lt;/h2\u0026gt; 9 \u0026lt;button @click=\u0026#34;changeCarPrice\u0026#34;\u0026gt;修改汽车价格\u0026lt;/button\u0026gt; 10 \u0026lt;button @click=\u0026#34;changeFirstGame\u0026#34;\u0026gt;修改第一游戏\u0026lt;/button\u0026gt; 11 \u0026lt;button @click=\u0026#34;test\u0026#34;\u0026gt;测试\u0026lt;/button\u0026gt; 12 \u0026lt;/div\u0026gt; 13\u0026lt;/template\u0026gt; 14 15\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 16import { ref } from \u0026#39;vue\u0026#39; 17 18// 数据 19let car = ref({ brand: \u0026#39;奔驰\u0026#39;, price: 100 }) 20let games = ref([ 21 { id: \u0026#39;ahsgdyfa01\u0026#39;, name: \u0026#39;英雄联盟\u0026#39; }, 22 { id: \u0026#39;ahsgdyfa02\u0026#39;, name: \u0026#39;王者荣耀\u0026#39; }, 23 { id: \u0026#39;ahsgdyfa03\u0026#39;, name: \u0026#39;原神\u0026#39; } 24]) 25let obj = ref({ 26 a:{ 27 b:{ 28 c:{ 29 d:666 30 } 31 } 32 } 33}) 34 35console.log(car) 36 37function changeCarPrice() { 38 car.value.price += 10 39} 40function changeFirstGame() { 41 games.value[0].name = \u0026#39;流星蝴蝶剑\u0026#39; 42} 43function test(){ 44 obj.value.a.b.c.d = 999 45} 46\u0026lt;/script\u0026gt; 3.6. 【ref 对比 reactive】 宏观角度看：\nref用来定义：基本类型数据、对象类型数据；\nreactive用来定义：对象类型数据。\n区别： ref创建的变量必须使用.value（可以使用volar插件自动添加.value）。\nreactive重新分配一个新对象，会失去响应式（可以使用Object.assign去整体替换）。\n使用原则： 若需要一个基本类型的响应式数据，必须使用ref。 若需要一个响应式对象，层级不深，ref、reactive都可以。 若需要一个响应式对象，且层级较深，推荐使用reactive。 3.7. 【toRefs 与 toRef】 作用：将一个响应式对象中的每一个属性，转换为ref对象。 备注：toRefs与toRef功能一致，但toRefs可以批量转换。 语法如下： 1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h2\u0026gt;姓名：{{person.name}}\u0026lt;/h2\u0026gt; 4 \u0026lt;h2\u0026gt;年龄：{{person.age}}\u0026lt;/h2\u0026gt; 5 \u0026lt;h2\u0026gt;性别：{{person.gender}}\u0026lt;/h2\u0026gt; 6 \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;修改名字\u0026lt;/button\u0026gt; 7 \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;修改年龄\u0026lt;/button\u0026gt; 8 \u0026lt;button @click=\u0026#34;changeGender\u0026#34;\u0026gt;修改性别\u0026lt;/button\u0026gt; 9 \u0026lt;/div\u0026gt; 10\u0026lt;/template\u0026gt; 11 12\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 13 import {ref,reactive,toRefs,toRef} from \u0026#39;vue\u0026#39; 14 15 // 数据 16 let person = reactive({name:\u0026#39;张三\u0026#39;, age:18, gender:\u0026#39;男\u0026#39;}) 17\t18 // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力 19 let {name,gender} = toRefs(person) 20\t21 // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力 22 let age = toRef(person,\u0026#39;age\u0026#39;) 23 24 // 方法 25 function changeName(){ 26 name.value += \u0026#39;~\u0026#39; 27 } 28 function changeAge(){ 29 age.value += 1 30 } 31 function changeGender(){ 32 gender.value = \u0026#39;女\u0026#39; 33 } 34\u0026lt;/script\u0026gt; 3.8. 【computed】 作用：根据已有数据计算出新数据（和Vue2中的computed作用一致）。\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 姓：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;firstName\u0026#34;\u0026gt; \u0026lt;br\u0026gt; 4 名：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;lastName\u0026#34;\u0026gt; \u0026lt;br\u0026gt; 5 全名：\u0026lt;span\u0026gt;{{fullName}}\u0026lt;/span\u0026gt; \u0026lt;br\u0026gt; 6 \u0026lt;button @click=\u0026#34;changeFullName\u0026#34;\u0026gt;全名改为：li-si\u0026lt;/button\u0026gt; 7 \u0026lt;/div\u0026gt; 8\u0026lt;/template\u0026gt; 9 10\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;App\u0026#34;\u0026gt; 11 import {ref,computed} from \u0026#39;vue\u0026#39; 12 13 let firstName = ref(\u0026#39;zhang\u0026#39;) 14 let lastName = ref(\u0026#39;san\u0026#39;) 15 16 // 计算属性——只读取，不修改 17 /* let fullName = computed(()=\u0026gt;{ 18 return firstName.value + \u0026#39;-\u0026#39; + lastName.value 19 }) */ 20 21 22 // 计算属性——既读取又修改 23 let fullName = computed({ 24 // 读取 25 get(){ 26 return firstName.value + \u0026#39;-\u0026#39; + lastName.value 27 }, 28 // 修改 29 set(val){ 30 console.log(\u0026#39;有人修改了fullName\u0026#39;,val) 31 firstName.value = val.split(\u0026#39;-\u0026#39;)[0] 32 lastName.value = val.split(\u0026#39;-\u0026#39;)[1] 33 } 34 }) 35 36 function changeFullName(){ 37 fullName.value = \u0026#39;li-si\u0026#39; 38 } 39\u0026lt;/script\u0026gt; 3.9.【watch】 作用：监视数据的变化（和Vue2中的watch作用一致） 特点：Vue3中的watch只能监视以下四种数据： ref定义的数据。 reactive定义的数据。 函数返回一个值（getter函数）。 一个包含上述内容的数组。 我们在Vue3中使用watch的时候，通常会遇到以下几种情况：\n* 情况一 监视ref定义的【基本类型】数据：直接写数据名即可，监视的是其value值的改变。\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;情况一：监视【ref】定义的【基本类型】数据\u0026lt;/h1\u0026gt; 4 \u0026lt;h2\u0026gt;当前求和为：{{sum}}\u0026lt;/h2\u0026gt; 5 \u0026lt;button @click=\u0026#34;changeSum\u0026#34;\u0026gt;点我sum+1\u0026lt;/button\u0026gt; 6 \u0026lt;/div\u0026gt; 7\u0026lt;/template\u0026gt; 8 9\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 10 import {ref,watch} from \u0026#39;vue\u0026#39; 11 // 数据 12 let sum = ref(0) 13 // 方法 14 function changeSum(){ 15 sum.value += 1 16 } 17 // 监视，情况一：监视【ref】定义的【基本类型】数据 18 const stopWatch = watch(sum,(newValue,oldValue)=\u0026gt;{ 19 console.log(\u0026#39;sum变化了\u0026#39;,newValue,oldValue) 20 if(newValue \u0026gt;= 10){ 21 stopWatch() 22 } 23 }) 24\u0026lt;/script\u0026gt; * 情况二 监视ref定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。\n注意：\n若修改的是ref定义的对象中的属性，newValue 和 oldValue 都是新值，因为它们是同一个对象。\n若修改整个ref定义的对象，newValue 是新值， oldValue 是旧值，因为不是同一个对象了。\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;情况二：监视【ref】定义的【对象类型】数据\u0026lt;/h1\u0026gt; 4 \u0026lt;h2\u0026gt;姓名：{{ person.name }}\u0026lt;/h2\u0026gt; 5 \u0026lt;h2\u0026gt;年龄：{{ person.age }}\u0026lt;/h2\u0026gt; 6 \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;修改名字\u0026lt;/button\u0026gt; 7 \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;修改年龄\u0026lt;/button\u0026gt; 8 \u0026lt;button @click=\u0026#34;changePerson\u0026#34;\u0026gt;修改整个人\u0026lt;/button\u0026gt; 9 \u0026lt;/div\u0026gt; 10\u0026lt;/template\u0026gt; 11 12\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 13 import {ref,watch} from \u0026#39;vue\u0026#39; 14 // 数据 15 let person = ref({ 16 name:\u0026#39;张三\u0026#39;, 17 age:18 18 }) 19 // 方法 20 function changeName(){ 21 person.value.name += \u0026#39;~\u0026#39; 22 } 23 function changeAge(){ 24 person.value.age += 1 25 } 26 function changePerson(){ 27 person.value = {name:\u0026#39;李四\u0026#39;,age:90} 28 } 29 /* 30 监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视 31 watch的第一个参数是：被监视的数据 32 watch的第二个参数是：监视的回调 33 watch的第三个参数是：配置对象（deep、immediate等等.....） 34 */ 35 watch(person,(newValue,oldValue)=\u0026gt;{ 36 console.log(\u0026#39;person变化了\u0026#39;,newValue,oldValue) 37 },{deep:true}) 38 39\u0026lt;/script\u0026gt; * 情况三 监视reactive定义的【对象类型】数据，且默认开启了深度监视。\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;情况三：监视【reactive】定义的【对象类型】数据\u0026lt;/h1\u0026gt; 4 \u0026lt;h2\u0026gt;姓名：{{ person.name }}\u0026lt;/h2\u0026gt; 5 \u0026lt;h2\u0026gt;年龄：{{ person.age }}\u0026lt;/h2\u0026gt; 6 \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;修改名字\u0026lt;/button\u0026gt; 7 \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;修改年龄\u0026lt;/button\u0026gt; 8 \u0026lt;button @click=\u0026#34;changePerson\u0026#34;\u0026gt;修改整个人\u0026lt;/button\u0026gt; 9 \u0026lt;hr\u0026gt; 10 \u0026lt;h2\u0026gt;测试：{{obj.a.b.c}}\u0026lt;/h2\u0026gt; 11 \u0026lt;button @click=\u0026#34;test\u0026#34;\u0026gt;修改obj.a.b.c\u0026lt;/button\u0026gt; 12 \u0026lt;/div\u0026gt; 13\u0026lt;/template\u0026gt; 14 15\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 16 import {reactive,watch} from \u0026#39;vue\u0026#39; 17 // 数据 18 let person = reactive({ 19 name:\u0026#39;张三\u0026#39;, 20 age:18 21 }) 22 let obj = reactive({ 23 a:{ 24 b:{ 25 c:666 26 } 27 } 28 }) 29 // 方法 30 function changeName(){ 31 person.name += \u0026#39;~\u0026#39; 32 } 33 function changeAge(){ 34 person.age += 1 35 } 36 function changePerson(){ 37 Object.assign(person,{name:\u0026#39;李四\u0026#39;,age:80}) 38 } 39 function test(){ 40 obj.a.b.c = 888 41 } 42 43 // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的 44 watch(person,(newValue,oldValue)=\u0026gt;{ 45 console.log(\u0026#39;person变化了\u0026#39;,newValue,oldValue) 46 }) 47 watch(obj,(newValue,oldValue)=\u0026gt;{ 48 console.log(\u0026#39;Obj变化了\u0026#39;,newValue,oldValue) 49 }) 50\u0026lt;/script\u0026gt; * 情况四 监视ref或reactive定义的【对象类型】数据中的某个属性，注意点如下：\n若该属性值不是【对象类型】，需要写成函数形式。 若该属性值是依然是【对象类型】，可直接编，也可写成函数，建议写成函数。 结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性\u0026lt;/h1\u0026gt; 4 \u0026lt;h2\u0026gt;姓名：{{ person.name }}\u0026lt;/h2\u0026gt; 5 \u0026lt;h2\u0026gt;年龄：{{ person.age }}\u0026lt;/h2\u0026gt; 6 \u0026lt;h2\u0026gt;汽车：{{ person.car.c1 }}、{{ person.car.c2 }}\u0026lt;/h2\u0026gt; 7 \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;修改名字\u0026lt;/button\u0026gt; 8 \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;修改年龄\u0026lt;/button\u0026gt; 9 \u0026lt;button @click=\u0026#34;changeC1\u0026#34;\u0026gt;修改第一台车\u0026lt;/button\u0026gt; 10 \u0026lt;button @click=\u0026#34;changeC2\u0026#34;\u0026gt;修改第二台车\u0026lt;/button\u0026gt; 11 \u0026lt;button @click=\u0026#34;changeCar\u0026#34;\u0026gt;修改整个车\u0026lt;/button\u0026gt; 12 \u0026lt;/div\u0026gt; 13\u0026lt;/template\u0026gt; 14 15\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 16 import {reactive,watch} from \u0026#39;vue\u0026#39; 17 18 // 数据 19 let person = reactive({ 20 name:\u0026#39;张三\u0026#39;, 21 age:18, 22 car:{ 23 c1:\u0026#39;奔驰\u0026#39;, 24 c2:\u0026#39;宝马\u0026#39; 25 } 26 }) 27 // 方法 28 function changeName(){ 29 person.name += \u0026#39;~\u0026#39; 30 } 31 function changeAge(){ 32 person.age += 1 33 } 34 function changeC1(){ 35 person.car.c1 = \u0026#39;奥迪\u0026#39; 36 } 37 function changeC2(){ 38 person.car.c2 = \u0026#39;大众\u0026#39; 39 } 40 function changeCar(){ 41 person.car = {c1:\u0026#39;雅迪\u0026#39;,c2:\u0026#39;爱玛\u0026#39;} 42 } 43 44 // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式 45 /* watch(()=\u0026gt; person.name,(newValue,oldValue)=\u0026gt;{ 46 console.log(\u0026#39;person.name变化了\u0026#39;,newValue,oldValue) 47 }) */ 48 49 // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数 50 watch(()=\u0026gt;person.car,(newValue,oldValue)=\u0026gt;{ 51 console.log(\u0026#39;person.car变化了\u0026#39;,newValue,oldValue) 52 },{deep:true}) 53\u0026lt;/script\u0026gt; * 情况五 监视上述的多个数据\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;情况五：监视上述的多个数据\u0026lt;/h1\u0026gt; 4 \u0026lt;h2\u0026gt;姓名：{{ person.name }}\u0026lt;/h2\u0026gt; 5 \u0026lt;h2\u0026gt;年龄：{{ person.age }}\u0026lt;/h2\u0026gt; 6 \u0026lt;h2\u0026gt;汽车：{{ person.car.c1 }}、{{ person.car.c2 }}\u0026lt;/h2\u0026gt; 7 \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;修改名字\u0026lt;/button\u0026gt; 8 \u0026lt;button @click=\u0026#34;changeAge\u0026#34;\u0026gt;修改年龄\u0026lt;/button\u0026gt; 9 \u0026lt;button @click=\u0026#34;changeC1\u0026#34;\u0026gt;修改第一台车\u0026lt;/button\u0026gt; 10 \u0026lt;button @click=\u0026#34;changeC2\u0026#34;\u0026gt;修改第二台车\u0026lt;/button\u0026gt; 11 \u0026lt;button @click=\u0026#34;changeCar\u0026#34;\u0026gt;修改整个车\u0026lt;/button\u0026gt; 12 \u0026lt;/div\u0026gt; 13\u0026lt;/template\u0026gt; 14 15\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 16 import {reactive,watch} from \u0026#39;vue\u0026#39; 17 18 // 数据 19 let person = reactive({ 20 name:\u0026#39;张三\u0026#39;, 21 age:18, 22 car:{ 23 c1:\u0026#39;奔驰\u0026#39;, 24 c2:\u0026#39;宝马\u0026#39; 25 } 26 }) 27 // 方法 28 function changeName(){ 29 person.name += \u0026#39;~\u0026#39; 30 } 31 function changeAge(){ 32 person.age += 1 33 } 34 function changeC1(){ 35 person.car.c1 = \u0026#39;奥迪\u0026#39; 36 } 37 function changeC2(){ 38 person.car.c2 = \u0026#39;大众\u0026#39; 39 } 40 function changeCar(){ 41 person.car = {c1:\u0026#39;雅迪\u0026#39;,c2:\u0026#39;爱玛\u0026#39;} 42 } 43 44 // 监视，情况五：监视上述的多个数据 45 watch([()=\u0026gt;person.name,person.car],(newValue,oldValue)=\u0026gt;{ 46 console.log(\u0026#39;person.car变化了\u0026#39;,newValue,oldValue) 47 },{deep:true}) 48 49\u0026lt;/script\u0026gt; 3.10. 【watchEffect】 官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。\nwatch对比watchEffect\n都能监听响应式数据的变化，不同的是监听数据变化的方式不同\nwatch：要明确指出监视的数据\nwatchEffect：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。\n示例代码：\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;需求：水温达到50℃，或水位达到20cm，则联系服务器\u0026lt;/h1\u0026gt; 4 \u0026lt;h2 id=\u0026#34;demo\u0026#34;\u0026gt;水温：{{temp}}\u0026lt;/h2\u0026gt; 5 \u0026lt;h2\u0026gt;水位：{{height}}\u0026lt;/h2\u0026gt; 6 \u0026lt;button @click=\u0026#34;changePrice\u0026#34;\u0026gt;水温+1\u0026lt;/button\u0026gt; 7 \u0026lt;button @click=\u0026#34;changeSum\u0026#34;\u0026gt;水位+10\u0026lt;/button\u0026gt; 8 \u0026lt;/div\u0026gt; 9\u0026lt;/template\u0026gt; 10 11\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 12 import {ref,watch,watchEffect} from \u0026#39;vue\u0026#39; 13 // 数据 14 let temp = ref(0) 15 let height = ref(0) 16 17 // 方法 18 function changePrice(){ 19 temp.value += 10 20 } 21 function changeSum(){ 22 height.value += 1 23 } 24 25 // 用watch实现，需要明确的指出要监视：temp、height 26 watch([temp,height],(value)=\u0026gt;{ 27 // 从value中获取最新的temp值、height值 28 const [newTemp,newHeight] = value 29 // 室温达到50℃，或水位达到20cm，立刻联系服务器 30 if(newTemp \u0026gt;= 50 || newHeight \u0026gt;= 20){ 31 console.log(\u0026#39;联系服务器\u0026#39;) 32 } 33 }) 34 35 // 用watchEffect实现，不用 36 const stopWtach = watchEffect(()=\u0026gt;{ 37 // 室温达到50℃，或水位达到20cm，立刻联系服务器 38 if(temp.value \u0026gt;= 50 || height.value \u0026gt;= 20){ 39 console.log(document.getElementById(\u0026#39;demo\u0026#39;)?.innerText) 40 console.log(\u0026#39;联系服务器\u0026#39;) 41 } 42 // 水温达到100，或水位达到50，取消监视 43 if(temp.value === 100 || height.value === 50){ 44 console.log(\u0026#39;清理了\u0026#39;) 45 stopWtach() 46 } 47 }) 48\u0026lt;/script\u0026gt; 3.11. 【标签的 ref 属性】 作用：用于注册模板引用。\n用在普通DOM标签上，获取的是DOM节点。\n用在组件标签上，获取的是组件实例对象。\n用在普通DOM标签上：\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h1 ref=\u0026#34;title1\u0026#34;\u0026gt;尚硅谷\u0026lt;/h1\u0026gt; 4 \u0026lt;h2 ref=\u0026#34;title2\u0026#34;\u0026gt;前端\u0026lt;/h2\u0026gt; 5 \u0026lt;h3 ref=\u0026#34;title3\u0026#34;\u0026gt;Vue\u0026lt;/h3\u0026gt; 6 \u0026lt;input type=\u0026#34;text\u0026#34; ref=\u0026#34;inpt\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 7 \u0026lt;button @click=\u0026#34;showLog\u0026#34;\u0026gt;点我打印内容\u0026lt;/button\u0026gt; 8 \u0026lt;/div\u0026gt; 9\u0026lt;/template\u0026gt; 10 11\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 12 import {ref} from \u0026#39;vue\u0026#39; 13\t14 let title1 = ref() 15 let title2 = ref() 16 let title3 = ref() 17 18 function showLog(){ 19 // 通过id获取元素 20 const t1 = document.getElementById(\u0026#39;title1\u0026#39;) 21 // 打印内容 22 console.log((t1 as HTMLElement).innerText) 23 console.log((\u0026lt;HTMLElement\u0026gt;t1).innerText) 24 console.log(t1?.innerText) 25 26\t/************************************/ 27\t28 // 通过ref获取元素 29 console.log(title1.value) 30 console.log(title2.value) 31 console.log(title3.value) 32 } 33\u0026lt;/script\u0026gt; 用在组件标签上：\n1\u0026lt;!-- 父组件App.vue --\u0026gt; 2\u0026lt;template\u0026gt; 3 \u0026lt;Person ref=\u0026#34;ren\u0026#34;/\u0026gt; 4 \u0026lt;button @click=\u0026#34;test\u0026#34;\u0026gt;测试\u0026lt;/button\u0026gt; 5\u0026lt;/template\u0026gt; 6 7\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;App\u0026#34;\u0026gt; 8 import Person from \u0026#39;./components/Person.vue\u0026#39; 9 import {ref} from \u0026#39;vue\u0026#39; 10 11 let ren = ref() 12 13 function test(){ 14 console.log(ren.value.name) 15 console.log(ren.value.age) 16 } 17\u0026lt;/script\u0026gt; 18 19 20\u0026lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --\u0026gt; 21\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 22 import {ref,defineExpose} from \u0026#39;vue\u0026#39; 23\t// 数据 24 let name = ref(\u0026#39;张三\u0026#39;) 25 let age = ref(18) 26 /****************************/ 27 /****************************/ 28 // 使用defineExpose将组件中的数据交给外部 29 defineExpose({name,age}) 30\u0026lt;/script\u0026gt; 3.12. 【props】 1// 定义一个接口，限制每个Person对象的格式 2export interface PersonInter { 3id:string, 4name:string, 5 age:number 6} 7 8// 定义一个自定义类型Persons 9export type Persons = Array\u0026lt;PersonInter\u0026gt; App.vue中代码：\n1\u0026lt;template\u0026gt; 2\t\u0026lt;Person :list=\u0026#34;persons\u0026#34;/\u0026gt; 3\u0026lt;/template\u0026gt; 4 5\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;App\u0026#34;\u0026gt; 6import Person from \u0026#39;./components/Person.vue\u0026#39; 7import {reactive} from \u0026#39;vue\u0026#39; 8 import {type Persons} from \u0026#39;./types\u0026#39; 9 10 let persons = reactive\u0026lt;Persons\u0026gt;([ 11 {id:\u0026#39;e98219e12\u0026#39;,name:\u0026#39;张三\u0026#39;,age:18}, 12 {id:\u0026#39;e98219e13\u0026#39;,name:\u0026#39;李四\u0026#39;,age:19}, 13 {id:\u0026#39;e98219e14\u0026#39;,name:\u0026#39;王五\u0026#39;,age:20} 14 ]) 15\u0026lt;/script\u0026gt; Person.vue中代码：\n1\u0026lt;template\u0026gt; 2\u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3\u0026lt;ul\u0026gt; 4 \u0026lt;li v-for=\u0026#34;item in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; 5 {{item.name}}--{{item.age}} 6 \u0026lt;/li\u0026gt; 7 \u0026lt;/ul\u0026gt; 8\u0026lt;/div\u0026gt; 9\u0026lt;/template\u0026gt; 10 11\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 12import {defineProps} from \u0026#39;vue\u0026#39; 13import {type PersonInter} from \u0026#39;@/types\u0026#39; 14 15// 第一种写法：仅接收 16// const props = defineProps([\u0026#39;list\u0026#39;]) 17 18// 第二种写法：接收+限制类型 19// defineProps\u0026lt;{list:Persons}\u0026gt;() 20 21// 第三种写法：接收+限制类型+指定默认值+限制必要性 22let props = withDefaults(defineProps\u0026lt;{list?:Persons}\u0026gt;(),{ 23 list:()=\u0026gt;[{id:\u0026#39;asdasg01\u0026#39;,name:\u0026#39;小猪佩奇\u0026#39;,age:18}] 24}) 25console.log(props) 26\u0026lt;/script\u0026gt; 3.13. 【生命周期】 概念：Vue组件实例在创建时要经历一系列的初始化步骤，在此过程中Vue会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子\n规律：\n生命周期整体分为四个阶段，分别是：创建、挂载、更新、销毁，每个阶段都有两个钩子，一前一后。\nVue2的生命周期\n创建阶段：beforeCreate、created\n挂载阶段：beforeMount、mounted\n更新阶段：beforeUpdate、updated\n销毁阶段：beforeDestroy、destroyed\nVue3的生命周期\n创建阶段：setup\n挂载阶段：onBeforeMount、onMounted\n更新阶段：onBeforeUpdate、onUpdated\n卸载阶段：onBeforeUnmount、onUnmounted\n常用的钩子：onMounted(挂载完毕)、onUpdated(更新完毕)、onBeforeUnmount(卸载之前)\n示例代码：\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;person\u0026#34;\u0026gt; 3 \u0026lt;h2\u0026gt;当前求和为：{{ sum }}\u0026lt;/h2\u0026gt; 4 \u0026lt;button @click=\u0026#34;changeSum\u0026#34;\u0026gt;点我sum+1\u0026lt;/button\u0026gt; 5 \u0026lt;/div\u0026gt; 6\u0026lt;/template\u0026gt; 7 8\u0026lt;!-- vue3写法 --\u0026gt; 9\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;Person\u0026#34;\u0026gt; 10 import { 11 ref, 12 onBeforeMount, 13 onMounted, 14 onBeforeUpdate, 15 onUpdated, 16 onBeforeUnmount, 17 onUnmounted 18 } from \u0026#39;vue\u0026#39; 19 20 // 数据 21 let sum = ref(0) 22 // 方法 23 function changeSum() { 24 sum.value += 1 25 } 26 console.log(\u0026#39;setup\u0026#39;) 27 // 生命周期钩子 28 onBeforeMount(()=\u0026gt;{ 29 console.log(\u0026#39;挂载之前\u0026#39;) 30 }) 31 onMounted(()=\u0026gt;{ 32 console.log(\u0026#39;挂载完毕\u0026#39;) 33 }) 34 onBeforeUpdate(()=\u0026gt;{ 35 console.log(\u0026#39;更新之前\u0026#39;) 36 }) 37 onUpdated(()=\u0026gt;{ 38 console.log(\u0026#39;更新完毕\u0026#39;) 39 }) 40 onBeforeUnmount(()=\u0026gt;{ 41 console.log(\u0026#39;卸载之前\u0026#39;) 42 }) 43 onUnmounted(()=\u0026gt;{ 44 console.log(\u0026#39;卸载完毕\u0026#39;) 45 }) 46\u0026lt;/script\u0026gt; 3.14. 【自定义hook】 什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装，类似于vue2.x中的mixin。\n自定义hook的优势：复用代码, 让setup中的逻辑更清楚易懂。\n示例代码：\nuseSum.ts中内容如下：\n1import {ref,onMounted} from \u0026#39;vue\u0026#39; 2 3export default function(){ 4 let sum = ref(0) 5 6 const increment = ()=\u0026gt;{ 7 sum.value += 1 8 } 9 const decrement = ()=\u0026gt;{ 10 sum.value -= 1 11 } 12 onMounted(()=\u0026gt;{ 13 increment() 14 }) 15 16 //向外部暴露数据 17 return {sum,increment,decrement} 18}\tuseDog.ts中内容如下：\n1import {reactive,onMounted} from \u0026#39;vue\u0026#39; 2import axios,{AxiosError} from \u0026#39;axios\u0026#39; 3 4export default function(){ 5 let dogList = reactive\u0026lt;string[]\u0026gt;([]) 6 7 // 方法 8 async function getDog(){ 9 try { 10 // 发请求 11 let {data} = await axios.get(\u0026#39;https://dog.ceo/api/breed/pembroke/images/random\u0026#39;) 12 // 维护数据 13 dogList.push(data.message) 14 } catch (error) { 15 // 处理错误 16 const err = \u0026lt;AxiosError\u0026gt;error 17 console.log(err.message) 18 } 19 } 20 21 // 挂载钩子 22 onMounted(()=\u0026gt;{ 23 getDog() 24 }) 25 26 //向外部暴露数据 27 return {dogList,getDog} 28} 组件中具体使用：\n1\u0026lt;template\u0026gt; 2 \u0026lt;h2\u0026gt;当前求和为：{{sum}}\u0026lt;/h2\u0026gt; 3 \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;点我+1\u0026lt;/button\u0026gt; 4 \u0026lt;button @click=\u0026#34;decrement\u0026#34;\u0026gt;点我-1\u0026lt;/button\u0026gt; 5 \u0026lt;hr\u0026gt; 6 \u0026lt;img v-for=\u0026#34;(u,index) in dogList.urlList\u0026#34; :key=\u0026#34;index\u0026#34; :src=\u0026#34;(u as string)\u0026#34;\u0026gt; 7 \u0026lt;span v-show=\u0026#34;dogList.isLoading\u0026#34;\u0026gt;加载中......\u0026lt;/span\u0026gt;\u0026lt;br\u0026gt; 8 \u0026lt;button @click=\u0026#34;getDog\u0026#34;\u0026gt;再来一只狗\u0026lt;/button\u0026gt; 9\u0026lt;/template\u0026gt; 10 11\u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; 12 import {defineComponent} from \u0026#39;vue\u0026#39; 13 14 export default defineComponent({ 15 name:\u0026#39;App\u0026#39;, 16 }) 17\u0026lt;/script\u0026gt; 18 19\u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; 20 import useSum from \u0026#39;./hooks/useSum\u0026#39; 21 import useDog from \u0026#39;./hooks/useDog\u0026#39; 22 23 let {sum,increment,decrement} = useSum() 24 let {dogList,getDog} = useDog() 25\u0026lt;/script\u0026gt; 4. 路由 4.1. 【对路由的理解】 4.2. 【基本切换效果】 Vue3中要使用vue-router的最新版本，目前是4版本。\n路由配置文件代码如下：\n1import {createRouter,createWebHistory} from \u0026#39;vue-router\u0026#39; 2import Home from \u0026#39;@/pages/Home.vue\u0026#39; 3import News from \u0026#39;@/pages/News.vue\u0026#39; 4import About from \u0026#39;@/pages/About.vue\u0026#39; 5 6const router = createRouter({ 7\thistory:createWebHistory(), 8\troutes:[ 9\t{ 10\tpath:\u0026#39;/home\u0026#39;, 11\tcomponent:Home 12\t}, 13\t{ 14\tpath:\u0026#39;/about\u0026#39;, 15\tcomponent:About 16\t} 17\t] 18}) 19export default router main.ts代码如下：\n1import router from \u0026#39;./router/index\u0026#39; 2app.use(router) 3 4app.mount(\u0026#39;#app\u0026#39;) App.vue代码如下\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;app\u0026#34;\u0026gt; 3 \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;Vue路由测试\u0026lt;/h2\u0026gt; 4 \u0026lt;!-- 导航区 --\u0026gt; 5 \u0026lt;div class=\u0026#34;navigate\u0026#34;\u0026gt; 6 \u0026lt;RouterLink to=\u0026#34;/home\u0026#34; active-class=\u0026#34;active\u0026#34;\u0026gt;首页\u0026lt;/RouterLink\u0026gt; 7 \u0026lt;RouterLink to=\u0026#34;/news\u0026#34; active-class=\u0026#34;active\u0026#34;\u0026gt;新闻\u0026lt;/RouterLink\u0026gt; 8 \u0026lt;RouterLink to=\u0026#34;/about\u0026#34; active-class=\u0026#34;active\u0026#34;\u0026gt;关于\u0026lt;/RouterLink\u0026gt; 9 \u0026lt;/div\u0026gt; 10 \u0026lt;!-- 展示区 --\u0026gt; 11 \u0026lt;div class=\u0026#34;main-content\u0026#34;\u0026gt; 12 \u0026lt;RouterView\u0026gt;\u0026lt;/RouterView\u0026gt; 13 \u0026lt;/div\u0026gt; 14 \u0026lt;/div\u0026gt; 15\u0026lt;/template\u0026gt; 16 17\u0026lt;script lang=\u0026#34;ts\u0026#34; setup name=\u0026#34;App\u0026#34;\u0026gt; 18 import {RouterLink,RouterView} from \u0026#39;vue-router\u0026#39; 19\u0026lt;/script\u0026gt; 4.3. 【两个注意点】 路由组件通常存放在pages 或 views文件夹，一般组件通常存放在components文件夹。\n通过点击导航，视觉效果上“消失” 了的路由组件，默认是被卸载掉的，需要的时候再去挂载。\n4.4.【路由器工作模式】 history模式\n优点：URL更加美观，不带有#，更接近传统的网站URL。\n缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有404错误。\n1const router = createRouter({ 2\thistory:createWebHistory(), //history模式 3\t/******/ 4}) hash模式\n优点：兼容性更好，因为不需要服务器端处理路径。\n缺点：URL带有#不太美观，且在SEO优化方面相对较差。\n1const router = createRouter({ 2\thistory:createWebHashHistory(), //hash模式 3\t/******/ 4}) 4.5. 【to的两种写法】 1\u0026lt;!-- 第一种：to的字符串写法 --\u0026gt; 2\u0026lt;router-link active-class=\u0026#34;active\u0026#34; to=\u0026#34;/home\u0026#34;\u0026gt;主页\u0026lt;/router-link\u0026gt; 3 4\u0026lt;!-- 第二种：to的对象写法 --\u0026gt; 5\u0026lt;router-link active-class=\u0026#34;active\u0026#34; :to=\u0026#34;{path:\u0026#39;/home\u0026#39;}\u0026#34;\u0026gt;Home\u0026lt;/router-link\u0026gt; 4.6. 【命名路由】 作用：可以简化路由跳转及传参（后面就讲）。\n给路由规则命名：\n1routes:[ 2 { 3 name:\u0026#39;zhuye\u0026#39;, 4 path:\u0026#39;/home\u0026#39;, 5 component:Home 6 }, 7 { 8 name:\u0026#39;xinwen\u0026#39;, 9 path:\u0026#39;/news\u0026#39;, 10 component:News, 11 }, 12 { 13 name:\u0026#39;guanyu\u0026#39;, 14 path:\u0026#39;/about\u0026#39;, 15 component:About 16 } 17] 跳转路由：\n1\u0026lt;!--简化前：需要写完整的路径（to的字符串写法） --\u0026gt; 2\u0026lt;router-link to=\u0026#34;/news/detail\u0026#34;\u0026gt;跳转\u0026lt;/router-link\u0026gt; 3 4\u0026lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --\u0026gt; 5\u0026lt;router-link :to=\u0026#34;{name:\u0026#39;guanyu\u0026#39;}\u0026#34;\u0026gt;跳转\u0026lt;/router-link\u0026gt; 4.7. 【嵌套路由】 编写News的子路由：Detail.vue\n配置路由规则，使用children配置项：\n1const router = createRouter({ 2 history:createWebHistory(), 3\troutes:[ 4\t{ 5\tname:\u0026#39;zhuye\u0026#39;, 6\tpath:\u0026#39;/home\u0026#39;, 7\tcomponent:Home 8\t}, 9\t{ 10\tname:\u0026#39;xinwen\u0026#39;, 11\tpath:\u0026#39;/news\u0026#39;, 12\tcomponent:News, 13\tchildren:[ 14\t{ 15\tname:\u0026#39;xiang\u0026#39;, 16\tpath:\u0026#39;detail\u0026#39;, 17\tcomponent:Detail 18\t} 19\t] 20\t}, 21\t{ 22\tname:\u0026#39;guanyu\u0026#39;, 23\tpath:\u0026#39;/about\u0026#39;, 24\tcomponent:About 25\t} 26\t] 27}) 28export default router 跳转路由（记得要加完整路径）：\n1\u0026lt;router-link to=\u0026#34;/news/detail\u0026#34;\u0026gt;xxxx\u0026lt;/router-link\u0026gt; 2\u0026lt;!-- 或 --\u0026gt; 3\u0026lt;router-link :to=\u0026#34;{path:\u0026#39;/news/detail\u0026#39;}\u0026#34;\u0026gt;xxxx\u0026lt;/router-link\u0026gt; 记得去Home组件中预留一个\u0026lt;router-view\u0026gt;\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt; 3 \u0026lt;nav class=\u0026#34;news-list\u0026#34;\u0026gt; 4 \u0026lt;RouterLink v-for=\u0026#34;news in newsList\u0026#34; :key=\u0026#34;news.id\u0026#34; :to=\u0026#34;{path:\u0026#39;/news/detail\u0026#39;}\u0026#34;\u0026gt; 5 {{news.name}} 6 \u0026lt;/RouterLink\u0026gt; 7 \u0026lt;/nav\u0026gt; 8 \u0026lt;div class=\u0026#34;news-detail\u0026#34;\u0026gt; 9 \u0026lt;RouterView/\u0026gt; 10 \u0026lt;/div\u0026gt; 11 \u0026lt;/div\u0026gt; 12\u0026lt;/template\u0026gt; 4.8. 【路由传参】 query参数 传递参数\n1\u0026lt;!-- 跳转并携带query参数（to的字符串写法） --\u0026gt; 2\u0026lt;router-link to=\u0026#34;/news/detail?a=1\u0026amp;b=2\u0026amp;content=欢迎你\u0026#34;\u0026gt; 3\t跳转 4\u0026lt;/router-link\u0026gt; 5 6\u0026lt;!-- 跳转并携带query参数（to的对象写法） --\u0026gt; 7\u0026lt;RouterLink 8 :to=\u0026#34;{ 9 //name:\u0026#39;xiang\u0026#39;, //用name也可以跳转 10 path:\u0026#39;/news/detail\u0026#39;, 11 query:{ 12 id:news.id, 13 title:news.title, 14 content:news.content 15 } 16 }\u0026#34; 17\u0026gt; 18 {{news.title}} 19\u0026lt;/RouterLink\u0026gt; 接收参数：\n1import {useRoute} from \u0026#39;vue-router\u0026#39; 2const route = useRoute() 3// 打印query参数 4console.log(route.query) params参数 传递参数\n1\u0026lt;!-- 跳转并携带params参数（to的字符串写法） --\u0026gt; 2\u0026lt;RouterLink :to=\u0026#34;`/news/detail/001/新闻001/内容001`\u0026#34;\u0026gt;{{news.title}}\u0026lt;/RouterLink\u0026gt; 3 4\u0026lt;!-- 跳转并携带params参数（to的对象写法） --\u0026gt; 5\u0026lt;RouterLink 6 :to=\u0026#34;{ 7 name:\u0026#39;xiang\u0026#39;, //用name跳转 8 params:{ 9 id:news.id, 10 title:news.title, 11 content:news.title 12 } 13 }\u0026#34; 14\u0026gt; 15 {{news.title}} 16\u0026lt;/RouterLink\u0026gt; 接收参数：\n1import {useRoute} from \u0026#39;vue-router\u0026#39; 2const route = useRoute() 3// 打印params参数 4console.log(route.params) 备注1：传递params参数时，若使用to的对象写法，必须使用name配置项，不能用path。\n备注2：传递params参数时，需要提前在规则中占位。\n4.9. 【路由的props配置】 作用：让路由组件更方便的收到参数（可以将路由参数作为props传给组件）\n1{ 2\tname:\u0026#39;xiang\u0026#39;, 3\tpath:\u0026#39;detail/:id/:title/:content\u0026#39;, 4\tcomponent:Detail, 5 6 // props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件 7 // props:{a:1,b:2,c:3}, 8 9 // props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件 10 // props:true 11 12 // props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件 13 props(route){ 14 return route.query 15 } 16} 4.10. 【 replace属性】 作用：控制路由跳转时操作浏览器历史记录的模式。\n浏览器的历史记录有两种写入方式：分别为push和replace：\npush是追加历史记录（默认值）。 replace是替换当前记录。 开启replace模式：\n1\u0026lt;RouterLink replace .......\u0026gt;News\u0026lt;/RouterLink\u0026gt; 4.11. 【编程式导航】 路由组件的两个重要的属性：$route和$router变成了两个hooks\n1import {useRoute,useRouter} from \u0026#39;vue-router\u0026#39; 2 3const route = useRoute() 4const router = useRouter() 5 6console.log(route.query) 7console.log(route.parmas) 8console.log(router.push) 9console.log(router.replace) 4.12. 【重定向】 作用：将特定的路径，重新定向到已有路由。\n具体编码：\n1{ 2 path:\u0026#39;/\u0026#39;, 3 redirect:\u0026#39;/about\u0026#39; 4} 5. pinia 5.1【准备一个效果】 5.2【搭建 pinia 环境】 第一步：npm install pinia\n第二步：操作src/main.ts\n1import { createApp } from \u0026#39;vue\u0026#39; 2import App from \u0026#39;./App.vue\u0026#39; 3 4/* 引入createPinia，用于创建pinia */ 5import { createPinia } from \u0026#39;pinia\u0026#39; 6 7/* 创建pinia */ 8const pinia = createPinia() 9const app = createApp(App) 10 11/* 使用插件 */{} 12app.use(pinia) 13app.mount(\u0026#39;#app\u0026#39;) 此时开发者工具中已经有了pinia选项\n5.3【存储+读取数据】 Store是一个保存：状态、业务逻辑 的实体，每个组件都可以读取、写入它。\n它有三个概念：state、getter、action，相当于组件中的： data、 computed 和 methods。\n具体编码：src/store/count.ts\n1// 引入defineStore用于创建store 2import {defineStore} from \u0026#39;pinia\u0026#39; 3 4// 定义并暴露一个store 5export const useCountStore = defineStore(\u0026#39;count\u0026#39;,{ 6 // 动作 7 actions:{}, 8 // 状态 9 state(){ 10 return { 11 sum:6 12 } 13 }, 14 // 计算 15 getters:{} 16}) 具体编码：src/store/talk.ts\n1// 引入defineStore用于创建store 2import {defineStore} from \u0026#39;pinia\u0026#39; 3 4// 定义并暴露一个store 5export const useTalkStore = defineStore(\u0026#39;talk\u0026#39;,{ 6 // 动作 7 actions:{}, 8 // 状态 9 state(){ 10 return { 11 talkList:[ 12 {id:\u0026#39;yuysada01\u0026#39;,content:\u0026#39;你今天有点怪，哪里怪？怪好看的！\u0026#39;}, 13 {id:\u0026#39;yuysada02\u0026#39;,content:\u0026#39;草莓、蓝莓、蔓越莓，你想我了没？\u0026#39;}, 14 {id:\u0026#39;yuysada03\u0026#39;,content:\u0026#39;心里给你留了一块地，我的死心塌地\u0026#39;} 15 ] 16 } 17 }, 18 // 计算 19 getters:{} 20}) 组件中使用state中的数据\n1\u0026lt;template\u0026gt; 2 \u0026lt;h2\u0026gt;当前求和为：{{ sumStore.sum }}\u0026lt;/h2\u0026gt; 3\u0026lt;/template\u0026gt; 4 5\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;Count\u0026#34;\u0026gt; 6 // 引入对应的useXxxxxStore\t7 import {useSumStore} from \u0026#39;@/store/sum\u0026#39; 8 9 // 调用useXxxxxStore得到对应的store 10 const sumStore = useSumStore() 11\u0026lt;/script\u0026gt; 1\u0026lt;template\u0026gt; 2\t\u0026lt;ul\u0026gt; 3 \u0026lt;li v-for=\u0026#34;talk in talkStore.talkList\u0026#34; :key=\u0026#34;talk.id\u0026#34;\u0026gt; 4 {{ talk.content }} 5 \u0026lt;/li\u0026gt; 6 \u0026lt;/ul\u0026gt; 7\u0026lt;/template\u0026gt; 8 9\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;Count\u0026#34;\u0026gt; 10 import axios from \u0026#39;axios\u0026#39; 11 import {useTalkStore} from \u0026#39;@/store/talk\u0026#39; 12 13 const talkStore = useTalkStore() 14\u0026lt;/script\u0026gt; 5.4.【修改数据】(三种方式) 第一种修改方式，直接修改\n1countStore.sum = 666 第二种修改方式：批量修改\n1countStore.$patch({ 2 sum:999, 3 school:\u0026#39;atguigu\u0026#39; 4}) 第三种修改方式：借助action修改（action中可以编写一些业务逻辑）\n1import { defineStore } from \u0026#39;pinia\u0026#39; 2 3export const useCountStore = defineStore(\u0026#39;count\u0026#39;, { 4 /*************/ 5 actions: { 6 //加 7 increment(value:number) { 8 if (this.sum \u0026lt; 10) { 9 //操作countStore中的sum 10 this.sum += value 11 } 12 }, 13 //减 14 decrement(value:number){ 15 if(this.sum \u0026gt; 1){ 16 this.sum -= value 17 } 18 } 19 }, 20 /*************/ 21}) 组件中调用action即可\n1// 使用countStore 2const countStore = useCountStore() 3 4// 调用对应action 5countStore.incrementOdd(n.value) 5.5.【storeToRefs】 借助storeToRefs将store中的数据转为ref对象，方便在模板中使用。 注意：pinia提供的storeToRefs只会将数据做转换，而Vue的toRefs会转换store中数据。 1\u0026lt;template\u0026gt; 2\t\u0026lt;div class=\u0026#34;count\u0026#34;\u0026gt; 3\t\u0026lt;h2\u0026gt;当前求和为：{{sum}}\u0026lt;/h2\u0026gt; 4\t\u0026lt;/div\u0026gt; 5\u0026lt;/template\u0026gt; 6 7\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;Count\u0026#34;\u0026gt; 8 import { useCountStore } from \u0026#39;@/store/count\u0026#39; 9 /* 引入storeToRefs */ 10 import { storeToRefs } from \u0026#39;pinia\u0026#39; 11 12\t/* 得到countStore */ 13 const countStore = useCountStore() 14 /* 使用storeToRefs转换countStore，随后解构 */ 15 const {sum} = storeToRefs(countStore) 16\u0026lt;/script\u0026gt; 5.6.【getters】 概念：当state中的数据，需要经过处理后再使用时，可以使用getters配置。\n追加getters配置。\n1// 引入defineStore用于创建store 2import {defineStore} from \u0026#39;pinia\u0026#39; 3 4// 定义并暴露一个store 5export const useCountStore = defineStore(\u0026#39;count\u0026#39;,{ 6 // 动作 7 actions:{ 8 /************/ 9 }, 10 // 状态 11 state(){ 12 return { 13 sum:1, 14 school:\u0026#39;atguigu\u0026#39; 15 } 16 }, 17 // 计算 18 getters:{ 19 bigSum:(state):number =\u0026gt; state.sum *10, 20 upperSchool():string{ 21 return this. school.toUpperCase() 22 } 23 } 24}) 组件中读取数据：\n1const {increment,decrement} = countStore 2let {sum,school,bigSum,upperSchool} = storeToRefs(countStore) 5.7.【$subscribe】 通过 store 的 $subscribe() 方法侦听 state 及其变化\n1talkStore.$subscribe((mutate,state)=\u0026gt;{ 2 console.log(\u0026#39;LoveTalk\u0026#39;,mutate,state) 3 localStorage.setItem(\u0026#39;talk\u0026#39;,JSON.stringify(talkList.value)) 4}) 5.8. 【store组合式写法】 1import {defineStore} from \u0026#39;pinia\u0026#39; 2import axios from \u0026#39;axios\u0026#39; 3import {nanoid} from \u0026#39;nanoid\u0026#39; 4import {reactive} from \u0026#39;vue\u0026#39; 5 6export const useTalkStore = defineStore(\u0026#39;talk\u0026#39;,()=\u0026gt;{ 7 // talkList就是state 8 const talkList = reactive( 9 JSON.parse(localStorage.getItem(\u0026#39;talkList\u0026#39;) as string) || [] 10 ) 11 12 // getATalk函数相当于action 13 async function getATalk(){ 14 // 发请求，下面这行的写法是：连续解构赋值+重命名 15 let {data:{content:title}} = await axios.get(\u0026#39;https://api.uomg.com/api/rand.qinghua?format=json\u0026#39;) 16 // 把请求回来的字符串，包装成一个对象 17 let obj = {id:nanoid(),title} 18 // 放到数组中 19 talkList.unshift(obj) 20 } 21 return {talkList,getATalk} 22}) 6. 组件通信 Vue3组件通信和Vue2的区别：\n移出事件总线，使用mitt代替。 vuex换成了pinia。 把.sync优化到了v-model里面了。 把$listeners所有的东西，合并到$attrs中了。 $children被砍掉了。 常见搭配形式：\n6.1. 【props】 概述：props是使用频率最高的一种通信方式，常用与 ：父 ↔ 子。\n若 父传子：属性值是非函数。 若 子传父：属性值是函数。 父组件：\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;father\u0026#34;\u0026gt; 3 \u0026lt;h3\u0026gt;父组件，\u0026lt;/h3\u0026gt; 4\t\u0026lt;h4\u0026gt;我的车：{{ car }}\u0026lt;/h4\u0026gt; 5\t\u0026lt;h4\u0026gt;儿子给的玩具：{{ toy }}\u0026lt;/h4\u0026gt; 6\t\u0026lt;Child :car=\u0026#34;car\u0026#34; :getToy=\u0026#34;getToy\u0026#34;/\u0026gt; 7 \u0026lt;/div\u0026gt; 8\u0026lt;/template\u0026gt; 9 10\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;Father\u0026#34;\u0026gt; 11\timport Child from \u0026#39;./Child.vue\u0026#39; 12\timport { ref } from \u0026#34;vue\u0026#34;; 13\t// 数据 14\tconst car = ref(\u0026#39;奔驰\u0026#39;) 15\tconst toy = ref() 16\t// 方法 17\tfunction getToy(value:string){ 18\ttoy.value = value 19\t} 20\u0026lt;/script\u0026gt; 子组件\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt; 3 \u0026lt;h3\u0026gt;子组件\u0026lt;/h3\u0026gt; 4\t\u0026lt;h4\u0026gt;我的玩具：{{ toy }}\u0026lt;/h4\u0026gt; 5\t\u0026lt;h4\u0026gt;父给我的车：{{ car }}\u0026lt;/h4\u0026gt; 6\t\u0026lt;button @click=\u0026#34;getToy(toy)\u0026#34;\u0026gt;玩具给父亲\u0026lt;/button\u0026gt; 7 \u0026lt;/div\u0026gt; 8\u0026lt;/template\u0026gt; 9 10\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;Child\u0026#34;\u0026gt; 11\timport { ref } from \u0026#34;vue\u0026#34;; 12\tconst toy = ref(\u0026#39;奥特曼\u0026#39;) 13\t14\tdefineProps([\u0026#39;car\u0026#39;,\u0026#39;getToy\u0026#39;]) 15\u0026lt;/script\u0026gt; 6.2. 【自定义事件】 概述：自定义事件常用于：子 =\u0026gt; 父。 注意区分好：原生事件、自定义事件。 原生事件： 事件名是特定的（click、mosueenter等等） 事件对象$event: 是包含事件相关信息的对象（pageX、pageY、target、keyCode） 自定义事件： 事件名是任意名称 事件对象$event: 是调用emit时所提供的数据，可以是任意类型！！！ 示例：\n1\u0026lt;!--在父组件中，给子组件绑定自定义事件：--\u0026gt; 2\u0026lt;Child @send-toy=\u0026#34;toy = $event\u0026#34;/\u0026gt; 3 4\u0026lt;!--注意区分原生事件与自定义事件中的$event--\u0026gt; 5\u0026lt;button @click=\u0026#34;toy = $event\u0026#34;\u0026gt;测试\u0026lt;/button\u0026gt; 1//子组件中，触发事件： 2this.$emit(\u0026#39;send-toy\u0026#39;, 具体数据) 6.3. 【mitt】 概述：与消息订阅与发布（pubsub）功能类似，可以实现任意组件间通信。\n安装mitt\n1npm i mitt 新建文件：src\\utils\\emitter.ts\n1// 引入mitt 2import mitt from \u0026#34;mitt\u0026#34;; 3 4// 创建emitter 5const emitter = mitt() 6 7/* 8 // 绑定事件 9 emitter.on(\u0026#39;abc\u0026#39;,(value)=\u0026gt;{ 10 console.log(\u0026#39;abc事件被触发\u0026#39;,value) 11 }) 12 emitter.on(\u0026#39;xyz\u0026#39;,(value)=\u0026gt;{ 13 console.log(\u0026#39;xyz事件被触发\u0026#39;,value) 14 }) 15 16 setInterval(() =\u0026gt; { 17 // 触发事件 18 emitter.emit(\u0026#39;abc\u0026#39;,666) 19 emitter.emit(\u0026#39;xyz\u0026#39;,777) 20 }, 1000); 21 22 setTimeout(() =\u0026gt; { 23 // 清理事件 24 emitter.all.clear() 25 }, 3000); 26*/ 27 28// 创建并暴露mitt 29export default emitter 接收数据的组件中：绑定事件、同时在销毁前解绑事件：\n1import emitter from \u0026#34;@/utils/emitter\u0026#34;; 2import { onUnmounted } from \u0026#34;vue\u0026#34;; 3 4// 绑定事件 5emitter.on(\u0026#39;send-toy\u0026#39;,(value)=\u0026gt;{ 6 console.log(\u0026#39;send-toy事件被触发\u0026#39;,value) 7}) 8 9onUnmounted(()=\u0026gt;{ 10 // 解绑事件 11 emitter.off(\u0026#39;send-toy\u0026#39;) 12}) 【第三步】：提供数据的组件，在合适的时候触发事件\n1import emitter from \u0026#34;@/utils/emitter\u0026#34;; 2 3function sendToy(){ 4 // 触发事件 5 emitter.emit(\u0026#39;send-toy\u0026#39;,toy.value) 6} 注意这个重要的内置关系，总线依赖着这个内置关系\n6.4.【v-model】 概述：实现 父↔子 之间相互通信。\n前序知识 —— v-model的本质\n1\u0026lt;!-- 使用v-model指令 --\u0026gt; 2\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;userName\u0026#34;\u0026gt; 3 4\u0026lt;!-- v-model的本质是下面这行代码 --\u0026gt; 5\u0026lt;input 6 type=\u0026#34;text\u0026#34; 7 :value=\u0026#34;userName\u0026#34; 8 @input=\u0026#34;userName =(\u0026lt;HTMLInputElement\u0026gt;$event.target).value\u0026#34; 9\u0026gt; 组件标签上的v-model的本质：:moldeValue ＋ update:modelValue事件。\n1\u0026lt;!-- 组件标签上使用v-model指令 --\u0026gt; 2\u0026lt;AtguiguInput v-model=\u0026#34;userName\u0026#34;/\u0026gt; 3 4\u0026lt;!-- 组件标签上v-model的本质 --\u0026gt; 5\u0026lt;AtguiguInput :modelValue=\u0026#34;userName\u0026#34; @update:model-value=\u0026#34;userName = $event\u0026#34;/\u0026gt; AtguiguInput组件中：\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; 3 \u0026lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --\u0026gt; 4\t\u0026lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--\u0026gt; 5 \u0026lt;input 6 type=\u0026#34;text\u0026#34; 7 :value=\u0026#34;modelValue\u0026#34; 8 @input=\u0026#34;emit(\u0026#39;update:model-value\u0026#39;,$event.target.value)\u0026#34; 9 \u0026gt; 10 \u0026lt;/div\u0026gt; 11\u0026lt;/template\u0026gt; 12 13\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;AtguiguInput\u0026#34;\u0026gt; 14 // 接收props 15 defineProps([\u0026#39;modelValue\u0026#39;]) 16 // 声明事件 17 const emit = defineEmits([\u0026#39;update:model-value\u0026#39;]) 18\u0026lt;/script\u0026gt; 也可以更换value，例如改成abc\n1\u0026lt;!-- 也可以更换value，例如改成abc--\u0026gt; 2\u0026lt;AtguiguInput v-model:abc=\u0026#34;userName\u0026#34;/\u0026gt; 3 4\u0026lt;!-- 上面代码的本质如下 --\u0026gt; 5\u0026lt;AtguiguInput :abc=\u0026#34;userName\u0026#34; @update:abc=\u0026#34;userName = $event\u0026#34;/\u0026gt; AtguiguInput组件中：\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; 3 \u0026lt;input 4 type=\u0026#34;text\u0026#34; 5 :value=\u0026#34;abc\u0026#34; 6 @input=\u0026#34;emit(\u0026#39;update:abc\u0026#39;,$event.target.value)\u0026#34; 7 \u0026gt; 8 \u0026lt;/div\u0026gt; 9\u0026lt;/template\u0026gt; 10 11\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;AtguiguInput\u0026#34;\u0026gt; 12 // 接收props 13 defineProps([\u0026#39;abc\u0026#39;]) 14 // 声明事件 15 const emit = defineEmits([\u0026#39;update:abc\u0026#39;]) 16\u0026lt;/script\u0026gt; 如果value可以更换，那么就可以在组件标签上多次使用v-model\n1\u0026lt;AtguiguInput v-model:abc=\u0026#34;userName\u0026#34; v-model:xyz=\u0026#34;password\u0026#34;/\u0026gt; 6.5.【$attrs 】 概述：$attrs用于实现当前组件的父组件，向当前组件的子组件通信（祖→孙）。\n具体说明：$attrs是一个对象，包含所有父组件传入的标签属性。\n注意：$attrs会自动排除props中声明的属性(可以认为声明过的 props 被子组件自己“消费”了)\n父组件：\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;father\u0026#34;\u0026gt; 3 \u0026lt;h3\u0026gt;父组件\u0026lt;/h3\u0026gt; 4\t\u0026lt;Child :a=\u0026#34;a\u0026#34; :b=\u0026#34;b\u0026#34; :c=\u0026#34;c\u0026#34; :d=\u0026#34;d\u0026#34; v-bind=\u0026#34;{x:100,y:200}\u0026#34; :updateA=\u0026#34;updateA\u0026#34;/\u0026gt; 5 \u0026lt;/div\u0026gt; 6\u0026lt;/template\u0026gt; 7 8\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;Father\u0026#34;\u0026gt; 9\timport Child from \u0026#39;./Child.vue\u0026#39; 10\timport { ref } from \u0026#34;vue\u0026#34;; 11\tlet a = ref(1) 12\tlet b = ref(2) 13\tlet c = ref(3) 14\tlet d = ref(4) 15 16\tfunction updateA(value){ 17\ta.value = value 18\t} 19\u0026lt;/script\u0026gt; 子组件：\n1\u0026lt;template\u0026gt; 2\t\u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt; 3\t\u0026lt;h3\u0026gt;子组件\u0026lt;/h3\u0026gt; 4\t\u0026lt;GrandChild v-bind=\u0026#34;$attrs\u0026#34;/\u0026gt; 5\t\u0026lt;/div\u0026gt; 6\u0026lt;/template\u0026gt; 7 8\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;Child\u0026#34;\u0026gt; 9\timport GrandChild from \u0026#39;./GrandChild.vue\u0026#39; 10\u0026lt;/script\u0026gt; 孙组件：\n1\u0026lt;template\u0026gt; 2\t\u0026lt;div class=\u0026#34;grand-child\u0026#34;\u0026gt; 3\t\u0026lt;h3\u0026gt;孙组件\u0026lt;/h3\u0026gt; 4\t\u0026lt;h4\u0026gt;a：{{ a }}\u0026lt;/h4\u0026gt; 5\t\u0026lt;h4\u0026gt;b：{{ b }}\u0026lt;/h4\u0026gt; 6\t\u0026lt;h4\u0026gt;c：{{ c }}\u0026lt;/h4\u0026gt; 7\t\u0026lt;h4\u0026gt;d：{{ d }}\u0026lt;/h4\u0026gt; 8\t\u0026lt;h4\u0026gt;x：{{ x }}\u0026lt;/h4\u0026gt; 9\t\u0026lt;h4\u0026gt;y：{{ y }}\u0026lt;/h4\u0026gt; 10\t\u0026lt;button @click=\u0026#34;updateA(666)\u0026#34;\u0026gt;点我更新A\u0026lt;/button\u0026gt; 11\t\u0026lt;/div\u0026gt; 12\u0026lt;/template\u0026gt; 13 14\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;GrandChild\u0026#34;\u0026gt; 15\tdefineProps([\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;d\u0026#39;,\u0026#39;x\u0026#39;,\u0026#39;y\u0026#39;,\u0026#39;updateA\u0026#39;]) 16\u0026lt;/script\u0026gt; 6.6. 【$refs、$parent】 概述：\n$refs用于 ：父→子。 $parent用于：子→父。 原理如下：\n属性 说明 $refs 值为对象，包含所有被ref属性标识的DOM元素或组件实例。 $parent 值为对象，当前组件的父组件实例对象。 6.7. 【provide、inject】 概述：实现祖孙组件直接通信\n具体使用：\n在祖先组件中通过provide配置向后代组件提供数据 在后代组件中通过inject配置来声明接收数据 具体编码：\n【第一步】父组件中，使用provide提供数据\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;father\u0026#34;\u0026gt; 3 \u0026lt;h3\u0026gt;父组件\u0026lt;/h3\u0026gt; 4 \u0026lt;h4\u0026gt;资产：{{ money }}\u0026lt;/h4\u0026gt; 5 \u0026lt;h4\u0026gt;汽车：{{ car }}\u0026lt;/h4\u0026gt; 6 \u0026lt;button @click=\u0026#34;money += 1\u0026#34;\u0026gt;资产+1\u0026lt;/button\u0026gt; 7 \u0026lt;button @click=\u0026#34;car.price += 1\u0026#34;\u0026gt;汽车价格+1\u0026lt;/button\u0026gt; 8 \u0026lt;Child/\u0026gt; 9 \u0026lt;/div\u0026gt; 10\u0026lt;/template\u0026gt; 11 12\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;Father\u0026#34;\u0026gt; 13 import Child from \u0026#39;./Child.vue\u0026#39; 14 import { ref,reactive,provide } from \u0026#34;vue\u0026#34;; 15 // 数据 16 let money = ref(100) 17 let car = reactive({ 18 brand:\u0026#39;奔驰\u0026#39;, 19 price:100 20 }) 21 // 用于更新money的方法 22 function updateMoney(value:number){ 23 money.value += value 24 } 25 // 提供数据 26 provide(\u0026#39;moneyContext\u0026#39;,{money,updateMoney}) 27 provide(\u0026#39;car\u0026#39;,car) 28\u0026lt;/script\u0026gt; 注意：子组件中不用编写任何东西，是不受到任何打扰的\n【第二步】孙组件中使用inject配置项接受数据。\n1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;grand-child\u0026#34;\u0026gt; 3 \u0026lt;h3\u0026gt;我是孙组件\u0026lt;/h3\u0026gt; 4 \u0026lt;h4\u0026gt;资产：{{ money }}\u0026lt;/h4\u0026gt; 5 \u0026lt;h4\u0026gt;汽车：{{ car }}\u0026lt;/h4\u0026gt; 6 \u0026lt;button @click=\u0026#34;updateMoney(6)\u0026#34;\u0026gt;点我\u0026lt;/button\u0026gt; 7 \u0026lt;/div\u0026gt; 8\u0026lt;/template\u0026gt; 9 10\u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;GrandChild\u0026#34;\u0026gt; 11 import { inject } from \u0026#39;vue\u0026#39;; 12 // 注入数据 13 let {money,updateMoney} = inject(\u0026#39;moneyContext\u0026#39;,{money:0,updateMoney:(x:number)=\u0026gt;{}}) 14 let car = inject(\u0026#39;car\u0026#39;) 15\u0026lt;/script\u0026gt; 6.8. 【pinia】 参考之前pinia部分的讲解\n6.9. 【slot】 1. 默认插槽 1父组件中： 2 \u0026lt;Category title=\u0026#34;今日热门游戏\u0026#34;\u0026gt; 3 \u0026lt;ul\u0026gt; 4 \u0026lt;li v-for=\u0026#34;g in games\u0026#34; :key=\u0026#34;g.id\u0026#34;\u0026gt;{{ g.name }}\u0026lt;/li\u0026gt; 5 \u0026lt;/ul\u0026gt; 6 \u0026lt;/Category\u0026gt; 7子组件中： 8 \u0026lt;template\u0026gt; 9 \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt; 10 \u0026lt;h3\u0026gt;{{ title }}\u0026lt;/h3\u0026gt; 11 \u0026lt;!-- 默认插槽 --\u0026gt; 12 \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; 13 \u0026lt;/div\u0026gt; 14 \u0026lt;/template\u0026gt; 2. 具名插槽 1父组件中： 2 \u0026lt;Category title=\u0026#34;今日热门游戏\u0026#34;\u0026gt; 3 \u0026lt;template v-slot:s1\u0026gt; 4 \u0026lt;ul\u0026gt; 5 \u0026lt;li v-for=\u0026#34;g in games\u0026#34; :key=\u0026#34;g.id\u0026#34;\u0026gt;{{ g.name }}\u0026lt;/li\u0026gt; 6 \u0026lt;/ul\u0026gt; 7 \u0026lt;/template\u0026gt; 8 \u0026lt;template #s2\u0026gt; 9 \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;更多\u0026lt;/a\u0026gt; 10 \u0026lt;/template\u0026gt; 11 \u0026lt;/Category\u0026gt; 12子组件中： 13 \u0026lt;template\u0026gt; 14 \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt; 15 \u0026lt;h3\u0026gt;{{ title }}\u0026lt;/h3\u0026gt; 16 \u0026lt;slot name=\u0026#34;s1\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; 17 \u0026lt;slot name=\u0026#34;s2\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; 18 \u0026lt;/div\u0026gt; 19 \u0026lt;/template\u0026gt; 3. 作用域插槽 理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（新闻数据在News组件中，但使用数据所遍历出来的结构由App组件决定）\n具体编码：\n1父组件中： 2 \u0026lt;Game v-slot=\u0026#34;params\u0026#34;\u0026gt; 3 \u0026lt;!-- \u0026lt;Game v-slot:default=\u0026#34;params\u0026#34;\u0026gt; --\u0026gt; 4 \u0026lt;!-- \u0026lt;Game #default=\u0026#34;params\u0026#34;\u0026gt; --\u0026gt; 5 \u0026lt;ul\u0026gt; 6 \u0026lt;li v-for=\u0026#34;g in params.games\u0026#34; :key=\u0026#34;g.id\u0026#34;\u0026gt;{{ g.name }}\u0026lt;/li\u0026gt; 7 \u0026lt;/ul\u0026gt; 8 \u0026lt;/Game\u0026gt; 9 10子组件中： 11 \u0026lt;template\u0026gt; 12 \u0026lt;div class=\u0026#34;category\u0026#34;\u0026gt; 13 \u0026lt;h2\u0026gt;今日游戏榜单\u0026lt;/h2\u0026gt; 14 \u0026lt;slot :games=\u0026#34;games\u0026#34; a=\u0026#34;哈哈\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; 15 \u0026lt;/div\u0026gt; 16 \u0026lt;/template\u0026gt; 17 18 \u0026lt;script setup lang=\u0026#34;ts\u0026#34; name=\u0026#34;Category\u0026#34;\u0026gt; 19 import {reactive} from \u0026#39;vue\u0026#39; 20 let games = reactive([ 21 {id:\u0026#39;asgdytsa01\u0026#39;,name:\u0026#39;英雄联盟\u0026#39;}, 22 {id:\u0026#39;asgdytsa02\u0026#39;,name:\u0026#39;王者荣耀\u0026#39;}, 23 {id:\u0026#39;asgdytsa03\u0026#39;,name:\u0026#39;红色警戒\u0026#39;}, 24 {id:\u0026#39;asgdytsa04\u0026#39;,name:\u0026#39;斗罗大陆\u0026#39;} 25 ]) 26 \u0026lt;/script\u0026gt; 7. 其它 API 7.1.【shallowRef 与 shallowReactive 】 shallowRef 作用：创建一个响应式数据，但只对顶层属性进行响应式处理。\n用法：\n1let myVar = shallowRef(initialValue); 特点：只跟踪引用值的变化，不关心值内部的属性变化。\nshallowReactive 作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的\n用法：\n1const myObj = shallowReactive({ ... }); 特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。\n总结 通过使用 shallowRef() 和 shallowReactive() 来绕开深度响应。浅层式 API 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。\n7.2.【readonly 与 shallowReadonly】 readonly 作用：用于创建一个对象的深只读副本。\n用法：\n1const original = reactive({ ... }); 2const readOnlyCopy = readonly(original); 特点：\n对象的所有嵌套属性都将变为只读。 任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。 应用场景：\n创建不可变的状态快照。 保护全局状态或配置不被修改。 shallowReadonly 作用：与 readonly 类似，但只作用于对象的顶层属性。\n用法：\n1const original = reactive({ ... }); 2const shallowReadOnlyCopy = shallowReadonly(original); 特点：\n只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。\n适用于只需保护对象顶层属性的场景。\n7.3.【toRaw 与 markRaw】 toRaw 作用：用于获取一个响应式对象的原始对象， toRaw 返回的对象不再是响应式的，不会触发视图更新。\n官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。\n何时使用？ —— 在需要将响应式对象传递给非 Vue 的库或外部系统时，使用 toRaw 可以确保它们收到的是普通对象\n具体编码：\n1import { reactive,toRaw,markRaw,isReactive } from \u0026#34;vue\u0026#34;; 2 3/* toRaw */ 4// 响应式对象 5let person = reactive({name:\u0026#39;tony\u0026#39;,age:18}) 6// 原始对象 7let rawPerson = toRaw(person) 8 9 10/* markRaw */ 11let citysd = markRaw([ 12 {id:\u0026#39;asdda01\u0026#39;,name:\u0026#39;北京\u0026#39;}, 13 {id:\u0026#39;asdda02\u0026#39;,name:\u0026#39;上海\u0026#39;}, 14 {id:\u0026#39;asdda03\u0026#39;,name:\u0026#39;天津\u0026#39;}, 15 {id:\u0026#39;asdda04\u0026#39;,name:\u0026#39;重庆\u0026#39;} 16]) 17// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了 18let citys2 = reactive(citys) 19console.log(isReactive(person)) 20console.log(isReactive(rawPerson)) 21console.log(isReactive(citys)) 22console.log(isReactive(citys2)) markRaw 作用：标记一个对象，使其永远不会变成响应式的。\n例如使用mockjs时，为了防止误把mockjs变为响应式对象，可以使用 markRaw 去标记mockjs\n编码：\n1/* markRaw */ 2let citys = markRaw([ 3 {id:\u0026#39;asdda01\u0026#39;,name:\u0026#39;北京\u0026#39;}, 4 {id:\u0026#39;asdda02\u0026#39;,name:\u0026#39;上海\u0026#39;}, 5 {id:\u0026#39;asdda03\u0026#39;,name:\u0026#39;天津\u0026#39;}, 6 {id:\u0026#39;asdda04\u0026#39;,name:\u0026#39;重庆\u0026#39;} 7]) 8// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了 9let citys2 = reactive(citys) 7.4.【customRef】 作用：创建一个自定义的ref，并对其依赖项跟踪和更新触发进行逻辑控制。\n实现防抖效果（useSumRef.ts）：\n1import {customRef } from \u0026#34;vue\u0026#34;; 2 3export default function(initValue:string,delay:number){ 4 let msg = customRef((track,trigger)=\u0026gt;{ 5 let timer:number 6 return { 7 get(){ 8 track() // 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新 9 return initValue 10 }, 11 set(value){ 12 clearTimeout(timer) 13 timer = setTimeout(() =\u0026gt; { 14 initValue = value 15 trigger() //通知Vue数据msg变化了 16 }, delay); 17 } 18 } 19 }) 20 return {msg} 21} 组件中使用：\n8. Vue3新组件 8.1. 【Teleport】 什么是Teleport？—— Teleport 是一种能够将我们的组件html结构移动到指定位置的技术。 1\u0026lt;teleport to=\u0026#39;body\u0026#39; \u0026gt; 2 \u0026lt;div class=\u0026#34;modal\u0026#34; v-show=\u0026#34;isShow\u0026#34;\u0026gt; 3 \u0026lt;h2\u0026gt;我是一个弹窗\u0026lt;/h2\u0026gt; 4 \u0026lt;p\u0026gt;我是弹窗中的一些内容\u0026lt;/p\u0026gt; 5 \u0026lt;button @click=\u0026#34;isShow = false\u0026#34;\u0026gt;关闭弹窗\u0026lt;/button\u0026gt; 6 \u0026lt;/div\u0026gt; 7\u0026lt;/teleport\u0026gt; 8.2. 【Suspense】 等待异步组件时渲染一些额外内容，让应用有更好的用户体验 使用步骤： 异步引入组件 使用Suspense包裹组件，并配置好default 与 fallback 1import { defineAsyncComponent,Suspense } from \u0026#34;vue\u0026#34;; 2const Child = defineAsyncComponent(()=\u0026gt;import(\u0026#39;./Child.vue\u0026#39;)) 1\u0026lt;template\u0026gt; 2 \u0026lt;div class=\u0026#34;app\u0026#34;\u0026gt; 3 \u0026lt;h3\u0026gt;我是App组件\u0026lt;/h3\u0026gt; 4 \u0026lt;Suspense\u0026gt; 5 \u0026lt;template v-slot:default\u0026gt; 6 \u0026lt;Child/\u0026gt; 7 \u0026lt;/template\u0026gt; 8 \u0026lt;template v-slot:fallback\u0026gt; 9 \u0026lt;h3\u0026gt;加载中.......\u0026lt;/h3\u0026gt; 10 \u0026lt;/template\u0026gt; 11 \u0026lt;/Suspense\u0026gt; 12 \u0026lt;/div\u0026gt; 13\u0026lt;/template\u0026gt; 8.3.【全局API转移到应用对象】 app.component app.config app.directive app.mount app.unmount app.use 8.4.【其他】 过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from。\nkeyCode 作为 v-on 修饰符的支持。\nv-model 指令在组件上的使用已经被重新设计，替换掉了 v-bind.sync。\nv-if 和 v-for 在同一个元素身上使用时的优先级发生了变化。\n移除了$on、$off 和 $once 实例方法。\n移除了过滤器 filter。\n移除了$children 实例 propert。\n\u0026hellip;\u0026hellip;\n","date":"2024-04-24T14:40:56+08:00","permalink":"https://huuuuuuo.github.io/post/vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","section":"post","tags":["vue3"],"title":"Vue3学习笔记"},{"categories":["read"],"contents":"粗略浏览了下《万历十五年》，主要思想大概是下面这句，也是本书结尾：\n当一个人口众多的国家，各人行动全凭儒家简单粗浅而又无法固定的原则所限制，而法律又缺乏创造性，则其社会发展的程度，必然受到限制。即便是宗旨善良，也不能补助技术之不及。\r1587年，是为万历十五年，丁亥次岁，表面上似乎是四海升平，无事可记，实际上我们的大明帝国却已经走到了它发展的尽头。在这个时候，皇帝的励精图治或者宴安耽乐，首辅的独裁或者调和，高级将领的富于创造或者习于苟安，文盲的廉洁奉公或者贪污舞弊，思想家的极端进步或者绝对保守，最后的结果，都是无分善恶，统统不能在事业上取得有意义的发展，有的身败，有的名裂，还有的人则身败而兼名裂。\n因此我们的故事只好在这里作悲剧性的结束。万历丁亥年的年鉴，是为历史上一部失败的总记录。\n——黄仁宇《万历十五年》\n作者讲了万历皇帝、张居正、海瑞、申时行、戚继光、李蛰这几个人物，通过他们的经历，不约而同地证明了\r皇帝的励精图治或者宴安耽乐，首辅的独裁或者调和，高级将领的富于创造或者习于苟安，文盲的廉洁奉公或者贪污舞弊，思想家的极端进步或者绝对保守，最后的结果，都是无分善恶，统统不能在事业上取得有意义的发展，有的身败，有的名裂，还有的人则身败而兼名裂。\r而他们的悲剧性结局又是由于\r当一个人口众多的国家，各人行动全凭儒家简单粗浅而又无法固定的原则所限制，而法律又缺乏创造性，则其社会发展的程度，必然受到限制。即便是宗旨善良，也不能补助技术之不及。\r因此中国从这个时候开始——事实上，要这么论的话，追溯到汉朝罢黜百家的时候起，中国在能够维持安定的同时，也失去了锐意进取的气魄，变成了一个顽固的道德楷模了。在前期各个世界的制度还未发展的比较合理的时候，全世界的文明发展都收到了诸多阻碍和限制，汉唐便可以凭借这种内部安定、中央集权、以及几个强人政治屹立世界。\n而一旦其他世界制度优势开始确立，这种维持安定的习惯便使得我们尾大不掉。\n往广了说，全世界都如此，如果没有打破某些原始的道德束缚、阶级束缚，没有解放出思想和劳动力，或多或少会走向下坡。\n","date":"2024-04-24T11:04:01+08:00","permalink":"https://huuuuuuo.github.io/post/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%87%E5%8E%86%E5%8D%81%E4%BA%94%E5%B9%B4%E6%91%98%E8%A6%81/","section":"post","tags":["万历十五年"],"title":"阅读笔记：《万历十五年》摘要"},{"categories":["Tech"],"contents":"想要在html页面中嵌入流程图，并且不能是图片，需要进行文本复制，同时还想要能够点击链接。考虑的方案是html+js。\n","date":"2024-04-18T23:14:19+08:00","permalink":"https://huuuuuuo.github.io/post/html%E9%A1%B5%E9%9D%A2%E5%B5%8C%E5%85%A5%E6%B5%81%E7%A8%8B%E5%9B%BE/","section":"post","tags":["html","流程图","drawio","Mermaid"],"title":"Html页面嵌入流程图"},{"categories":["Tech"],"contents":"1 显示效果 通过接口获取各个平台的热搜榜，集成在自己的博客上\n2 解决方法 首先，要找到热榜的接口，通过js访问接口来获取各大网站的热门榜。我使用的是 https://api.pearktrue.cn/api/dailyhot/\n然后就是建立一个新页面，然后获取接口返回的内容，展示在平台上，并进行布局等的修饰。\n我的方法是新建layouts\\_default\\trend.html，然后添加如下代码：\n1 2{{ define \u0026#34;main\u0026#34; }} 3 4\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 5 \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; 6 \u0026lt;div class=\u0026#34;trend-container\u0026#34;\u0026gt; 7 \u0026lt;div class=\u0026#34;tag-container\u0026#34;\u0026gt; 8 \u0026lt;button class=\u0026#34;tag-btn\u0026#34; data-title=\u0026#34;知乎\u0026#34;\u0026gt;知乎\u0026lt;/button\u0026gt; 9 \u0026lt;button class=\u0026#34;tag-btn\u0026#34; data-title=\u0026#34;少数派\u0026#34;\u0026gt;少数派\u0026lt;/button\u0026gt; 10 \u0026lt;button class=\u0026#34;tag-btn\u0026#34; data-title=\u0026#34;36氪\u0026#34;\u0026gt;36氪\u0026lt;/button\u0026gt; 11 \u0026lt;button class=\u0026#34;tag-btn\u0026#34; data-title=\u0026#34;稀土掘金\u0026#34;\u0026gt;稀土掘金\u0026lt;/button\u0026gt; 12 \u0026lt;button class=\u0026#34;tag-btn\u0026#34; data-title=\u0026#34;今日头条\u0026#34;\u0026gt;今日头条\u0026lt;/button\u0026gt; 13 \u0026lt;button class=\u0026#34;tag-btn\u0026#34; data-title=\u0026#34;微博热搜\u0026#34;\u0026gt;微博热搜\u0026lt;/button\u0026gt; 14 \u0026lt;button class=\u0026#34;tag-btn\u0026#34; data-title=\u0026#34;百度贴吧\u0026#34;\u0026gt;百度贴吧\u0026lt;/button\u0026gt; 15 \u0026lt;button class=\u0026#34;tag-btn\u0026#34; data-title=\u0026#34;百度\u0026#34;\u0026gt;百度\u0026lt;/button\u0026gt; 16 \u0026lt;button class=\u0026#34;tag-btn\u0026#34; data-title=\u0026#34;哔哩哔哩\u0026#34;\u0026gt;哔哩哔哩\u0026lt;/button\u0026gt; 17 \u0026lt;/div\u0026gt; 18 \u0026lt;hr\u0026gt; 19 20 \u0026lt;div class=\u0026#34;hotListContainer\u0026#34; id=\u0026#34;hotListContainer\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 21 22 \u0026lt;script src=\u0026#34;script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 23\u0026lt;/div\u0026gt; 24 25 \u0026lt;/div\u0026gt; 26\u0026lt;/div\u0026gt; 27 28 29 30\u0026lt;style\u0026gt; 31.tag-container{ 32 33} 34.tag-btn{ 35 background-color: #ffffff00; 36 color: #383838b6; 37 border: 0; 38} 39.tag-btn.active { 40 color: #0085a1; /* Change to your desired active color */ 41} 42.tag-btn:hover { 43 color: #0085a1; /* Change to your desired active color */ 44} 45.trend-container { 46 /* display: flex; */ 47 justify-content: center; 48 align-items: center; 49 padding: 0 16.66%; /* This ensures equal padding on both sides */ 50 box-sizing: border-box; /* Includes padding and border in the element\u0026#39;s total width and height */ 51} 52 53 54.hotListContainer { 55 /* display: inline-block; */ 56 flex-direction: column; 57 align-items: left; 58 justify-content: center; 59 height: 100%; /* This makes the container take up the full viewport height */ 60 box-sizing: border-box; /* Includes padding and border in the element\u0026#39;s total width and height */ 61 /* max-width: 700px; */ 62} 63 64 65.hot-item { 66 display: block; 67 align-items: center; 68 /* border: 1px solid #ccc; */ 69 padding: 10px; 70 margin-bottom: 30px; 71} 72 73.hot-item-link { 74 display: flex; 75 flex-direction: column; 76 flex-grow: 1; 77} 78 79.hot-item h3 { 80 margin: 0; 81 font-size: 23px; 82 color: #404040; 83} 84 85.hot-item p { 86 margin: 0; 87 font-size: 18px; 88 overflow: hidden; 89 text-overflow: ellipsis; 90 white-space: nowrap; 91 max-width: 100%; 92 color: #787676; 93 94} 95 96.hot-item img { 97 width: 100px; /* Adjust as needed */ 98 height: auto; 99 margin-left: 10px; 100} 101@media only screen and (max-width: 768px){ 102 .trend-container { 103 /* display: flex; */ 104 justify-content: center; 105 align-items: center; 106 padding: 0 5.66%; /* This ensures equal padding on both sides */ 107 box-sizing: border-box; /* Includes padding and border in the element\u0026#39;s total width and height */ 108} 109.hot-item h3 { 110 font-size: 20px; 111} 112.hot-item p { 113 font-size: 17px; 114 115 116} 117 } 118 119\u0026lt;/style\u0026gt; 120 121\u0026lt;script\u0026gt; 122 123document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { 124 const tagButtons = document.querySelectorAll(\u0026#39;.tag-btn\u0026#39;); 125 126 // Function to reset all buttons to their default state 127 function resetButtons() { 128 tagButtons.forEach(button =\u0026gt; { 129 button.classList.remove(\u0026#39;active\u0026#39;); 130 }); 131 } 132 133 tagButtons.forEach(button =\u0026gt; { 134 button.addEventListener(\u0026#39;click\u0026#39;, function() { 135 resetButtons(); // Reset all buttons to default state 136 this.classList.add(\u0026#39;active\u0026#39;); // Add active class to the clicked button 137 138 // Fetch data based on the clicked button\u0026#39;s title 139 const title = this.getAttribute(\u0026#39;data-title\u0026#39;); 140 fetch(`https://api.pearktrue.cn/api/dailyhot/?title=${title}`) 141 .then(response =\u0026gt; response.json()) 142 .then(data =\u0026gt; { 143 const container = document.getElementById(\u0026#39;hotListContainer\u0026#39;); 144 container.innerHTML = \u0026#39;\u0026#39;; 145 const hotList = data.data; 146 147 hotList.forEach((item, index) =\u0026gt; { 148 const hotItem = document.createElement(\u0026#39;div\u0026#39;); 149 hotItem.className = \u0026#39;hot-item\u0026#39;; 150 151 const link = document.createElement(\u0026#39;a\u0026#39;); 152 link.href = item.url; 153 link.className = \u0026#39;hot-item-link\u0026#39;; 154 link.target = \u0026#34;_blank\u0026#34;; // Open link in a new tab 155 link.rel = \u0026#34;noopener noreferrer\u0026#34;; // Security measure to prevent the new page from accessing the window object of the original page 156 157 const titleElement = document.createElement(\u0026#39;h3\u0026#39;); 158 titleElement.textContent = index + 1 + \u0026#39;. \u0026#39; + item.title; 159 link.appendChild(titleElement); 160 161 const desc = document.createElement(\u0026#39;p\u0026#39;); 162 desc.textContent = item.desc.length \u0026gt; 50 ? item.desc.substring(0, 50) + \u0026#39;...\u0026#39; : item.desc; 163 link.appendChild(desc); 164 165 hotItem.appendChild(link); 166 container.appendChild(hotItem); 167 }); 168 }) 169 .catch(error =\u0026gt; console.error(\u0026#39;Error fetching data:\u0026#39;, error)); 170 }); 171 }); 172 173 const zhihuButton = document.querySelector(\u0026#39;.tag-btn[data-title=\u0026#34;知乎\u0026#34;]\u0026#39;); 174 if (zhihuButton) { 175 zhihuButton.click(); 176 } 177}); 178 179\u0026lt;/script\u0026gt; 180 181 182 183{{ end }} 主要是通过接口获取了各个平台的热门，然后进行条数的限制，概述内容的限制等，样式的调整等，目前知乎、百度、百度贴吧、少数派、微博热搜可用，其他接口因为返回的格式不一致，所以还需要再调整下，等过段时间再来微调一下。\n","date":"2024-04-11T21:03:09+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E6%94%B9%E9%80%A0%E6%96%B0%E5%A2%9E%E7%83%AD%E6%A6%9C/","section":"post","tags":["hugo","博客改造"],"title":"Hugo博客改造：新增热榜"},{"categories":["Tech"],"contents":"1 显示效果 增加年、月、日的时间进度条显示，如下，可以显示当前时间在今天、当月、当年的进度。\n2 解决方案 在侧边栏layouts\\partials\\sidebar.html中新增一个模块，如下：\n1\u0026lt;!-- PROGRESS --\u0026gt; 2\u0026lt;section\u0026gt; 3 \u0026lt;hr\u0026gt; 4 \u0026lt;h5\u0026gt;PROGRESS | Day-Month-Year\u0026lt;/h5\u0026gt; 5{{ partial \u0026#34;progress\u0026#34; . }} 6\u0026lt;/section\u0026gt; 然后新增layouts\\partials\\progress.html，添加如下代码即可，想要不同的效果可以再style中更改：\n1\u0026lt;div class=\u0026#34;progress\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;progress-bar\u0026#34; id=\u0026#34;todayProgress\u0026#34; role=\u0026#34;progressbar\u0026#34; style=\u0026#34;width: 0%;\u0026#34; aria-valuenow=\u0026#34;0\u0026#34; aria-valuemin=\u0026#34;0\u0026#34; aria-valuemax=\u0026#34;100\u0026#34;\u0026gt;0%\u0026lt;/div\u0026gt; 3 \u0026lt;/div\u0026gt; 4 \u0026lt;div class=\u0026#34;progress\u0026#34;\u0026gt; 5 \u0026lt;div class=\u0026#34;progress-bar\u0026#34; id=\u0026#34;monthProgress\u0026#34; role=\u0026#34;progressbar\u0026#34; style=\u0026#34;width: 0%;\u0026#34; aria-valuenow=\u0026#34;0\u0026#34; aria-valuemin=\u0026#34;0\u0026#34; aria-valuemax=\u0026#34;100\u0026#34;\u0026gt;0%\u0026lt;/div\u0026gt; 6 \u0026lt;/div\u0026gt; 7 \u0026lt;div class=\u0026#34;progress\u0026#34;\u0026gt; 8 \u0026lt;div class=\u0026#34;progress-bar\u0026#34; id=\u0026#34;yearProgress\u0026#34; role=\u0026#34;progressbar\u0026#34; style=\u0026#34;width: 0%;\u0026#34; aria-valuenow=\u0026#34;0\u0026#34; aria-valuemin=\u0026#34;0\u0026#34; aria-valuemax=\u0026#34;100\u0026#34;\u0026gt;0%\u0026lt;/div\u0026gt; 9 \u0026lt;/div\u0026gt; 10 11\u0026lt;style\u0026gt; 12.progress-bar { 13 float: left; 14 width: 0; 15 height: 100%; 16 font-size: 12px; 17 line-height: 20px; 18 color: #fff; 19 text-align: center; 20 background-color: #0086a18b; 21 -webkit-box-shadow: inset 0 -1px 0 rgb(0 0 0 / 15%); 22 box-shadow: inset 0 -1px 0 rgb(0 0 0 / 15%); 23 -webkit-transition: width .6s ease; 24 -o-transition: width .6s ease; 25 transition: width .6s ease; 26 27} 28.progress { 29 height: 20px; 30 width: 240px; 31 margin-bottom: 20px; 32 overflow: hidden; 33 background-color: #f8f8f883; 34 border-radius: 4px; 35 -webkit-box-shadow: inset 0 1px 2px rgb(0 0 0 / 10%); 36 box-shadow: inset 0 1px 2px rgb(0 0 0 / 10%); 37} 38 39\u0026lt;/style\u0026gt; 40 41\u0026lt;script\u0026gt; 42function updateProgress(progressId, newValue) { 43 $(`#${progressId}`).css(\u0026#39;width\u0026#39;, newValue + \u0026#39;%\u0026#39;).attr(\u0026#39;aria-valuenow\u0026#39;, newValue).text(newValue + \u0026#39;%\u0026#39;); 44 } 45 const now = new Date(); 46 47 // 计算当天已过去的时间（毫秒） 48 const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate()); 49 const elapsedTime = now - startOfDay; 50 51 // 计算当天已过去的时间占一天总时间的百分比 52 const dayPercentage = Math.round((elapsedTime / (1000 * 60 * 60 * 24)) * 100); 53 54 // 计算当月已过去的天数 55 const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1); 56 const elapsedDays = (now - startOfMonth) / (1000 * 60 * 60 * 24); 57 const daysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate(); 58 59 // 计算当月已过去的天数占一个月总天数的百分比 60 const monthPercentage = Math.round((elapsedDays / daysInMonth) * 100); 61 62 // 计算当年已过去的天数 63 const startOfYear = new Date(now.getFullYear(), 0, 1); 64 const elapsedDaysInYear = (now - startOfYear) / (1000 * 60 * 60 * 24); 65 const daysInYear = (new Date(now.getFullYear() + 1, 0, 1) - new Date(now.getFullYear(), 0, 1)) / (1000 * 60 * 60 * 24); 66 67 // 计算当年已过去的天数占一年总天数的百分比 68 const yearPercentage = Math.round((elapsedDaysInYear / daysInYear) * 100); 69 70 updateProgress(\u0026#39;todayProgress\u0026#39;, dayPercentage); 71 updateProgress(\u0026#39;monthProgress\u0026#39;, monthPercentage); 72 updateProgress(\u0026#39;yearProgress\u0026#39;, yearPercentage); 73\u0026lt;/script\u0026gt; ","date":"2024-04-10T23:31:43+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E5%B9%B4%E6%9C%88%E6%97%A5%E6%97%B6%E9%97%B4%E8%BF%9B%E5%BA%A6%E6%9D%A1/","section":"post","tags":["hugo","进度条","博客改造"],"title":"Hugo：增加年月日时间进度条"},{"categories":["Tech"],"contents":"1 显示效果 给hugo博客添加天气预报的效果，其实不只是给hugo，所有博客都是通用的。\n我自己想要一打开就能看到天气，所以增加了这个功能。可以根据你的IP显示城市，并且显示未来几天的天气预报。\n显示效果是这样的：\n2 解决方案 2.1 天气查询api 要显示天气就必须有天气预报的api，查了一下发现高德开放平台有天气的api 天气查询 ，于是就开始马不停蹄地添加到博客上。\n2.1.1 申请key 首先，打开高德开放平台注册账号，或者用高德地图扫码。\n然后，进入控制台，选择创建新应用，应用类型选择天气。\n创建好应用以后，选择右上角的添加key，然后 服务平台中选择web服务就行了。可以看到下面的可使用服务是很广的，这一个key就可以同时用于这些服务上面。\n提交以后，就会显示你的key，这个key就可以用在api的参数里面了。\n2.1.2 api使用 api的使用就是按照api文档来就行了，其中key和city是必须的参数，city参数可以从城市编码表中获取。\n返回的结果有很多，在api文档也能看到，选取你需要的参数就行了。\n2.2 IP定位api 如果只需要固定显示一个地方的天气，那么直接在请求中硬编码输入城市的编码就行了，但是我想要自动定位IP，那么就可以用到高德开放平台的另一个api，IP定位 。\n必填的参数就一个，你的key。刚才申请的key也可以用于这里。\n2.3 页面展示 添加\\layouts\\partials\\weather.html，完整的html代码在下面，将api里面的yourkey替换成你自己的key就可以了。\n1\u0026lt;style\u0026gt; 2 .weatherReport { 3 font-size: 15px; 4 color: #1f373c8c; 5 } 6\u0026lt;/style\u0026gt; 7\u0026lt;h5 class=\u0026#34;locationInfo\u0026#34; id=\u0026#34;locationInfo\u0026#34;\u0026gt;\u0026lt;/h5\u0026gt; 8\u0026lt;span class=\u0026#34;weatherReport\u0026#34; id=\u0026#34;weatherReport\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 9 10\u0026lt;script\u0026gt; 11 const apicityUrl = \u0026#39;https://restapi.amap.com/v3/ip?key=yourkey\u0026#39;; 12 const apiUrlTemplate = \u0026#39;https://restapi.amap.com/v3/weather/weatherInfo?city=350103\u0026amp;key=yourkey\u0026amp;extensions=all\u0026#39;; 13 14 fetch(apicityUrl) 15 .then(response =\u0026gt; response.json()) 16 .then(data =\u0026gt; { 17 const province = data.province; 18 const city = data.city; 19 const adcode = data.adcode; 20 21 // 显示省份和城市信息 22 document.getElementById(\u0026#39;locationInfo\u0026#39;).innerHTML = `WEATHER | ${province} ${city}`; 23 24 // 将 adcode 插入到 apiUrl 中 25 const apiUrl = apiUrlTemplate.replace(\u0026#39;{adcode}\u0026#39;, adcode); 26 27 // 使用新的 apiUrl 获取天气信息 28 return fetch(apiUrl); 29 }) 30 .then(response =\u0026gt; response.json()) 31 .then(data =\u0026gt; { 32 if (data.status === \u0026#34;1\u0026#34; \u0026amp;\u0026amp; data.count === \u0026#34;1\u0026#34;) { 33 const forecast = data.forecasts[0]; 34 const reportTime = forecast.reporttime; 35 const city = forecast.city; 36 const province = forecast.province; 37 38 let weatherReport = ``; 39 40 forecast.casts.forEach((cast, index) =\u0026gt; { 41 const date = cast.date; 42 const parts = date.split(\u0026#34;-\u0026#34;); 43 const newDate = parts.slice(1).join(\u0026#34;-\u0026#34;); 44 const nightWeather = cast.nightweather; 45 const dayWeather = cast.dayweather; 46 const daytemp = cast.daytemp; 47 const nighttemp = cast.nighttemp; 48 49 // 检查是否是第一个预报 50 if (index === 0) { 51 // 如果是第一个预报，不添加 \u0026lt;br\u0026gt; 52 weatherReport += `${newDate}\u0026lt;br\u0026gt;日夜温度: ${daytemp} ~ ${nighttemp}℃\u0026lt;br\u0026gt;日夜天气: ${nightWeather} ~ ${dayWeather}\u0026lt;br\u0026gt;`; 53 } else { 54 // 如果不是第一个预报，添加 \u0026lt;br\u0026gt; 55 weatherReport += `\u0026lt;br\u0026gt;${newDate}\u0026lt;br\u0026gt;日夜温度: ${daytemp} ~ ${nighttemp}℃\u0026lt;br\u0026gt;日夜天气: ${nightWeather} ~ ${dayWeather}\u0026lt;br\u0026gt;`; 56 } 57 }); 58 59 60 document.getElementById(\u0026#39;weatherReport\u0026#39;).innerHTML = weatherReport; 61 } else { 62 console.error(\u0026#39;Error fetching weather data\u0026#39;); 63 } 64 }) 65 .catch(error =\u0026gt; console.error(\u0026#39;Error:\u0026#39;, error)); 66\u0026lt;/script\u0026gt; 因为我是放在侧边栏，所以在\\layouts\\partials\\sidebar.html文件中，添加以下代码：\n1\u0026lt;!-- WEATHER --\u0026gt; 2\u0026lt;section\u0026gt; 3 \u0026lt;hr\u0026gt; 4{{ partial \u0026#34;weather\u0026#34; . }} 5\u0026lt;/section\u0026gt; 如果想放在别的位置，也可以自己调整位置。\n以上。\n","date":"2024-04-08T21:56:52+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/","section":"post","tags":["hugo","天气预报","博客改造"],"title":"Hugo：添加天气预报"},{"categories":["Tech"],"contents":"1 显示效果 2 解决方法 因为没找到这种台词的接口，于是就去网上搜罗了一堆放在csv里面，然后页面刷新的时候自动从csv中抽取一行台词进行展示。分为html代码和js代码，其中progress.js代码如下：\n1document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { 2 fetch(\u0026#39;/data/douban/quote.csv\u0026#39;) 3 .then(response =\u0026gt; response.text()) 4 .then(data =\u0026gt; { 5 const lines = data.split(\u0026#39;\\n\u0026#39;); 6 const quotes = lines.slice(1).map(line =\u0026gt; line.split(\u0026#39;,\u0026#39;)); 7 const randomQuote = quotes[Math.floor(Math.random() * quotes.length)]; 8 document.getElementById(\u0026#39;quote\u0026#39;).textContent = randomQuote[0]; 9 document.getElementById(\u0026#39;source\u0026#39;).textContent = randomQuote[1] ? \u0026#39;——\u0026#39; + randomQuote[1] : \u0026#39;\u0026#39;; 10 11 12 console.log(randomQuote[0],randomQuote[1]); 13 14 }); 15 }); 在html中添加：\n1\u0026lt;style\u0026gt; 2.quote-container { 3 color: #fdfdfd7d; 4 position: relative; 5 width: 100%; 6 height: 100px; 7 border: 0px solid #ccc; 8 padding: 0px; 9 box-sizing: border-box; 10} 11.quote { 12 position: absolute; 13 top: 0; 14 left: 0; 15} 16.source { 17 position: absolute; 18 bottom: 0; 19 right: 0; 20 text-align: right; 21} 22\u0026lt;/style\u0026gt; 23\u0026lt;div class=\u0026#34;quote-container\u0026#34;\u0026gt; 24\u0026lt;span class=\u0026#34;quote\u0026#34; id=\u0026#34;quote\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 25\u0026lt;span class=\u0026#34;source\u0026#34; id=\u0026#34;source\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 26\u0026lt;/div\u0026gt; 27\u0026lt;script src=\u0026#34;/js/progress.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 这样就可以了，然后当页面刷新的时候，就会随机展示一句电影台词了~\n3 接口更新 找到了一个接口 一言 ，使用接口进行台词的随机展示，这个接口就不仅仅是电影台词了，还有很多类型比如：动画、漫画、游戏、原创文学、影视、诗词、网易云、哲学、抖机灵等等。\n然后可以把js代码改为：\n1document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { 2 fetch(\u0026#39;https://v1.hitokoto.cn\u0026#39;) 3 .then(response =\u0026gt; response.json()) 4 .then(data =\u0026gt; { 5 document.getElementById(\u0026#39;quote\u0026#39;).textContent = data.hitokoto; 6 document.getElementById(\u0026#39;source\u0026#39;).textContent = \u0026#39;—— \u0026#39; + data.from; 7 }) 8 .catch(error =\u0026gt; console.error(\u0026#39;Error:\u0026#39;, error)); 9 }); 这样就可以用这个接口的内容来随机展示了。\n","date":"2024-04-05T01:05:29+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E5%8F%B0%E8%AF%8D%E9%9A%8F%E6%9C%BA%E6%98%BE%E7%A4%BA/","section":"post","tags":["hugo","博客改造"],"title":"Hugo：增加台词随机展示"},{"categories":["Tech"],"contents":"1 显示效果 中英文之间auto自动加空格\n2 解决方法 可以使用 盘古之白\n在文件layouts\\partials\\footer.html中，加入以下代码即可：\n1\u0026lt;script\u0026gt; 2 (function(u, c) { 3 var d = document, t = \u0026#39;script\u0026#39;, o = d.createElement(t), 4 s = d.getElementsByTagName(t)[0]; 5 o.src = u; 6 if (c) { o.addEventListener(\u0026#39;load\u0026#39;, function(e) { c(e); }); } 7 s.parentNode.insertBefore(o, s); 8 })(\u0026#39;//cdn.bootcss.com/pangu/3.3.0/pangu.min.js\u0026#39;, function() { 9 pangu.spacingPage(); 10 }); 11 \u0026lt;/script\u0026gt; ","date":"2024-04-04T20:33:21+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%AD%E8%8B%B1%E6%96%87%E4%B9%8B%E9%97%B4%E8%87%AA%E5%8A%A8%E5%8A%A0%E7%A9%BA%E6%A0%BC/","section":"post","tags":["hugo"],"title":"Hugo：中英文之间自动加空格"},{"categories":["Tech"],"contents":"1 显示效果 在归档archive页面中，我将归档显示方式改为先按日，再按月和年来统计。\n2 解决方法 在文件 layouts\\_default\\archive.html 中修改统计方式：\n重点是 第一个按年分组要使用$pages， {{ range $pages.GroupByDate \u0026quot;2006\u0026quot; }}\n按月分组和按日分组要使用.Pages，这表示前面按年分组之后的结果，之后使用 {{ range .Pages.GroupByDate \u0026quot;01\u0026quot; }} 和 {{ range .Pages.GroupByDate \u0026quot;01-02\u0026quot; }} 。\n1\u0026lt;div class=\u0026#34;archive-list\u0026#34;\u0026gt; 2 3 \u0026lt;section\u0026gt; 4 {{ range $pages.GroupByDate \u0026#34;2006\u0026#34; }} 5 \u0026lt;h1 class=\u0026#34;title is-4 has-text-weight-normal\u0026#34; style=\u0026#34;position: relative; display: inline-block; padding-right: 30px;\u0026#34;\u0026gt;{{ .Key }} 6 \u0026lt;span style=\u0026#34;position: absolute; top: 0; right: 0; font-size: 15px; color: #666;\u0026#34;\u0026gt;{{ len .Pages }}\u0026lt;/span\u0026gt; 7 \u0026lt;/h1\u0026gt; 8 \u0026lt;hr\u0026gt; 9 \u0026lt;/section\u0026gt; 10 11 \u0026lt;section\u0026gt; 12 {{ range .Pages.GroupByDate \u0026#34;01\u0026#34; }} 13 \u0026lt;h3 class=\u0026#34;title is-4 has-text-weight-normal\u0026#34; style=\u0026#34;position: relative; display: inline-block; padding-right: 30px;\u0026#34;\u0026gt;{{ .Key }} 14 \u0026lt;span style=\u0026#34;position: absolute; top: 0; right: 0; font-size: 15px; color: #666;\u0026#34;\u0026gt;{{ len .Pages }}\u0026lt;/span\u0026gt; 15 \u0026lt;/h3\u0026gt; 16 \u0026lt;hr\u0026gt; 17 \u0026lt;/section\u0026gt; 18 \u0026lt;section\u0026gt; 19 {{ range .Pages.GroupByDate \u0026#34;01-02\u0026#34; }} 20 \u0026lt;h3 class=\u0026#34;title is-4 has-text-weight-normal\u0026#34; style=\u0026#34;position: relative; display: inline-block; padding-right: 30px;\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;{{ .Key }} 21 \u0026lt;span style=\u0026#34;position: absolute; top: 0; right: 0; font-size: 15px; color: #666;\u0026#34;\u0026gt;{{ len .Pages }}\u0026lt;/span\u0026gt; 22 \u0026lt;/h3\u0026gt; 23 \u0026lt;/section\u0026gt; 24 25 \u0026lt;ul style=\t\u0026#34;background-position:1000px; padding-left:100px;\u0026#34;\u0026gt; 26 {{ range .Pages }} 27 \u0026lt;li \u0026gt; 28 29 \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; 30 {{ .Title }} 31 \u0026lt;/a\u0026gt; 32 \u0026lt;/li\u0026gt; 33 {{ end }} 34 \u0026lt;/ul\u0026gt; 35 36 {{ end }} 37 {{ end }} 38 {{ end }} 39 \u0026lt;/div\u0026gt; ","date":"2024-04-04T17:56:33+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%BD%92%E6%A1%A3%E6%94%B9%E4%B8%BA%E5%B9%B4%E6%9C%88%E7%BB%9F%E8%AE%A1/","section":"post","tags":["hugo"],"title":"Hugo：归档改为年月日统计"},{"categories":["Tech"],"contents":"1 显示效果 今天突然想起来可以搞一个阅读进度条的功能，还挺好看的，通过一番搜寻找到了一个很不错的解决方案，最终实现效果如下：\n2 解决方案 要实现在所有页面上可以实现这个效果，可以将html代码插入到 layouts\\_default\\baseof.html 并引用css和js文件，若是只想在文章页面实现，可以插入到 layouts\\_default\\single.html\n2.1 html 1\u0026lt;progress id=\u0026#34;content_progress\u0026#34; value=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/progress\u0026gt; 2\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/progress.css\u0026#34;\u0026gt; 3\u0026lt;script src=\u0026#34;/js/progress.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2.2 css 1#content_progress { 2 /* Positioning */ 3 position: fixed; 4 left: 0; 5 top: 0; 6 z-index: 1000; 7 width: 100%; 8 height: 3px; 9 -webkit-appearance: none; 10 -moz-appearance: none; 11 appearance: none; 12 border: none; 13 background-color: transparent; 14 color: #0085a1; 15} 16 17#content_progress::-webkit-progress-bar { 18 background-color: transparent; 19} 20 21#content_progress::-webkit-progress-value { 22 background-color: #0085a1; 23} 24 25#content_progress::-moz-progress-bar { 26 background-color: #0085a1; 27} 2.3 JavaScript 1document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function () { 2 var winHeight = window.innerHeight, 3 docHeight = document.documentElement.scrollHeight, 4 progressBar = document.querySelector(\u0026#39;#content_progress\u0026#39;); 5 progressBar.max = docHeight - winHeight; 6 progressBar.value = window.scrollY; 7 8 document.addEventListener(\u0026#39;scroll\u0026#39;, function () { 9 progressBar.max = document.documentElement.scrollHeight - window.innerHeight; 10 progressBar.value = window.scrollY; 11 }); 12}); 参考资料：\nhttps://cloud.tencent.com/developer/article/1197346 ","date":"2024-04-02T20:44:26+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E9%98%85%E8%AF%BB%E8%BF%9B%E5%BA%A6%E6%9D%A1/","section":"post","tags":["hugo"],"title":"Hugo：阅读进度条"},{"categories":["Tech"],"contents":"1 显示效果 现在可以按照最后更新时间进行排序了\n2 修改代码 在 layouts\\partials\\portfolio.html 中，将以下一行代码替换成后面三行。\n原代码：\n1\u0026lt;!-- {{ $paginator := .Paginate (where (where .Site.Pages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;) \u0026#34;IsPage\u0026#34; true) }} --\u0026gt; 替换成：\n1{{ $sortedPages := (where (where .Site.Pages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;) \u0026#34;IsPage\u0026#34; true) }} 2{{ $sortedPages := $sortedPages.ByLastmod.Reverse }} 3{{ $paginator := .Paginate $sortedPages }} 先找出类型为post的文章，对其按照 lastmod 的reverse进行排序，然后再为排序的页面列表创建分页器。\n","date":"2024-04-01T15:28:12+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%B0%86%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/","section":"post","tags":["hugo","lastmod"],"title":"Hugo：将首页文章按照最后修改时间显示"},{"categories":["Tech"],"contents":" 此文章用于长期更新hugo学习的内容\n1\t模板 1├── layouts 2└── themes 3 └── mytheme 4 └── layouts 5 ├── 404.html // 404页面模板 6 ├── _default 7 │ ├── baseof.html // 默认的基础模板页， 使用的方式是\u0026#39;拼接\u0026#39;， 而不是\u0026#39;继承\u0026#39;. 8 │ ├── list.html // 列表模板 9 │ └── single.html // 单页模板 10 ├── index.html // 首页模板 11 └── partials // 局部模板， 通过partial引入 12 ├── footer.html 13 ├── header.html 14 └── head.html 2 文章和页面的对应关系. 1└── content 2 ├── _index.md // [home] \u0026lt;- https://example.com/** 3 ├── about.md // [page] \u0026lt;- https://example.com/about/ 4 ├── posts 5 | ├── _index.md // [section] \u0026lt;- https://example.com/posts/** 6 | ├── firstpost.md // [page] \u0026lt;- https://example.com/posts/firstpost/ 7 | ├── happy 8 | | ├── _index.md // [section] \u0026lt;- https://example.com/posts/happy/** 9 | | └── ness.md // [page] \u0026lt;- https://example.com/posts/happy/ness/ 10 | └── secondpost.md // [page] \u0026lt;- https://example.com/posts/secondpost/ 11 └── quote 12 ├── _index.md // [section] \u0026lt;- https://example.com/quote/** 13 ├── first.md // [page] \u0026lt;- https://example.com/quote/first/ 14 └── second.md // [page] \u0026lt;- https://example.com/quote/second/ 15 16// hugo默认生成的页面， 没有对应的markdown文章 17分类列表页面 // [taxonomyTerm] \u0026lt;- https://example.com/categories/** 18某个分类下的所有文章的列表 // [taxonomy] \u0026lt;- https://example.com/categories/one-category ** 19标签列表页面 // [taxonomyTerm] \u0026lt;- https://example.com/tags/** 20某个标签下的所有文章的列表 // [taxonomy] \u0026lt;- https://example.com/tags/one-tag ** 3 语法 hugo使用的是go语言自带的模板引擎， 模板的标签为{{}}， {{}}中包含的内容叫’动作’(action).\n3.1 动作–action {{ }} 中包含的内容叫“动作” (action)\n动作分为两种类型\n数据求值 控制结构 求值的结果会直接输出到模板中， 控制结构主要包含条件， 循环， 函数调用等.\n3.2 点. 1{{.}} 2点`.`代表传递给模板的数据， 表示当前模板的上下文， 他可以是go语言中的任何类型， 如: 字符串， 数组， 结构体等. 3.3 空格处理 1// 清除 pipeline 前后的空格 2{{- pipeline -}} 3 4// 清除 pipeline 前面的空格 5{{- pipeline }} 6 7// 清除 pipeline 后面的空格 8{{ pipeline -}} 3.4 变量赋值 1{{$变量名 := \u0026#34;值\u0026#34;}} 给局部变量赋值使用 :=， 这是golang的语法\n3.5 条件判断 1{{if pipeline}} T1 {{end}} 2如果pipeline有值，则输出T1. 3下面这些情况pipeline的值为空： false， 0， 值为nil的指针或接口， 长度为0的数组， 切片， map和字符串 4 5{{if pipeline}} T1 {{else}} T0 {{end}} 6如果有值则输出T1， 否则输出T0 7 8{{if pipeline}} T1 {{else if pipeline}} T0 {{end}} 3.6 循环 1{{range pipeline}} T1 {{end}} 2pipeline的值必须是数组， 切片， map， channel. 3如果pipeline的长度为0则不会输出任何结果. 否则设置点`.`为数组， 切片， map的遍历值， 输出T1. 4 模板的嵌套 在编写模板的时候， 常常将公用的部分单独做成一个模板， 如每一个页面都有导航栏， 页首， 页脚等。然后在需要的地方导入这些模板。\n一般会先编写一个基础模板， 然后在基础模板中引入子模板，\rhugo默认的基础模板页是_default/baseof.html。\r4.1 define 1{{define \u0026#34;name\u0026#34;}} T1 {{end}} 2定义一个特定名称的模板 4.2 template 1{{template \u0026#34;name\u0026#34;}} 2引入指定名称的模板, 不传入任何数据. 3 4{{template \u0026#34;name\u0026#34; pipeline}} 5引入指定名称的模板, 设置模板上下文点`.`的值为pipeline的值 4.3 block 1{{block \u0026#34;name\u0026#34; pipeline}} T1 {{end}} 2定义特定名称的模板, 并在当前位置引入该名称的模板, 模板的上下文点`.`的值为pipeline的值, 3如果该名称的模板未实现(不存在), 则输出T1 4就相当于在基础模板页中定义了一个子模板占位符. 5 模板嵌套规则 hugo中引入模板改用partial, template只用来引入内部模板. partial通过路径的方式引入模板, 被引入的子模板不在需要定义模板名.\n如果模板页面通过define定义了模板名称, 则该子模板会输出到基础模板页baseof.html中block定义的对应名称的位置.\n5.1 partial partial引入模板时的查找路径只会在下面两个地方\n1{{ partial \u0026#34;\u0026lt;PATH\u0026gt;/\u0026lt;PARTIAL\u0026gt;.html\u0026#34; . }} // 语法 2layouts/partials/*\u0026lt;PARTIALNAME\u0026gt;.html 3themes/\u0026lt;THEME\u0026gt;/layouts/partials/*\u0026lt;PARTIALNAME\u0026gt;.html 5.2 baseof.html baseof.html为hugo的默认基础模板页, 主要用于block语法. baseof.html存放在以下两个位置\n1layouts/_default/baseof.html 2themes/\u0026lt;THEME\u0026gt;/layouts/_default/baseof.html hugo先找到需要解析的模板, 如果模板中有{{define \u0026quot;name\u0026quot;}} T1 {{end}}, 则再去加载baseof.html基础模板, 并对比baseof.html中的{{block \u0026quot;name\u0026quot; pipeline}} T1 {{end}}, 如果找到相同的名称则在block处输出define中的T1, 如果没有找到相同的名称, 则在block处输出block中的T1\n参考资料\nHugo的工作原理 ","date":"2024-04-01T09:45:54+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%AD%A6%E4%B9%A0/","section":"post","tags":["hugo"],"title":"Hugo学习笔记（长期更新）"},{"categories":["Tech"],"contents":"想要在网站上做几个新页面\n1 在配置文件中新增标签 1 [[params.addtional_menus]] 2 title = \u0026#34;TREND\u0026#34; 3 href = \u0026#34;/trend\u0026#34; 2 新增页面布局 2.1 沿用已有布局 新增了标签以后，点进去是404，这是因为还没有建立页面，所以这一步我们要新建页面。\n新增hugo-root\\content\\trend\\index.md，文件内容里面要写明页面布局格式 layout: page\n这个根据你的主题下的你需要使用的页面模板来决定，具体路径在hugo-root\\themes\\your-theme\\layouts\\_default\\page.html，这里的\\layouts\\_default\\就是所有layout的路径，page就是你的具体的layout\n1--- 2title: \u0026#34;Trend\u0026#34; 3layout: page 4--- 这样，我们就新建了一个空页面。\n2.1 增加新布局 如果要增加新的布局，那么就在\\layouts\\_default\\目录下新增html文件，并且在html中新增你的内容，比如我这里新增一个trend.html\n然后在hugo-root\\content\\trend\\index.md中也要改为：\n1--- 2title: \u0026#34;Trend\u0026#34; 3layout: trend 4--- 3 添加内容 3.1 添加简单内容 这时候如果我们在hugo-root\\content\\trend\\index.md里面添加文字或者内容的话，页面上就有内容了。\n不过这种方式是在page的排版基础上，如果只是想添加简单的内容就可以用这种方式\n3.2 添加自定义内容 在2.1 增加新布局的基础上，我们对trend.html进行更深的改动。\n改动之前，我们需要了解hugo中layout的几个设定。\n3.2.1 baseof.html\n在baseof.html中有几个设定，如下所示：\n1{{ block \u0026#34;header\u0026#34; .}} 2\t... 3{{ end }} 1{{ block \u0026#34;main\u0026#34; . }} 2{{ end }} 这些是留给我们自定义的内容。\n那么在trend.html中我们需要相应设定为：\n1{{ define \u0026#34;header\u0026#34; }} 2\t... 3{{ end }} 1{{ define \u0026#34;main\u0026#34; }} 2\t... 3{{ end }} 并且往其中添加内容即可，header中我们添加文章标题或者网页标题的相关内容，main中我们添加主题内容。\n这一部分就和写普通的html基本一致了，只不过我们还可以利用hugo的一些特殊的方法和变量来获取我们网站的内容。具体可参考官方文档或者 Hugo 学习笔记（长期更新）。\n除了html以外，我们还可以使用css来调整页面的布局之类。\n","date":"2024-04-01T08:40:15+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2/","section":"post","tags":["hugo","增加新页面"],"title":"Hugo：增加新页面"},{"categories":["Tech"],"contents":"1 显示效果 可以看到在右上角有一个搜索图标，原本是这个主题带的，原本是点击以后会进入一个新的 search页面进行搜索，但是我用的时候发现这个功能有问题，点击进去以后什么都没有出现，加上又会跳转到新页面，遂放弃，根据我的需求进行改进。\n2 改进方向 总结起来我有几个想要的效果，便朝着这几个方向去改：\n在同一个页面进行搜索，省去跳转的麻烦 搜索框和结果居中固定显示，并且有滚轮 为了可以和背景区分开，又不至于太僵硬，做成了毛玻璃效果 同步适应手机端的摆放位置优化 其他一些美化 那么就朝着这个方向开始做起来吧（并没有，其实都是做好以后再总结的😑\n3 解决方案 2.1 添加搜索 在 layouts\\partials\\nav.html 中插入如下代码，在你想添加搜索的地方\n1\u0026lt;li\u0026gt; 2 \u0026lt;a id=\u0026#34;search-btn\u0026#34; href=\u0026#34;javascript:void(0);\u0026#34;\u0026gt; 3 \u0026lt;i class=\u0026#34;fa fa-search\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 4 \u0026lt;/a\u0026gt; 5\u0026lt;/li\u0026gt; 6\u0026lt;script src=\u0026#34;/js/fuse.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 7\u0026lt;script src=\u0026#34;/js/fastsearch.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 8\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;/css/custom.css\u0026#34;\u0026gt; fuse.min.js 需要在github上下载一下。\n2.2 添加 index.json 然后，添加 layouts\\_default\\index.json 文件：\n1{{- $.Scratch.Add \u0026#34;index\u0026#34; slice -}} 2{{- range .Site.RegularPages -}} 3 {{- $.Scratch.Add \u0026#34;index\u0026#34; (dict \u0026#34;title\u0026#34; .Title \u0026#34;tags\u0026#34; .Params.tags \u0026#34;categories\u0026#34; .Params.categories \u0026#34;contents\u0026#34; .Plain \u0026#34;permalink\u0026#34; .Permalink \u0026#34;date\u0026#34; .Date \u0026#34;section\u0026#34; .Section) -}} 4{{- end -}} 5{{- $.Scratch.Get \u0026#34;index\u0026#34; | jsonify -}} 2.3 添加 css 文件 在 css\\custom.css 中添加如下代码，\rcss和js文件都需要进行引用\r1#fastSearch { 2 visibility: hidden; 3 position: absolute; 4 top: 200%; 5 left: 50%; 6 transform: translate(-50%, -50%); 7 display: inline-block; 8 width: 600px; 9 margin: 0 10px 0 0; 10 padding: 0; 11 12 } 13 14 15#fastSearch input { 16 /* padding: 4px; */ 17 width: 100%; 18 height: 100%; 19 font-size: 1em; 20 color: #000000; 21 font-weight: bold; 22 /* background-color: #fffffffc; */ 23 border-radius: 5px 5px 5px 5px; 24 border: none; 25 outline: none; 26 text-align: left; 27 display: inline-block; 28 padding: 10px; 29 backdrop-filter: blur(10px); /* 设置模糊效果，值越大模糊效果越明显 */ 30 background-color: rgba(242, 242, 242, 0.472); /* 设置半透明的背景色 */ 31} 32 33#searchResults li { 34 list-style: none; 35 margin-left: 0em; 36 /* background-color: #fffffffc; */ 37 /* border-bottom: 1px dotted #000; */ 38} 39 40#searchResults li .title { 41 font-size: 1em; 42 margin: 0; 43 color: #000; 44 display: inline-block; 45} 46 47 48 49#searchResults { 50 position: absolute; /* 使ul元素相对于#fastSearch进行定位 */ 51 top: 100%; /* 调整ul元素的位置 */ 52 left: 0; /* 调整ul元素的位置 */ 53 width: 100%; /* 确保ul元素填充整个#fastSearch元素 */ 54 list-style: none; /* 移除列表样式 */ 55 padding: 0; /* 移除默认的ul元素内边距 */ 56 border-radius: 5px 5px 5px 5px; 57 /* background-color: #fffffffc; */ 58 max-height: 600px; /* 根据需要调整最大高度 */ 59 overflow-y: auto; /* 当内容超过最大高度时显示滚动条 */ 60 backdrop-filter: blur(10px); /* 设置模糊效果，值越大模糊效果越明显 */ 61 background-color: rgba(242, 242, 242, 0.472); /* 设置半透明的背景色 */ 62} 63 64 65#searchResults a { 66 text-decoration: none !important; 67 padding: 10px; 68 display: inline-block; 69 width: 100%; 70 71} 72 73#searchResults a:hover, #searchResults a:focus { 74 outline: 0; 75 background-color: rgba(243, 243, 243, 0.627); 76 77 color: #0085a1; 78} 79 80#searchResults li:hover a span { 81 82 color: #0085a1; 83 } 84 85 86#search-btn { 87 /* position: absolute; 88 top: 0px; 89 right: 0px; */ 90 /* font-size: 24px; */ 91} 92 93@media (max-width:683px) { 94 #search-btn { 95 top: 0px; 96 } 97 #fastSearch{ 98 top: 100px; 99 width: 300px; 100 } 101 102} 103 104/* 对于WebKit浏览器（如Chrome和Safari） */ 105::-webkit-input-placeholder { 106 color: rgba(73, 73, 73, 0.761); 107} 108 109/* 对于Mozilla Firefox 4至18 */ 110:-moz-placeholder { 111 color: rgba(73, 73, 73, 0.761); 112 opacity: 1; /* Firefox默认给placeholder文字添加了透明度，所以需要设置opacity为1 */ 113} 114 115/* 对于Mozilla Firefox 19+ */ 116::-moz-placeholder { 117 color: rgba(73, 73, 73, 0.761); 118 opacity: 1; 119} 120 121/* 对于Internet Explorer 10-11 */ 122:-ms-input-placeholder { 123 color: rgba(73, 73, 73, 0.761); 124} 125 126/* 对于Microsoft Edge */ 127::-ms-input-placeholder { 128 color: rgba(73, 73, 73, 0.761); 129} 2.1 添加 js 文件 添加js文件 static\\js\\fastsearch.js ，并添加如下代码就大功告成了。\n1var fuse; // holds our search engine 2var fuseIndex; 3var searchVisible = false; 4var firstRun = true; // allow us to delay loading json data unless search activated 5var list = document.getElementById(\u0026#39;searchResults\u0026#39;); // targets the \u0026lt;ul\u0026gt; 6var first = list.firstChild; // first child of search list 7var last = list.lastChild; // last child of search list 8var maininput = document.getElementById(\u0026#39;searchInput\u0026#39;); // input box for search 9var resultsAvailable = false; // Did we get any search results? 10 11// ========================================== 12// The main keyboard event listener running the show 13// 14document.addEventListener(\u0026#39;keydown\u0026#39;, function(event) { 15 16 // CMD-/ to show / hide Search 17 if (event.altKey \u0026amp;\u0026amp; event.which === 191) { 18 // Load json search index if first time invoking search 19 // Means we don\u0026#39;t load json unless searches are going to happen; keep user payload small unless needed 20 doSearch(event) 21 } 22 23 // Allow ESC (27) to close search box 24 if (event.keyCode == 27) { 25 if (searchVisible) { 26 document.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;hidden\u0026#34;; 27 document.activeElement.blur(); 28 searchVisible = false; 29 } 30 } 31 32 // DOWN (40) arrow 33 if (event.keyCode == 40) { 34 if (searchVisible \u0026amp;\u0026amp; resultsAvailable) { 35 console.log(\u0026#34;down\u0026#34;); 36 event.preventDefault(); // stop window from scrolling 37 if ( document.activeElement == maininput) { first.focus(); } // if the currently focused element is the main input --\u0026gt; focus the first \u0026lt;li\u0026gt; 38 else if ( document.activeElement == last ) { last.focus(); } // if we\u0026#39;re at the bottom, stay there 39 else { document.activeElement.parentElement.nextSibling.firstElementChild.focus(); } // otherwise select the next search result 40 } 41 } 42 43 // UP (38) arrow 44 if (event.keyCode == 38) { 45 if (searchVisible \u0026amp;\u0026amp; resultsAvailable) { 46 event.preventDefault(); // stop window from scrolling 47 if ( document.activeElement == maininput) { maininput.focus(); } // If we\u0026#39;re in the input box, do nothing 48 else if ( document.activeElement == first) { maininput.focus(); } // If we\u0026#39;re at the first item, go to input box 49 else { document.activeElement.parentElement.previousSibling.firstElementChild.focus(); } // Otherwise, select the search result above the current active one 50 } 51 } 52}); 53 54 55// ========================================== 56// execute search as each character is typed 57// 58document.getElementById(\u0026#34;searchInput\u0026#34;).onkeyup = function(e) { 59 executeSearch(this.value); 60} 61 62document.querySelector(\u0026#34;body\u0026#34;).onclick = function(e) { 63 if (e.target.tagName === \u0026#39;BODY\u0026#39; || e.target.tagName === \u0026#39;DIV\u0026#39;) { 64 hideSearch() 65 } 66} 67 68document.querySelector(\u0026#34;#search-btn\u0026#34;).onclick = function(e) { 69 doSearch(e) 70} 71 72function doSearch(e) { 73 e.stopPropagation(); 74 if (firstRun) { 75 loadSearch() // loads our json data and builds fuse.js search index 76 firstRun = false // let\u0026#39;s never do this again 77 } 78 // Toggle visibility of search box 79 if (!searchVisible) { 80 showSearch() // search visible 81 } 82 else { 83 hideSearch() 84 } 85} 86 87function hideSearch() { 88 document.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;hidden\u0026#34; // hide search box 89 document.activeElement.blur() // remove focus from search box 90 searchVisible = false 91} 92 93function showSearch() { 94 document.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;visible\u0026#34; // show search box 95 document.getElementById(\u0026#34;searchInput\u0026#34;).focus() // put focus in input box so you can just start typing 96 searchVisible = true 97} 98 99// ========================================== 100// fetch some json without jquery 101// 102function fetchJSONFile(path, callback) { 103 var httpRequest = new XMLHttpRequest(); 104 httpRequest.onreadystatechange = function() { 105 if (httpRequest.readyState === 4) { 106 if (httpRequest.status === 200) { 107 var data = JSON.parse(httpRequest.responseText); 108 if (callback) callback(data); 109 } 110 } 111 }; 112 httpRequest.open(\u0026#39;GET\u0026#39;, path); 113 httpRequest.send(); 114} 115 116 117// ========================================== 118// load our search index, only executed once 119// on first call of search box (CMD-/) 120// 121function loadSearch() { 122 console.log(\u0026#39;loadSearch()\u0026#39;) 123 fetchJSONFile(\u0026#39;/index.json\u0026#39;, function(data){ 124 125 var options = { // fuse.js options; check fuse.js website for details 126 shouldSort: true, 127 location: 0, 128 distance: 100, 129 threshold: 0.4, 130 minMatchCharLength: 1, 131 keys: [ 132 \u0026#39;permalink\u0026#39;, 133 \u0026#39;title\u0026#39;, 134 \u0026#39;tags\u0026#39;, 135 \u0026#39;contents\u0026#39; 136 ] 137 }; 138 // Create the Fuse index 139 fuseIndex = Fuse.createIndex(options.keys, data) 140 fuse = new Fuse(data, options, fuseIndex); // build the index from the json file 141 }); 142} 143 144 145// ========================================== 146// using the index we loaded on CMD-/, run 147// a search query (for \u0026#34;term\u0026#34;) every time a letter is typed 148// in the search box 149// 150function executeSearch(term) { 151 let results = fuse.search(term); // the actual query being run using fuse.js 152 let searchitems = \u0026#39;\u0026#39;; // our results bucket 153 154 if (results.length === 0) { // no results based on what was typed into the input box 155 resultsAvailable = false; 156 searchitems = \u0026#39;\u0026#39;; 157 } else { // build our html 158 // console.log(results) 159 permalinks = []; 160 numLimit = 100; 161 for (let item in results) { // only show first 5 results 162 if (item \u0026gt; numLimit) { 163 break; 164 } 165 if (permalinks.includes(results[item].item.permalink)) { 166 continue; 167 } 168 // console.log(\u0026#39;item: %d, title: %s\u0026#39;, item, results[item].item.title) 169 searchitems = searchitems + \u0026#39;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39; + results[item].item.permalink + \u0026#39;\u0026#34; tabindex=\u0026#34;0\u0026#34;\u0026gt;\u0026#39; + \u0026#39;\u0026lt;span class=\u0026#34;title\u0026#34;\u0026gt;\u0026#39; + results[item].item.title + \u0026#39;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;; 170 permalinks.push(results[item].item.permalink); 171 } 172 resultsAvailable = true; 173 } 174 175 document.getElementById(\u0026#34;searchResults\u0026#34;).innerHTML = searchitems; 176 if (results.length \u0026gt; 0) { 177 first = list.firstChild.firstElementChild; // first result container — used for checking against keyboard up/down location 178 last = list.lastChild.firstElementChild; // last result container — used for checking against keyboard up/down location 179 } 180} ","date":"2024-03-31T20:26:11+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","section":"post","tags":["hugo","搜索","fuse"],"title":"Hugo：增加搜索功能"},{"categories":["Tech"],"contents":"1 申请域名 可以去找个免费域名网站，我用的是：\n域名申请或者购买成功了以后，我们还需要解析域名。\n2 解析域名 输入ping xxx.github.io得到 IP地址，xxx是你的Github用户名。\n找到了IP地址后，再将这个IP地址填入到之前DNS解析的Target里面，点击保存。\n","date":"2024-03-31T15:23:03+08:00","permalink":"https://huuuuuuo.github.io/post/githubpages%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/","section":"post","tags":["githubpages","域名","dns"],"title":"GithubPages配置域名"},{"categories":["Tech"],"contents":" 今天想要给博客搞个域名，涉及了一大堆专业名词，在此记录一下。\n1 域名 域名就是最常见的网址，比如 www.baidu.com ，因为ip地址不好记，所以用域名来代替，我们访问域名就是访问背后的ip地址。通过 ping 就可以得到 ip 地址了。\n1C:\u0026gt;ping www.baidu.com 2 3正在 Ping www.a.shifen.com [157.148.69.80] 具有 32 字节的数据: 4来自 157.148.69.80 的回复: 字节=32 时间=22ms TTL=51 5来自 157.148.69.80 的回复: 字节=32 时间=36ms TTL=51 6来自 157.148.69.80 的回复: 字节=32 时间=23ms TTL=51 7来自 157.148.69.80 的回复: 字节=32 时间=24ms TTL=51 8 9157.148.69.80 的 Ping 统计信息: 10 数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)， 11往返行程的估计时间(以毫秒为单位): 12 最短 = 22ms，最长 = 36ms，平均 = 26ms 2 A记录/AAAA记录 IPv4： 示例：www.exmaple.com. IN A 198.51.100.2 解释：【domain】 IN A 【IP地址】 IPv6： 示例：www.exmaple.com. IN AAAA 8fe0::8f61:ac8:30cd:a16e\n解释：【domain】 IN AAAA 【IP地址】\nIN的意思是「Internet」，不是IN/OUT的「IN」。\n干什么用呢？ 我们在浏览器输入域名后，需要向DNS服务器请求，找到这个域名对应的服务器IP。上面示例就是这么一条记录。\n虽然域名和IP都可以变更，但是相比来说域名变更更加简单和随意。所以当网站更换自己域名的时候，就需要修改这条记录。\n3 CNAME 示例：sub.example.com. IN CNAME hoge.example.com. 解释：【別名】 IN CNAME 【原名】 干什么用呢？ 给某一个域名起多个名字。\r也就是给你的大名取小名。\r类似于，jd.com，jd360.com，jingdong.com虽然是不同名字的域名，但是可以指向同一个原名jd.com。可以让企业的对外展示更加灵活。\n1举例： 2jd360.com IN CNAME jd.com 3jingdong.com IN CNAME jd.com 4jd.com IN A 123.123.123.123 （这条是A记录例子） 4 DNS DNS( Domain Name System) 是\r“域名系统”\r的英文缩写，它所提供的服务是用来将主机名和域名转换为IP地址的工作，\r就像电话簿一样。\r举例来说，如果你要访问域名http://qq.com，首先要通过DNS查出它的IP地址是119.147.15.13。\n打个比方，你电脑是你家，你家地址是一个IP，你要拜访百度的家，那肯定要知道百度家在哪里，你知道baidu.com，但是电脑访问的是网络地址，是数字，其它的他都不认识，百度家IP是220.181.38.148，但是你记不住，你电脑也不知道。\n那么你肯定要找备忘录啊，这时候，你电脑里有一个Hosts文件，这个文件是你的备忘录，然而你备忘录里什么都没写，这时候怎么办呢？是不是要去问？去哪问呢？打电话114去问，114就是情报局，里面什么都有，然后你问到了百度家的地址，接下来电脑就能顺着网线去找了。\n而这个114，就是DNS。\nDNS所在服务器的配置，决定了它的的快和慢，但不管怎样，它都会为你指定一个方向，就算是它找不到，他也会问他的上一级服务器要，但这就增加了查询时间，然后你就会觉得慢。\nDNS服务器是一个常年开着的服务器，做一个的指路人，是需要很大代价的，比如服务器费、电费，然后一旦是名声好的DNS，大家都会去用，所以负担也会比较大，这个时候一台DNS服务器的配置怎么样就体现出来了，因此，免费的DNS不是很多（但也不少）。\n5 DNS污染/DNS劫持 DNS污染：\nDNS能为你指明路，但也能暗中坑你一把，还能把你指到沟里去，这取决于你访问的DNS是否“善良”，有的DNS会雁过拔毛，顺走你的信息或者给你塞一张网页广告弹窗传单。\nDNS劫持：\n有的DNS会把你指向另一个地方。\nDNS污染或者DNS劫持，经常会导致上网的时候，原本没有广告弹窗的网页，蹦出各种奇奇怪怪的广告页面，甚至会跳转到其它网页里去，有时候还会有钓鱼诈骗，导致用户信息泄露，损失财产。还有就是QQ可以正常登录、游戏也可以正常玩，但是网页无论如何都打不开。（QQ自带有自己的安全DNS，所以不受影响）（纠正：QQ是内置设定了直连腾讯服务器IP，不需要通过DNS查找自己家的服务器IP地址）\n大家可以手动设置一下自己的网络DNS。电脑的，路由器的，甚至是手机的都可以设置一下。\n设置方法是打开电脑或者路由器的网络设置，然后找到DNS来填写你想要的。\n通常方便记忆，设置为主114.114.114.114，备用8.8.8.8。这俩就够用了。\n6 免费公共 DNS 服务器 由 DNSPod 提供的公共免费 DNS，后来 DNSPod 被腾讯(Tencent)收购，现在属于腾讯公司所有，稳定性和连通性也是不错的，经海外好友测试反馈，海外也可以使用。 DNSPod 除了 IPv4，现在同时支持 IPv6 DNS 和 DoT/DoH 服务。新增加了 DoT/DoH 的 IP 版。\nIPv4:\n1119.29.29.29 IPv6:\n12402:4e00:: 其他可参考：https://dns.icoa.cn/\n7 转发/重定向 实现页面的跳转有两种方式：转发和重定向。\n7.1 重定向 重定向(Redirect)就是通过各种方法**将各种网络请求重新定个方向转到其它位置**（如：网页重定向、域名的重定向、路由选择的变化也是对数据报文经由路径的一种重定向）。\n由浏览器端进行的页面跳转。\n服务器端接收到客户端的请求之后，会给客户端返回了一个临时响应头，这个临时响应头中记录了，客户端需要再次发送请求（重定向）的 URL 地址，客户端再收到了地址之后，会将请求发送到新的地址上，这就是请求重定向。\n这就好像张三（客户端）找李四（服务器端）借钱，李四没钱，于是李四就告诉张三，“我没钱，你去王五那借“，于是张三又去王五家借到了钱，这就是请求重定向。\n7.2 转发 由服务器端进行的页面跳转。在服务器内部的资源跳转方式。\n生在服务端程序内部，当服务器端收到一个客户端的请求之后，会先将请求，转发给目标地址，再将目标地址返回的结果转发给客户端。 而客户端对于这一切毫无感知的。\n这就好比，张三（客户端）找李四（服务器端）借钱，而李四没钱，于是李四又去王五那借钱，并把钱借给了张三，整个过程中张三只借了一次款，剩下的事情都是李四完成的，这就是请求转发。\n其他记录 还有其他MX记录等后续用到再更新\n参考资料：\n就是这么犀利！一文彻底理解DNS！ DNS的A、CNAME、MX、NS、TXT、SPF记录 https://www.zhihu.com/question/34826522 https://dns.icoa.cn/ https://worktile.com/kb/p/37343 ","date":"2024-03-31T14:33:56+08:00","permalink":"https://huuuuuuo.github.io/post/%E5%9F%9F%E5%90%8Da%E8%AE%B0%E5%BD%95cname%E7%AD%89%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88/","section":"post","tags":["域名","A记录","CNAME","DNS"],"title":"域名、A记录、CNAME等都是什么"},{"categories":["Tech"],"contents":"偶然看见了一位大佬的博客 给 Hugo 博客添加随机文章入口 ，发现了他做了这个功能，感觉可以搞一下，于是借鉴了她的代码，感谢。\n1 显示效果 在博客的右上角添加了一个叫 STROLL 的随机访问入口，点击后即可随机浏览一篇文章。\n2 解决方案 新增 layouts\\partials\\random.html ，并且在其中添加代码：\n1\u0026lt;script\u0026gt; 2 function goToRandomPost() { 3 const pages = [ 4 {{ range ((where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;)) }} 5 \u0026#34;{{ .RelPermalink }}?utm_source=random\u0026#34;, 6 {{ end -}} 7 ]; 8 const rand = Math.floor(Math.random() * pages.length); 9 window.location.href = pages[rand]; 10 } 11\u0026lt;/script\u0026gt; 然后再导航栏的html中添加一个入口，在 layouts\\partials\\nav.html 中添加：\n1\u0026lt;li\u0026gt; 2 {{ partial \u0026#34;random\u0026#34; . }} 3 \u0026lt;a class=\u0026#34;random\u0026#34; onclick=\u0026#39;goToRandomPost()\u0026#39;\u0026gt;STROLL\u0026lt;/a\u0026gt; 4\u0026lt;/li\u0026gt; 这样就可以完成这个随机访问的功能了~\n","date":"2024-03-30T20:26:44+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E9%9A%8F%E6%9C%BA%E6%B5%8F%E8%A7%88%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/","section":"post","tags":["hugo","随机浏览"],"title":"Hugo：添加随机浏览文章功能"},{"categories":["Tech"],"contents":"首先感谢 眠于水月间 大佬，文章主要收集于他的文章，[Hugo | 在 Stack 主题上可行的短代码们]\n本文旨在收集一些有趣的短代码，因此主要是呈现使用方式，以便快速使用\nTip\n实际使用需要去掉前括号的空格，以下所有样式皆如此\n1 评分 1{ {\u0026lt; rating 10 7 \u0026gt;}} //总星数 实际星数；不可以打半星；实际使用需要去掉前括号的空格 显示效果如下：\n2 卡片 1{ {\u0026lt; card \u0026gt;}} 2可以在这里插入链接假装是卡片式链接。 3{ {\u0026lt; /card \u0026gt;}} 可以在这里插入链接\n假装是卡片式链接。\n3 notice 1{ {\u0026lt; notice tip \u0026gt;}} 2实际使用需要去掉前括号的空格，以下所有样式皆如此 3 4![image-20240330163521774](/img/image-20240330163521774.png) 5 6{ {\u0026lt; /notice \u0026gt;}} Warning\n实际使用需要去掉前括号的空格，以下所有样式皆如此\n4 对话 1{ {\u0026lt; message from=\u0026#34;self\u0026#34; accountID=\u0026#34;twitter/昵称\u0026#34; images=\u0026#34;图片链接\u0026#34; timestamp=\u0026#34;自定义时间\u0026#34; name=\u0026#34;name\u0026#34; \u0026gt;}} 这里是自定义的信息内容。 { {\u0026lt; /message \u0026gt;}} 2 3{ {\u0026lt; message accountID=\u0026#34;twitter/昵称\u0026#34; images=\u0026#34;图片链接\u0026#34; timestamp=\u0026#34;自定义时间\u0026#34; name=\u0026#34;name\u0026#34; \u0026gt;}} 雷军 3-30 17:06\r澎湃OS再改改 金凡 3-30 17:07\r好的！ 5 时间轴 1{ {\u0026lt; timeline date=\u0026#34;2024\u0026#34; title=\u0026#34;哈哈哈\u0026#34; description=\u0026#34;啊呀\u0026#34; tags=\u0026#34;嘻嘻\u0026#34; \u0026gt;}} 2 3{ {\u0026lt; timeline date=\u0026#34;2023\u0026#34; title=\u0026#34;哈哈哈\u0026#34; description=\u0026#34;啊呀\u0026#34; tags=\u0026#34;嘻嘻\u0026#34; \u0026gt;}} 4 5{ {\u0026lt; timeline date=\u0026#34;2022\u0026#34; title=\u0026#34;哈哈哈\u0026#34; description=\u0026#34;啊呀\u0026#34; tags=\u0026#34;嘻嘻\u0026#34; \u0026gt;}} 2024\r嘻嘻\r哈哈哈\r啊呀\r2023\r嘻嘻\r哈哈哈\r啊呀\r2022\r嘻嘻\r哈哈哈\r啊呀\r6 图片轮播 1{ {\u0026lt; imgloop \u0026#34;1.jpg,2.jpg,3.jpg\u0026#34; \u0026gt;}} //需要使用url 8 PDF、PPT、网页 1{ {\u0026lt; pdf src=\u0026#34;这里放pdf链接，本地文件当然也可以！跟md文件放在一个文件夹里就行。\u0026#34; \u0026gt;}} 这里其实放什么都可以，只要是个链接就能够进行浏览\n比如，一个网页：\n9 网易云音乐 一首歌：\n1{ {\u0026lt; netease 2086327879 0 \u0026gt;}} //歌曲的id;是否自动播放(1为自动播放，0为手动播放) 一个歌单：\n1{ {\u0026lt; netease-list 154720941 0 \u0026gt;}} //歌曲的id;是否自动播放(1为自动播放，0为手动播放) 10 bilibili 1{ {\u0026lt; bilibili BV1oT4y1671T\u0026gt;}} 11 引用 NeoDB 条目 1{ {\u0026lt; neodb \u0026#34;https://neodb.social/book/1jQVzdSlbXWPMetFBuqtPJ\u0026#34; \u0026gt;}} 有点问题\n","date":"2024-03-30T15:53:28+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%AD%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/","section":"post","tags":["hugo","shortcodes","短代码"],"title":"Hugo：一些有趣的短代码收集"},{"categories":["Tech"],"contents":"1 显示效果 第一种，正经标记：\n对文字进行标记\r第二种，将文字放在代码里，利用代码的颜色来进行标记：\n对文字进行标记\n2 解决方案 首先，利用短代码，添加 ./layouts/shortcodes/mark.html 文件，并添加如下代码：\n1\u0026lt;mark\u0026gt;{{ .Get \u0026#34;text\u0026#34; }}\u0026lt;/mark\u0026gt; 其次，在 themes\\hugo-theme-cleanwhite\\static\\css\\bootstrap.min.css 中可以随意修改喜欢的标记颜色：\n1.mark,mark{padding:.2em;background-color:#ffee33a6;border-radius:10px} 也可以新建一个 custom.css ：\n1mark{ 2 background: hsla(199, 64%, 63%, 0.696); 3} 然后在 mark.html 中引用就行了：\n1\u0026lt;head\u0026gt; 2 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;/css/custom.css\u0026#34;\u0026gt; 3\u0026lt;/head\u0026gt; 这样就可以了，在用的时候，添加短代码即可：\n1{ {\u0026lt; mark text=\u0026#34;哈哈哈哈\u0026#34; \u0026gt;}} //实际使用时去掉前括号的空格 ","date":"2024-03-30T13:32:11+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%96%87%E5%AD%97%E6%A0%87%E8%AE%B0/","section":"post","tags":["hugo","mark","标记"],"title":"Hugo：文字标记"},{"categories":["Tech"],"contents":"1 显示效果 目前的显示效果如下，每篇文章可以正常显示最后修改时间。\n但是之前，\r这两个地方都是显示同一个时间，那就是最近一次 git 提交时间的8小时之前。\r一开始以为是主题修改了，导致时间会改变，尝试了不修改主题内的东西，还是一样的结果。\n在 config.toml 中也都是设置正确的：\n1[frontmatter] 2 lastmod = [\u0026#39;lastmod\u0026#39;,\u0026#39;:git\u0026#39;, \u0026#39;:fileModTime\u0026#39;, \u0026#39;date\u0026#39;, \u0026#39;publishDate\u0026#39;] 问题是，在本地进行 hugo serve 的时候，本地的效果是正确的。那么我就开始考虑是发布的时候，github acition 的 workflow 出现问题了。\n1.1 排查 timezone 在 .github\\workflows\\deploy.yml 中添加如下代码：\n1- name: Set timezone 2 run: echo \u0026#34;TZ=Asia/Shanghai\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV 发现发布以后，时间变成发布的时间了，但是每篇文章还是一致的，所以不是发布时间的问题。如果要以 git 发布时间来作为最后修改时间，可以改一下这一项。\n1.2 排查 workflow 在进行 workflow 排查的时候，想起来对于 workflow 来说，有一项是在服务端进行如下操作的：\n1- name: Build Web 2 run: hugo 在服务端进行 hugo 构建的话，就有可能会携带的 lastmod 信息被重建，从而导致时间不准，遂进行改进。\n2 解决方案 2.1 修改workflows 将.github\\workflows\\deploy.yml 中的上述代码注释掉，也就是：\n1# - name: Build Web 2# run: hugo 2.2 推送public 这时候，我们的思路是：在本地进行 hugo 的构建，然后将 public\\推送到GitHub Pages，从而避开在服务端进行 hugo 构建的操作。于是就有了接下来的操作。\n原先，在 themes\\hugo-theme-cleanwhite\\.gitignore中 忽略了 public\\的推送，这时候将它注释掉：\n1# public/ 然后，如果在 git 推送的时候没有进行 hugo 构建的话，那么得在流程上加上 hugo构建，也就是：\n1hugo 2git add . 3git commit -m \u0026#34;update\u0026#34; 4git push origin master 至此，以及可以通过本地构建，修复这个最后修改时间不一致的问题了。\n3 后续思考 其实这个问题并没有根本上解决，理论上是可以在服务端进行hugo 构建的，后续可以继续排查，可能是还有什么bug没有找到。\n","date":"2024-03-30T11:59:46+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%90%8E%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/","section":"post","tags":["hugo","lastmod"],"title":"Hugo：文章发布后最后修改时间不一致问题"},{"categories":["Tech"],"contents":"1 代码高亮风格 代码高亮风格很多，可以参见 Chroma Style Gallery\n看起来都不错，可以考虑添加进 hugo\n2 遇到问题 之前我已经在 config.toml 中已经添加如下配置：\n1[markup] 2 [markup.highlight] 3 codeFences = true 4 guessSyntax = true 5 hl_Lines = \u0026#34;\u0026#34; 6 lineNoStart = 1 7 lineNos = true 8 font_size = 19 9 lineNumbersInTable = false 10 noClasses = true 11 tabWidth = 4 12 style = \u0026#34;dracula\u0026#34; 启动的风格是 dracula，也就是这样：\n在网站上显示的代码块是这样的：\n可以看出来，似乎只改了背景颜色，而代码那种五颜六色的样子并没有实现，之前一直尝试解决，却没有找到缘由，今天偶然间发现了，是不是没有将代码块所使用的代码语言进行标记，于是在进行标记了一下之后就出现了如下：\n1import os 2import shutil 3import codecs 4 5# 定义源路径和目标路径 6source_path = \u0026#34;content/post/postimg\u0026#34; 7destination_path = \u0026#34;static/img\u0026#34; 8 9# 复制文件，如果目标路径已存在文件则不覆盖 10for filename in os.listdir(source_path): 11 source_file = os.path.join(source_path, filename) 12 destination_file = os.path.join(destination_path, filename) 13 if not os.path.exists(destination_file): 14 shutil.copy2(source_file, destination_file) 15 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 16 else: 17 print(f\u0026#34;pass\u0026#34;) 1\u0026lt;template\u0026gt; 2 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; 3 \u0026lt;img src=\u0026#34;./assets/logo.png\u0026#34;\u0026gt; 4 \u0026lt;router-view/\u0026gt; 5 \u0026lt;/div\u0026gt; 6\u0026lt;/template\u0026gt; 1public class HelloJava { 2 public static void main(String[] args) { 3 System.out.println(\u0026#34;哈哈哈\u0026#34;); 4 } 5} 1.highlight pre { 2 padding-right: 75px; 3 /* background-color:#f8f8f8 !important; */ 4} 1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3 \u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width,initial-scale=1.0\u0026#34;\u0026gt; 6 \u0026lt;title\u0026gt;vuehello\u0026lt;/title\u0026gt; 7 \u0026lt;/head\u0026gt; 8 \u0026lt;body\u0026gt; 9 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 10 \u0026lt;!-- built files will be auto injected --\u0026gt; 11 \u0026lt;/body\u0026gt; 12\u0026lt;/html\u0026gt; 2 解决方案 由此，可以得到解决方案，就是在写 markdown 的时候对代码进行标记，也就是\n1```java 2public class HelloJava { 3 public static void main(String[] args) { 4 System.out.println(\u0026#34;哈哈哈\u0026#34;); 5 } 6} 7``` 如果你使用的是 Typora ，则可以直接在右下角添加代码语言：\n这样就可以了，解决。你也可以尝试换成各种不同的代码高亮风格来进行尝试了。\n","date":"2024-03-30T02:11:00+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E9%A3%8E%E6%A0%BC/","section":"post","tags":["hugo","代码高亮","Chroma Style Gallery"],"title":"Hugo：代码高亮风格"},{"categories":["Tech"],"contents":"1 显示效果 鼠标未移动到上面的时候，根据发表文章的数量显示热力图：\n如果鼠标移动到上面，会显示当天发表的文章详情，并且可以点击进行跳转：\n2 解决方案 本文解决方案参考 HUGO 折腾随记之热力图 / 段落导航 、如何给 Hugo 博客添加热力图 两位大佬的文章，并进行了改造。\n改造点主要包括：\n适应性改为侧边栏热力图 只显示一个月的文章发表记录，即一个月的热力图 添加文件： themes\\hugo-theme-cleanwhite\\layouts\\partials\\heatmap.html ，然后在 themes\\hugo-theme-cleanwhite\\layouts\\partials\\sidebar.html 中添加：\n1\u0026lt;!-- heatmap --\u0026gt; 2\u0026lt;section\u0026gt; 3 \u0026lt;hr\u0026gt; 4 \u0026lt;h5\u0026gt;HEATMAP | {{ .Date.Format \u0026#34;January\u0026#34; }}\u0026lt;/h5\u0026gt; 5\t{{ partial \u0026#34;heatmap\u0026#34; . }} 6\u0026lt;/section\u0026gt; heatmap.html 的完整代码贴在下面：\n1\u0026lt;div id=\u0026#34;heatmap\u0026#34; style=\u0026#34;max-width: 290px;height: 200px;margin-bottom: 6px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 2\u0026lt;!-- \u0026lt;script src=\u0026#34;https://img.koobai.com/echarts.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; 3\u0026lt;script src=\u0026#34;/js/echarts.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 4\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; 5 var chartDom = document.getElementById(\u0026#39;heatmap\u0026#39;); 6 var myChart = echarts.init(chartDom); 7 window.onresize = function() { 8 myChart.resize(); 9 }; 10 var option; 11 var dataMap = new Map(); 12 {{ range ((where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;)) }} 13 var key = {{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}; 14 var value = dataMap.get(key); 15 var wordCount = {{ div .WordCount 1 }}; 16 var link = {{ .RelPermalink}}; 17 var title = {{ .Title }}; 18 19 // multiple posts in same day 20 if (value == null) { 21 dataMap.set(key, [{wordCount,link, title}]); 22 } else { 23 value.push({wordCount,link, title}); 24 } 25 {{- end -}} 26 27 var data = []; 28 for (const [key, value] of dataMap.entries()) { 29 data.push([key, value.length]); 30 } 31 32 var currentDate = new Date(); 33 var currentYear = currentDate.getFullYear(); 34 var currentMonth = currentDate.getMonth(); 35 var firstDayCurrentMonth = new Date(currentYear, currentMonth, 1); 36 var lastDayCurrentMonth = new Date(currentYear, currentMonth + 1, 0); 37 38 var startDate = echarts.format.formatTime(\u0026#39;yyyy-MM-dd\u0026#39;, firstDayCurrentMonth); 39 var endDate = echarts.format.formatTime(\u0026#39;yyyy-MM-dd\u0026#39;, lastDayCurrentMonth); 40 41 // 检测浏览器主题模式并选择颜色方案 42 var prefersDarkMode = window.matchMedia \u0026amp;\u0026amp; window.matchMedia(\u0026#39;(prefers-color-scheme: dark)\u0026#39;).matches; 43 44 // 定义明亮模式下的颜色方案 45 var lightTheme = { 46 backgroundColor: \u0026#39;#FFFFFF\u0026#39;, 47 fangkuaicolor:\u0026#39;#F1F1F1\u0026#39;, 48 gaoliangcolor: [\u0026#39;#0085A121\u0026#39;,\u0026#39;#0085A1B8\u0026#39;], 49 // gaoliangcolor: \u0026#39;#0085A1B8\u0026#39;, 50 riqiColor: \u0026#39;#999\u0026#39;, 51 textbrcolor: \u0026#39;#FFF\u0026#39;, 52 xiankuangcolor:\u0026#39;rgba(0, 0, 0, 0.0)\u0026#39;, 53 }; 54 55 // 定义暗黑模式下的颜色方案 56 var darkTheme = { 57 backgroundColor: \u0026#39;#1A1718\u0026#39;, 58 fangkuaicolor:\u0026#39;#282325\u0026#39;, 59 gaoliangcolor: [\u0026#39;#b25f2f\u0026#39;], 60 riqiColor: \u0026#39;#666\u0026#39;, 61 textbrcolor: \u0026#39;#332D2F\u0026#39;, 62 xiankuangcolor:\u0026#39;rgba(0, 0, 0, 0.0)\u0026#39;, 63 }; 64 65 // 根据浏览器主题模式选择当前主题 66 var currentTheme = prefersDarkMode ? darkTheme : lightTheme; 67 68 option = { 69 tooltip: { 70 hideDelay: 1000, 71 enterable: true, 72 backgroundColor: currentTheme.textbrcolor, 73 borderWidth: 0, // 边框宽度为0 74 formatter: function (p) { 75 const date = p.data[0]; 76 const posts = dataMap.get(date); 77 var content = `\u0026lt;span style=\u0026#34;font-size: 1.5rem;font-family: LXGW WenKai Screen;color:#ABABAB\u0026#34;\u0026gt;${date}\u0026lt;/span\u0026gt;`; 78 for (const [i, post] of posts.entries()) { 79 content += \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 80 var link = post.link; 81 var title = post.title; 82 var wordCount = post.wordCount; 83 content += `\u0026lt;a href=\u0026#34;${link}\u0026#34; target=\u0026#34;_blank\u0026#34; style=\u0026#34;font-size: 1.6rem;font-family: LXGW WenKai Screen;\u0026#34;\u0026gt;${title} | ${wordCount}字`; 84 } 85 return content; 86 } 87 }, 88 visualMap: { 89 min: 0, 90 max: 10, 91 type: \u0026#39;piecewise\u0026#39;, 92 show: false, 93 hoverLink:true, 94 inRange: { 95 color: currentTheme.gaoliangcolor 96 // color: [\u0026#39;#7aa8744c\u0026#39; ] 97 }, 98 // itemGap: 20, 99 showLabel: false, 100 splitNumber: 4, 101 102 }, 103 calendar: { 104 left: 45, 105 top:0, 106 bottom:0, 107 right: 0, 108 cellSize: [\u0026#39;auto\u0026#39;, 13], 109 range: [startDate, endDate], 110 itemStyle: { 111 color: currentTheme.fangkuaicolor, 112 borderWidth: 5.5, 113 borderColor: currentTheme.backgroundColor, 114 }, 115 yearLabel: { show: false }, 116 monthLabel: { 117 show: false 118 // nameMap: [\u0026#39;January\u0026#39;, \u0026#39;February\u0026#39;, \u0026#39;March\u0026#39;, \u0026#39;April\u0026#39;, \u0026#39;May\u0026#39;, \u0026#39;June\u0026#39;, \u0026#39;July\u0026#39;, \u0026#39;August\u0026#39;, \u0026#39;September\u0026#39;, \u0026#39;October\u0026#39;, \u0026#39;November\u0026#39;, \u0026#39;December\u0026#39;], 119 // textStyle: { 120 // color: currentTheme.riqiColor, 121 // } 122 }, 123 dayLabel: { 124 125 firstDay: 1, 126 nameMap: [\u0026#39;Sun\u0026#39;, \u0026#39;Mon\u0026#39;, \u0026#39;Tues\u0026#39;, \u0026#39;Wed\u0026#39;, \u0026#39;Thur\u0026#39;, \u0026#39;Fri\u0026#39;, \u0026#39;Sat\u0026#39;], 127 textStyle: { 128 color: currentTheme.riqiColor, 129 fontFamily:\u0026#39;LXGW WenKai Screen\u0026#39;, 130 fontSize:14 131 } 132 }, 133 splitLine: { 134 lineStyle: { 135 color: currentTheme.xiankuangcolor, 136 } 137 } 138 }, 139 series: { 140 type: \u0026#39;heatmap\u0026#39;, 141 coordinateSystem: \u0026#39;calendar\u0026#39;, 142 data: data, 143 } 144 }; 145 146 myChart.setOption(option); 147 myChart.on(\u0026#39;click\u0026#39;, function(params) { 148 if (params.componentType === \u0026#39;series\u0026#39;) { 149 // open the first post on the day 150 const post = dataMap.get(params.data[0])[0]; 151 const link = window.location.origin + post.link; 152 window.open(link, \u0026#39;_blank\u0026#39;).focus(); 153 } 154}); 155\u0026lt;/script\u0026gt; ","date":"2024-03-30T01:43:14+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E7%83%AD%E5%8A%9B%E5%9B%BE/","section":"post","tags":["hugo","热力图"],"title":"Hugo：添加热力图"},{"categories":["Tech"],"contents":"1 显示效果 想要知乎这种图片点击放大的效果，一查才知道是灯箱。\n2 解决方案 2.1 修改 config.toml 在 config.toml文件中，添加如下代码：\n1[params] 2 fancybox = true 2.2 创建 render-image.html 在此路径下创建文件：/layouts/_default/_markup/render-image.html\n1{{if .Page.Site.Params.fancybox }} 2\u0026lt;div class=\u0026#34;post-img-view\u0026#34;\u0026gt; 3\u0026lt;a data-fancybox=\u0026#34;gallery\u0026#34; href=\u0026#34;{{ .Destination | safeURL }}\u0026#34;\u0026gt; 4\u0026lt;img src=\u0026#34;{{ .Destination | safeURL }}\u0026#34; alt=\u0026#34;{{ .Text }}\u0026#34; {{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }} /\u0026gt; 5\u0026lt;/a\u0026gt; 6\u0026lt;/div\u0026gt; 7{{ end }} 2.3 添加内容 在 footer.html 中添加以下内容：\n1{{if .Page.Site.Params.fancybox }} 2\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css\u0026#34; /\u0026gt; 4\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 5{{ end }} ","date":"2024-03-29T01:16:10+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7/","section":"post","tags":["hugo","图片放大","灯箱","fancybox"],"title":"Hugo：图片点击放大"},{"categories":["Tech"],"contents":"1 显示效果 2 解决方案 我正在使用的主题所提供的评论方案是：\n1 [params.giscus] 2 data_repo=\u0026#34;your GitHub repo\u0026#34; 3 data_repo_id=\u0026#34;your repo id\u0026#34; 4 data_category=\u0026#34;your category\u0026#34; 5 data_category_id=\u0026#34;your category id\u0026#34; 6 data_mapping=\u0026#34;pathname\u0026#34; 7 data_reactions_enabled=\u0026#34;1\u0026#34; 8 data_emit_metadata=\u0026#34;0\u0026#34; 9 data_theme=\u0026#34;light\u0026#34; 10 data_lang=\u0026#34;en\u0026#34; 11 crossorigin=\u0026#34;anonymous\u0026#34; 在申请giscus 的时候，显示的是：\n1\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; 2 data-repo=\u0026#34;[在此输入仓库]\u0026#34; 3 data-repo-id=\u0026#34;[在此输入仓库 ID]\u0026#34; 4 data-category=\u0026#34;[在此输入分类名]\u0026#34; 5 data-category-id=\u0026#34;[在此输入分类 ID]\u0026#34; 6 data-mapping=\u0026#34;pathname\u0026#34; 7 data-strict=\u0026#34;0\u0026#34; 8 data-reactions-enabled=\u0026#34;1\u0026#34; 9 data-emit-metadata=\u0026#34;0\u0026#34; 10 data-input-position=\u0026#34;bottom\u0026#34; 11 data-theme=\u0026#34;light\u0026#34; 12 data-lang=\u0026#34;zh-CN\u0026#34; 13 crossorigin=\u0026#34;anonymous\u0026#34; 14 async\u0026gt; 15\u0026lt;/script\u0026gt; 直接复制过来没有反应，后来才发现是参数写法不一样，把 - 改为 _ 就可以了\n","date":"2024-03-28T14:55:47+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/","section":"post","tags":["hugo","评论","giscus"],"title":"Hugo：添加评论功能"},{"categories":["Tech"],"contents":"1 目前显示效果 1git add . 2git commit -m \u0026#34;update\u0026#34; 3git push origin master 2 解决方案 2.1 内容折叠 新建 themes\\hugo-theme-cleanwhite\\layouts\\shortcodes\\details.html 文件，并添加以下代码：\n1\u0026lt;details style=\u0026#34;background-color:#ffffff;border-radius:6px;border:2px dashed rgba(187, 181, 181, 0.712);\u0026#34;\u0026gt; 2 \u0026lt;summary\u0026gt; \u0026lt;font color=#817f7f\u0026gt; \u0026gt; \u0026gt; \u0026gt; 展开 \u0026gt; \u0026gt; \u0026gt; \u0026lt;/font\u0026gt;\u0026lt;/summary\u0026gt; 3 {{ .Inner | markdownify }} 4\u0026lt;/details\u0026gt; 以上是旧代码，不知道为什么我使用的时候，没有前面的那个小箭头，不够直观。\n于是我误打误撞又改成了以下代码，只能显示详情，不能添加 summary ，summary 里面一旦有别的东西，就不会显示小箭头了：\n1\u0026lt;details style=\u0026#34;background-color:#e6e3e336;border-radius:6px;border:2px dashed rgba(187, 181, 181, 0.712);\u0026#34;\u0026gt; 2 {{ .Inner | markdownify }} 3\u0026lt;/details\u0026gt; 在 markdown 中使用时这么写：\n2.2 代码块大小限制 我是直接在主题文件中改的，在主题文件的 themes\\hugo-theme-cleanwhite\\static\\css\\hugo-theme-cleanwhite.min.css 中添加：\n1pre code{font-size:16px;display:block;width:auto;white-space:pre;word-wrap:normal} 2.post-content pre,code{font-family:LXGW WenKai Screen;font-size:18px;line-height:1.5em;max-height:50em;word-spacing:0.2em;letter-spacing:0.015em;font-weight: 600;} 其中：第一行中，\nfont-size:16px ：代码块中的字体大小\ndisplay:block ：代码块显示方式为 block ；\n第二行中， font-family:LXGW WenKai Screen ：代码块字体\nline-height:1.5em ：代码块行间距\nmax-height:50em ：代码块最大高度为50倍当前字号的大小，超过会显示滚动条，1em表示当前元素的字号大小\nword-spacing:0.2em ： 代码块中的字间距\nletter-spacing:0.015em ：代码块中的字母间距\nfont-weight: 600 ：字重，就是字的粗细程度\n显示效果如下：\n1import os 2import shutil 3import codecs 4 5# 定义源路径和目标路径 6source_path = \u0026#34;content/post/postimg\u0026#34; 7destination_path = \u0026#34;static/img\u0026#34; 8 9# 复制文件，如果目标路径已存在文件则不覆盖 10for filename in os.listdir(source_path): 11 source_file = os.path.join(source_path, filename) 12 destination_file = os.path.join(destination_path, filename) 13 if not os.path.exists(destination_file): 14 shutil.copy2(source_file, destination_file) 15 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 16 else: 17 print(f\u0026#34;pass\u0026#34;) 18print(f\u0026#34;----------------------------------\u0026#34;) 19# 遍历md文件并替换字符串 20md_files = [f for f in os.listdir(\u0026#34;content/post\u0026#34;) if f.endswith(\u0026#34;.md\u0026#34;)] 21for md_file in md_files: 22 md_file_path = os.path.join(\u0026#34;content/post\u0026#34;, md_file) 23 with codecs.open(md_file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 24 content = file.read() 25 new_content = content.replace(\u0026#39;/img/\u0026#39;, \u0026#39;/img/\u0026#39;) 26 if content != new_content: 27 with codecs.open(md_file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 28 file.write(new_content) 29 print(f\u0026#34;文件 {md_file_path} 替换成功！\u0026#34;) 30 else: 31 print(f\u0026#34;pass\u0026#34;) 32 33 34# 定义源路径和目标路径 35source_path = \u0026#34;content/post/postimg\u0026#34; 36destination_path = \u0026#34;static/img\u0026#34; 37 38# 复制文件，如果目标路径已存在文件则不覆盖 39for filename in os.listdir(source_path): 40 source_file = os.path.join(source_path, filename) 41 destination_file = os.path.join(destination_path, filename) 42 if not os.path.exists(destination_file): 43 shutil.copy2(source_file, destination_file) 44 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 45 else: 46 print(f\u0026#34;pass\u0026#34;) 47print(f\u0026#34;----------------------------------\u0026#34;) 48# 遍历md文件并替换字符串 49md_files = [f for f in os.listdir(\u0026#34;content/post\u0026#34;) if f.endswith(\u0026#34;.md\u0026#34;)] 50for md_file in md_files: 51 md_file_path = os.path.join(\u0026#34;content/post\u0026#34;, md_file) 52 with codecs.open(md_file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 53 content = file.read() 54 new_content = content.replace(\u0026#39;/img/\u0026#39;, \u0026#39;/img/\u0026#39;) 55 if content != new_content: 56 with codecs.open(md_file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 57 file.write(new_content) 58 print(f\u0026#34;文件 {md_file_path} 替换成功！\u0026#34;) 59 else: 60 print(f\u0026#34;pass\u0026#34;) 2.3 结合起来 1import os 2import shutil 3import codecs 4 5# 定义源路径和目标路径 6source_path = \u0026#34;content/post/postimg\u0026#34; 7destination_path = \u0026#34;static/img\u0026#34; 8 9# 复制文件，如果目标路径已存在文件则不覆盖 10for filename in os.listdir(source_path): 11 source_file = os.path.join(source_path, filename) 12 destination_file = os.path.join(destination_path, filename) 13 if not os.path.exists(destination_file): 14 shutil.copy2(source_file, destination_file) 15 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 16 else: 17 print(f\u0026#34;pass\u0026#34;) 18print(f\u0026#34;----------------------------------\u0026#34;) 19# 遍历md文件并替换字符串 20md_files = [f for f in os.listdir(\u0026#34;content/post\u0026#34;) if f.endswith(\u0026#34;.md\u0026#34;)] 21for md_file in md_files: 22 md_file_path = os.path.join(\u0026#34;content/post\u0026#34;, md_file) 23 with codecs.open(md_file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 24 content = file.read() 25 new_content = content.replace(\u0026#39;/img/\u0026#39;, \u0026#39;/img/\u0026#39;) 26 if content != new_content: 27 with codecs.open(md_file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 28 file.write(new_content) 29 print(f\u0026#34;文件 {md_file_path} 替换成功！\u0026#34;) 30 else: 31 print(f\u0026#34;pass\u0026#34;) 32 33 34# 定义源路径和目标路径 35source_path = \u0026#34;content/post/postimg\u0026#34; 36destination_path = \u0026#34;static/img\u0026#34; 37 38# 复制文件，如果目标路径已存在文件则不覆盖 39for filename in os.listdir(source_path): 40 source_file = os.path.join(source_path, filename) 41 destination_file = os.path.join(destination_path, filename) 42 if not os.path.exists(destination_file): 43 shutil.copy2(source_file, destination_file) 44 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 45 else: 46 print(f\u0026#34;pass\u0026#34;) 47print(f\u0026#34;----------------------------------\u0026#34;) 48# 遍历md文件并替换字符串 49md_files = [f for f in os.listdir(\u0026#34;content/post\u0026#34;) if f.endswith(\u0026#34;.md\u0026#34;)] 50for md_file in md_files: 51 md_file_path = os.path.join(\u0026#34;content/post\u0026#34;, md_file) 52 with codecs.open(md_file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 53 content = file.read() 54 new_content = content.replace(\u0026#39;/img/\u0026#39;, \u0026#39;/img/\u0026#39;) 55 if content != new_content: 56 with codecs.open(md_file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 57 file.write(new_content) 58 print(f\u0026#34;文件 {md_file_path} 替换成功！\u0026#34;) 59 else: 60 print(f\u0026#34;pass\u0026#34;) 3 改进 3.1 notice+details Note\n结合 details 可以使notice具有折叠效果，但是对于notice 的初衷来说，本就是为了提醒，就不需要折叠了，仅供以后想用的时候进行参考。\n使用时对于notice是没有变化的，依然是：\n改动方式是在 notice.html 后面进行稍微改动，添加 summary 和 details ：\n1\u0026lt;div class=\u0026#34;notice {{ $noticeType }}\u0026#34; {{ if len .Params | eq 2 }} id=\u0026#34;{{ .Get 1 }}\u0026#34; {{ end }}\u0026gt; 2\u0026lt;details\u0026gt; 3 \u0026lt;summary\u0026gt; 4 \u0026lt;p class=\u0026#34;notice-title\u0026#34;\u0026gt; 5 \u0026lt;span class=\u0026#34;icon-notice baseline\u0026#34;\u0026gt; 6 {{ printf \u0026#34;icons/%s.svg\u0026#34; $noticeType | readFile | safeHTML }} 7 \u0026lt;/span\u0026gt; 8 {{- i18n $noticeType -}} 9 \u0026lt;/p\u0026gt; 10 \u0026lt;/summary\u0026gt; 11 {{- if or $block (not $raw) }}{{ $raw }}{{ else }}\u0026lt;p\u0026gt;{{ $raw }}\u0026lt;/p\u0026gt;{{ end -}} 12\u0026lt;/details\u0026gt; 13\u0026lt;/div\u0026gt; 3.2 可添加 css 来改进动态效果 ","date":"2024-03-27T23:23:48+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/","section":"post","tags":["hugo","折叠","代码块"],"title":"Hugo：内容折叠与代码块大小限制"},{"categories":["Tech"],"contents":"显示效果 解决方案 本文使用 不蒜子 来进行网站访问量的统计\n前期也踩了几个坑，最后在官网发现了最佳解决方案，只需要将官网上的两行代码稍加改进就可以在hugo上完美使用，这是官网的使用方式：\n1\u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2\u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt;本站总访问量\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次\u0026lt;/span\u0026gt; 我们在 hugo 的 themes\\hugo-theme-cleanwhite\\layouts\\partials\\footer.html 文件中的相应位置（取决于你想插入的位置），插入以下代码：\n1\u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2\u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt;本站总访问量 \u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 次 · \u0026lt;/span\u0026gt; 3\u0026lt;span id=\u0026#34;busuanzi_container_site_uv\u0026#34;\u0026gt;您是本站第 \u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 位访问者\u0026lt;/span\u0026gt; busuanzi_value_site_pv ：表示访问次数\nbusuanzi_value_site_uv ：表示访问者\n","date":"2024-03-27T22:40:19+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/","section":"post","tags":["hugo","访问量"],"title":"Hugo：访问量统计"},{"categories":["Tech"],"contents":"显示效果 解决方案 本博客使用的是 霞鹜文楷 ，要在网站使用此字体，可以查看 霞鹜文楷屏幕阅读版 网络字体仓库\n1、插入代码 将以下代码插入 themes\\hugo-theme-cleanwhite\\layouts\\partials\\head.html\n1\u0026lt;html\u0026gt; 2\u0026lt;head\u0026gt; 3 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-web/style.css\u0026#34; /\u0026gt; 4 \u0026lt;style\u0026gt; 5 body { 6 font-family: \u0026#34;LXGW WenKai Screen\u0026#34;; 7 font-weight: normal; 8 } 9 \u0026lt;/style\u0026gt; 10\u0026lt;/head\u0026gt; 11\u0026lt;body\u0026gt; 12 13\u0026lt;/body\u0026gt; 14\u0026lt;/html\u0026gt; 2、修改 font-family 我是直接在主题上进行改动，打开主题文件的css文件：themes\\hugo-theme-cleanwhite\\static\\css\\hugo-theme-cleanwhite.min.css\n将 font-family 后的字体全部改为 LXGW WenKai Screen\n完成。\n","date":"2024-03-27T22:27:26+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/","section":"post","tags":["hugo","自定义","字体"],"title":"Hugo：自定义字体"},{"categories":["Tech"],"contents":"文章参考自：https://github.com/sengmitnick/hugo-theme-hello-friend-ng/commit/9e6ba0cc1940ffa200fdf21787e7e808d2f126d0\n显示效果 右下角显示回到顶部按钮\n解决方案 添加代码： layouts/partials/backtop.html 代码如下：\n1\u0026lt;style\u0026gt; 2 /* add BackTop */ 3 #backtop { 4 color: #c2c0c0; 5 position: fixed; 6 right: 25px; 7 bottom: 25px; 8 width: 35px; 9 height: 35px; 10 z-index: 999998; 11 12 /* cursor: pointer; */ 13 } 14\u0026lt;/style\u0026gt; 15\u0026lt;div id=\u0026#34;backtop\u0026#34;\u0026gt; 16 \u0026lt;svg aria-hidden=\u0026#34;true\u0026#34; focusable=\u0026#34;false\u0026#34; data-prefix=\u0026#34;fas\u0026#34; data-icon=\u0026#34;chevron-circle-up\u0026#34; class=\u0026#34;svg-inline--fa fa-chevron-circle-up fa-w-16\u0026#34; role=\u0026#34;img\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34;\u0026gt; 17 \u0026lt;path fill=\u0026#34;currentColor\u0026#34; d=\u0026#34;M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm231-113.9L103.5 277.6c-9.4 9.4-9.4 24.6 0 33.9l17 17c9.4 9.4 24.6 9.4 33.9 0L256 226.9l101.6 101.6c9.4 9.4 24.6 9.4 33.9 0l17-17c9.4-9.4 9.4-24.6 0-33.9L273 142.1c-9.4-9.4-24.6-9.4-34 0z\u0026#34;\u0026gt; 18 \u0026lt;/path\u0026gt; 19 \u0026lt;/svg\u0026gt; 20 21\u0026lt;/div\u0026gt; 22\u0026lt;script\u0026gt; 23 var timer = null; 24 backtop.onclick = function () { 25 cancelAnimationFrame(timer); 26 //获取当前毫秒数 27 var startTime = +new Date(); 28 //获取当前页面的滚动高度 29 var b = document.body.scrollTop || document.documentElement.scrollTop; 30 var d = 500; 31 var c = b; 32 timer = requestAnimationFrame(function func() { 33 var t = d - Math.max(0, startTime - (+new Date()) + d); 34 document.documentElement.scrollTop = document.body.scrollTop = t * (-c) / d + b; 35 timer = requestAnimationFrame(func); 36 if (t == d) { 37 cancelAnimationFrame(timer); 38 } 39 }); 40 } 41 42\u0026lt;/script\u0026gt; 然后在 layouts/_default/baseof.html 里面添加\n1{{ partial \u0026#34;backtop.html\u0026#34; . }} ","date":"2024-03-27T17:15:28+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%80%E9%94%AE%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/","section":"post","tags":["hugo"],"title":"Hugo：一键回到顶部"},{"categories":["Tech"],"contents":"文章参考自 https://thirdshire.com/hugo-stack-renovation/\n显示效果 解决方案 1\u0026lt;!-- Add blog running time --\u0026gt; 2本博客已稳定运行 3\u0026lt;span id=\u0026#34;runningdays\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 4\u0026lt;script\u0026gt; 5let s1 = \u0026#39;2024-3-18\u0026#39;; //website start date 6s1 = new Date(s1.replace(/-/g, \u0026#34;/\u0026#34;)); 7let s2 = new Date(); 8let timeDifference = s2.getTime() - s1.getTime(); 9 10let days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); 11let hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); 12let minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60)); 13 14let result = days + \u0026#34;天\u0026#34; + hours + \u0026#34;小时\u0026#34; + minutes + \u0026#34;分钟\u0026#34;; 15document.getElementById(\u0026#39;runningdays\u0026#39;).innerHTML = result; 16\u0026lt;/script\u0026gt; 17\u0026lt;br\u0026gt; ","date":"2024-03-27T16:05:03+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","section":"post","tags":["hugo"],"title":"Hugo：博客运行时间"},{"categories":["Tech"],"contents":"文章参考自 https://thirdshire.com/hugo-stack-renovation/\n显示效果 解决方法 我是直接在主题上面改的，在主题的 layouts/partials/footer.html 里增加以下代码：\n1\u0026lt;!-- 添加在copyright之前 --\u0026gt; 2 3\u0026lt;!-- Add total page and word count time --\u0026gt; 4{{$scratch := newScratch}} 5{{ range (where .Site.Pages \u0026#34;Kind\u0026#34; \u0026#34;page\u0026#34; )}} 6\t{{$scratch.Add \u0026#34;total\u0026#34; .WordCount}} 7{{ end }} 8发表了{{ len (where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34;) }}篇文章 · 9总计{{ div ($scratch.Get \u0026#34;total\u0026#34;) 1000.0 | lang.FormatNumber 2 }}k字 10\u0026lt;br\u0026gt; ","date":"2024-03-27T15:38:38+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%80%BB%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/","section":"post","tags":["hugo","字数统计"],"title":"Hugo：总字数统计"},{"categories":["Tech"],"contents":"文章转载修改自：https://blog.csdn.net/wwwtotoro/article/details/91042307\n在根目录中新建.gitignore文件，设置如下：\n1public/ 若没有生效，是因为gitignore只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改 .gitignore 是无效的。 解决方法是先把本地缓存删除，然后再提交。\n1git rm -r --cached . 2git add . 3git commit -m \u0026#34;update .gitignore\u0026#34; 4git push -u origin master 结果显示，git远程仓库内删除了 public 目录\n","date":"2024-03-27T11:44:19+08:00","permalink":"https://huuuuuuo.github.io/post/git%E4%B9%8B.gitignore%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","section":"post","tags":["git","gitignore"],"title":"Git：.gitignore无效解决方法"},{"categories":["Tech"],"contents":"1 背景 有一个程序，使用asp、mysql、python实现，想要实现在另一台windows环境部署，需要将部署方法最简化。\n目前考虑的方案是，mysql 改用 access，python使用pyinstaller打包为exe\n但是使用pyodbc连接access连接数据库，一直报错，尝试了各种方案都无法解决，遂弃用，改为使用sqlite\n2 解决方案 2.1 使用sqlite 使用sqlite做数据库，部署非常简单\n使用dbever连上sqlite，下载驱动，然后创建一个库，新建一个表，具体可直接百度\n2.2 py连接sqlite 1import sqlite3 #导入sqlite3模块 2 3conn = sqlite3.connect(\u0026#34;First.db\u0026#34;) #建立一个基于硬盘的数据库实例 4 5conn.close() #关闭与数据库的连接 数据库连接成功以后，就可以通过py进行数据库操作了\n","date":"2024-03-27T10:16:07+08:00","permalink":"https://huuuuuuo.github.io/post/python%E6%97%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","section":"post","tags":["python","windows","sqlite"],"title":"Python无环境部署"},{"categories":["Tech"],"contents":"使用hugo搭建博客的时候，md文件的图片存储路径有问题，对其进行改进\n1、typora配置 图像存储路径改为如图，其中是以相对路径 ./ 开头\n2、用py自动化流程 在hugo-root 路径下，新建 img_move.py 文件，并将其放进 Hugo日常更新流程\npy代码如下：\n1import os 2import shutil 3import codecs 4 5# 定义源路径和目标路径 6source_path = \u0026#34;content/post/postimg\u0026#34; 7destination_path = \u0026#34;static/img\u0026#34; 8 9# 复制文件，如果目标路径已存在文件则不覆盖 10for filename in os.listdir(source_path): 11 source_file = os.path.join(source_path, filename) 12 destination_file = os.path.join(destination_path, filename) 13 if not os.path.exists(destination_file): 14 shutil.copy2(source_file, destination_file) 15 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 16 else: 17 print(f\u0026#34;pass\u0026#34;) 18print(f\u0026#34;----------------------------------\u0026#34;) 19# 遍历md文件并替换字符串 20md_files = [f for f in os.listdir(\u0026#34;content/post\u0026#34;) if f.endswith(\u0026#34;.md\u0026#34;)] 21for md_file in md_files: 22 md_file_path = os.path.join(\u0026#34;content/post\u0026#34;, md_file) 23 with codecs.open(md_file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 24 content = file.read() 25 new_content = content.replace(\u0026#39;/img/\u0026#39;, \u0026#39;/img/\u0026#39;) 26 if content != new_content: 27 with codecs.open(md_file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 28 file.write(new_content) 29 print(f\u0026#34;文件 {md_file_path} 替换成功！\u0026#34;) 30 else: 31 print(f\u0026#34;pass\u0026#34;) ","date":"2024-03-21T18:55:26+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96/","section":"post","tags":["hugo","优化","脚本"],"title":"Hugo：图片存储路径优化"},{"categories":["Tech"],"contents":"本文转载与修改自：Hugo插件之代码块拷贝插件\n添加按钮-css 我们通过检查博客内容页面发现，hugo生成的每个代码块格式如下：\n没有语法突出显示的代码块具有相同的结构，但周围没有 \u0026lt;div class=highlight\u0026gt;。为了考虑到这两种情况，我选择了作为 \u0026lt;pre\u0026gt; 元素下面的 \u0026lt;code\u0026gt; 子元素。\ncopy-to-clipboard.css\n1.highlight { 2 position: relative; 3} 4 5.highlight pre { 6 padding-right: 75px; 7 /* background-color:#f8f8f8 !important; */ 8} 9 10.highlight-copy-btn { 11 position: absolute; 12 top: 7px; 13 right: 7px; 14 border: 0; 15 border-radius: 4px; 16 padding: 1px; 17 font-size: 0.8em; 18 line-height: 1.5; 19 color: #fff; 20 background-color: #777; 21 min-width: 50px; 22 text-align: center; 23} 24 25.highlight-copy-btn:hover { 26 background-color: #666; 27} 与剪切板交互-js 按钮有了，接下来就是怎么使用JavaScript拷贝代码到剪切板，废话少说，直接上代码：\ncopy-to-clipboard.js\n1(function() { 2 \u0026#39;use strict\u0026#39;; 3 4 if(!document.queryCommandSupported(\u0026#39;copy\u0026#39;)) { 5 return; 6 } 7 8 function flashCopyMessage(el, msg) { 9 el.textContent = msg; 10 setTimeout(function() { 11 el.textContent = \u0026#34;Copy\u0026#34;; 12 }, 1000); 13 } 14 15 function selectText(node) { 16 var selection = window.getSelection(); 17 var range = document.createRange(); 18 range.selectNodeContents(node); 19 selection.removeAllRanges(); 20 selection.addRange(range); 21 return selection; 22 } 23 24 function addCopyButton(containerEl) { 25 var copyBtn = document.createElement(\u0026#34;button\u0026#34;); 26 copyBtn.className = \u0026#34;highlight-copy-btn\u0026#34;; 27 copyBtn.textContent = \u0026#34;Copy\u0026#34;; 28 29 var codeEl = containerEl.firstElementChild; 30 copyBtn.addEventListener(\u0026#39;click\u0026#39;, function() { 31 try { 32 var selection = selectText(codeEl); 33 document.execCommand(\u0026#39;copy\u0026#39;); 34 selection.removeAllRanges(); 35 36 flashCopyMessage(copyBtn, \u0026#39;Copied!\u0026#39;) 37 } catch(e) { 38 console \u0026amp;\u0026amp; console.log(e); 39 flashCopyMessage(copyBtn, \u0026#39;Failed :\\\u0026#39;(\u0026#39;) 40 } 41 }); 42 43 containerEl.appendChild(copyBtn); 44 } 45 46 // Add copy button to code blocks 47 var highlightBlocks = document.getElementsByClassName(\u0026#39;highlight\u0026#39;); 48 Array.prototype.forEach.call(highlightBlocks, addCopyButton); 49})(); 修改主题 将 copy-to-clipboard.css 和 copy-to-clipboard.js 分别放到 static/css 和 static/js 目录下\n然后在页面引用这两个文件\n1.修改 config.toml 添加自定义css\n1custom_css = [\u0026#34;/css/copy-to-clipboard.css\u0026#34;] 2.修改主题文件下的 layouts/partials/footer.html\n在结尾加上下面这一句，之前测试在 config.toml 下面添加，不生效\n1\u0026lt;script src=\u0026#34;/js/copy-to-clipboard.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ","date":"2024-03-21T13:12:48+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/","section":"post","tags":["hugo","copy","代码块"],"title":"Hugo：代码块拷贝"},{"categories":["Tech"],"contents":"git连接时遇到问题 1ssh -T git@github.com 2Connection reset by 140.82.113.3 port 22 解决方案 在所生成ssh秘钥文件夹下（~/.ssh/）使用文本文档新建 config文件（无后缀）。\n修改代码块中user的email为自己的email。\n1Host github.com 2User yourmail@xx.com 3Hostname ssh.github.com 4PreferredAuthentications publickey 5IdentityFile ~/.ssh/id_rsa 6Port 443 结果：连接成功，问题解决。\n1ssh -T git@github.com 2Hi Syouth7! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. 后续：又多次遇到这种情况，最后发现，其实只是github连接问题，连接不够顺畅，作罢\n","date":"2024-03-21T11:36:42+08:00","permalink":"https://huuuuuuo.github.io/post/%E8%BF%9E%E6%8E%A5github%E6%97%B6connection-reset%E7%9A%84%E9%97%AE%E9%A2%98/","section":"post","tags":["git","reset","ssh","git bug"],"title":"连接github时connection reset的问题"},{"categories":["Tech"],"contents":"本地编辑md我用的是typora，用一些快捷键会更好用\n设置标题 ctrl + 1 ~6 标题1~6 等同于 一级标题：#+空格+标题内容 二级标题：##+空格+标题内容 最多六级标题\n正文：ctrl + 0\n选中 选中一整行：ctrl+L\n选中单词：ctrl+d\n选中相同格式的文字：ctrl+e\n搜索替换 搜索：ctrl+f\n替换：ctrl+h\n编辑格式 加粗：ctrl+b\n倾斜：ctrl+i\n下划线：ctrl+u\n代码块：ctrl+alt+f\n删除线：alt+shift+5 或 ～～内容～～\n分割线：- - - 或***\n切换编辑语法模式/预览模式：ctrl + / 引用：\u0026gt;+空格\n插入 插入链接：ctrl+k\n插入目录：[toc] + enter\n插入图片：直接拖动到指定位置即可或者ctrl+shift+i\n插入表格：ctrl + T\n插入：这个是使用的 ``\n","date":"2024-03-20T22:30:42+08:00","permalink":"https://huuuuuuo.github.io/post/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/","section":"post","tags":["typora","快捷键"],"title":"Typora快捷键"},{"categories":["Tech"],"contents":"Git是一个分布式版本控制系统，用于跟踪文件的更改，协作开发，以及管理项目的版本。\nindex：暂存区\nworkspace：工作区\nrespository：本地仓库\nremote：远程仓库\n一个完整的简单的git推送流程 1ssh -T git@github.com 2git init 1git add . 2git commit -m “update” 3git push -u origin main 以下是Git的基本操作：\n创建仓库 初始化仓库：git init 用于在当前目录下创建一个新的Git仓库。 克隆仓库：git clone \u0026lt;repository\u0026gt; 用于从远程仓库克隆一个项目到本地。 基本操作 添加文件到暂存区：git add \u0026lt;file\u0026gt; 或 git add .（添加所有文件）。 提交更改：git commit -m \u0026quot;commit message\u0026quot; 将暂存区的更改提交到本地仓库。 查看状态：git status 显示工作区和暂存区的状态。 查看差异：git diff 显示工作区与暂存区的差异。 查看提交历史：git log 显示提交历史。 分支与合并 创建分支：git branch \u0026lt;branch-name\u0026gt; 创建一个新分支。 切换分支：git checkout \u0026lt;branch-name\u0026gt; 切换到指定分支。 合并分支：git merge \u0026lt;branch-name\u0026gt; 将指定分支合并到当前分支。 远程仓库操作 添加远程仓库：git remote add \u0026lt;remote-name\u0026gt; \u0026lt;repository\u0026gt; 添加远程仓库。 推送到远程仓库：git push \u0026lt;remote-name\u0026gt; \u0026lt;branch-name\u0026gt; 将本地分支推送到远程仓库。 从远程仓库拉取：git pull \u0026lt;remote-name\u0026gt; \u0026lt;branch-name\u0026gt; 从远程仓库拉取指定分支的更改。 配置Git 配置用户信息：git config --global user.name \u0026quot;your name\u0026quot; 和 git config --global user.email \u0026quot;youremail@example.com\u0026quot; 设置全局用户名和邮箱。 配置差异分析工具：git config --global merge.tool vimdiff 设置差异分析工具。 配置彩色输出：git config --global color.ui auto 配置Git命令输出为彩色。 其他操作 删除文件：git rm \u0026lt;file\u0026gt; 从工作区和暂存区删除文件。 重命名文件：git mv \u0026lt;old-name\u0026gt; \u0026lt;new-name\u0026gt; 在工作区和暂存区中重命名文件。 查看未跟踪文件：git status --ignored 显示未跟踪的文件。 高级操作 撤销提交：git revert \u0026lt;commit\u0026gt; 撤销指定提交。 重置到指定提交：git reset --hard \u0026lt;commit\u0026gt; 将当前分支重置到指定提交。 查看差异：git diff \u0026lt;commit1\u0026gt;..\u0026lt;commit2\u0026gt; 查看两个提交之间的差异。 这些是Git的基本操作，可以帮助你更好地管理项目的版本控制。\n","date":"2024-03-20T20:30:42+08:00","permalink":"https://huuuuuuo.github.io/post/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","section":"post","tags":["git"],"title":"git基本使用"},{"categories":["Tech"],"contents":"1、新建文章 进入blog本地仓库，新疆文章，写文章并修改\n1cd F:\\vscode\\hugo-root 2hugo new post/文章名字.md 2、本地验证 1hugo serve -D --disableFastRender 2或 3hugo serve 3、更新public目录，进入public目录，提交代码 1hugo\t#注意此时不能再 hugo serve了，否则public目录某些html的连接为http://localhost:1313/... 2git add . 3git commit -m \u0026#34;update\u0026#34; 4git push origin master 5 6cd public 7git add . 8git commit -m \u0026#34;update\u0026#34; 9git push origin master 10 稍等一两分钟，即可打开网址查看，Nefelibata\n4、改进 写完一篇文章以后，进行如下操作，即可更新完成\n（1）流程化 方案一：本地流程化 a.添加 .gitignore 有一个注意事项，新建文件 .gitignore，把public填进去\n1public/ b.全流程 此处改进详情请看 Hugo：图片存储路径优化\n其中img_move.py也已经打包成 exe，所以第一步也可以使用\n1python img_move.py # 或直接 img_move.exe 1python img_move.py 2hugo 3git add . 4git commit -m \u0026#34;update\u0026#34; 5git push origin master 6 7cd public 8git add . 9git commit -m \u0026#34;update\u0026#34; 10git push origin master 11 c.一键部署 将所有步骤打包成 bat\n1run_update.bat 方案二：Github Action 自动发布 Github Action 自动发布其实就是在网页端进行流程化\n添加路径 .github/workflows/deploy.yml\n在deploy.yml 中\n1name: blog public 2on: 3 push: 4 # branches: 5 # - main 6jobs: 7 build-deploy: 8 runs-on: ubuntu-20.04 9 # runs-on: macos-latest 10 steps: 11 - name: Check out source 12 uses: actions/checkout@v2 13 14 - name: Setup hugo 15 uses: peaceiris/actions-hugo@v2 16 with: 17# hugo-version: \u0026#34;latest\u0026#34; # 可以修改为你使用的 Hugo 版本 18 hugo-version: \u0026#34;0.124.0\u0026#34; # 19 extended: true # 设置是否需要 extended 版本 20 21 - name: Build Web 22 run: hugo 23 24 - name: Publish Web 25 uses: peaceiris/actions-gh-pages@v3 26 with: 27 personal_token: ${{ secrets.PERSONAL_TOKEN }} # 另外还支持 deploy_token 和 github_token 28 external_repository: HuuuuuuO/huuuuuuo.github.io # 修改为你的 GitHub Pages 仓库 29 publish_branch: master 30 publish_dir: ./public 31# keep_files: false 32 # 如果使用自定义域名，还需要添加下面一行配置 33 # cname: www.goodfun.me 若是使用action自动发布，则发布流程为：\n1python img_move.py 2hugo 3git add . 4git commit -m \u0026#34;update\u0026#34; 5git push origin master （2）取消主题子模块 如果要自己修改主题，则需要取消主题作为子模块\n首先，将 ./themes/主题包 路径下的主题包复制到别的路径\n接着，执行以下步骤删除主题子模块\n1git rm --cached \u0026lt;子模块路径\u0026gt; 2rm -rf \u0026lt;子模块路径\u0026gt; 3git config --file=.gitmodules --remove-section submodule.\u0026lt;子模块名称\u0026gt; 4git config --remove-section submodule.\u0026lt;子模块名称\u0026gt; 5rm -rf \u0026lt;子模块路径\u0026gt;/.git 6git add \u0026lt;子模块路径\u0026gt; 7git commit -m \u0026#34;Convert submodule to regular directory\u0026#34; 8git push origin \u0026lt;分支名\u0026gt; 最后将主题包复制回 ./themes/主题包\n","date":"2024-03-20T17:30:42+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%97%A5%E5%B8%B8%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/","section":"post","tags":["hugo","github","pages"],"title":"Hugo：日常更新流程"},{"categories":["Tech"],"contents":" 视频是关于GPT的底层原理和未来影响。将抛开技术细节，少用专业名词，在整体功能上讲解ChatGPT 的「工作原理」「制造过程」「涌现的能力」「未来的影响」以及「如何应对」：\n1、ChatGPT是如何回答问题的\n2、它是怎么被制造的，为什么它不是搜索引擎\n3、它有哪些惊人能力，为什么它不只是聊天机器人\n4、它将给社会带来什么样的冲击\n5、我们该如何维持未来的竞争力\n总结1 一、底层原理\n生成文段的原理：单字接龙与自回归生成。基于上文生成下一个单字，同时把自己新生成的单字归入上文，继续生成下一个单字。若上文对应多个单字，则基于概率分布随机抽取。 如何生成合理的回答：输入回答范例让模型学习，从多个类似范例中形成通用规律，从而面对数据库未储存的问题，能够基于通用规律回答出数据库中不存在的文本。 因此它不同于搜索引擎，搜索引擎只能呈现数据库中存在的文本。 由此导致的缺陷：混淆记忆。基于通用规律生成的文本可能并不正确。人们由于无法直接查看其依赖的数据库和其学习方式，难以对其回答进行证实证伪。 二、ChatGPT的三阶段训练\n无监督学习（开卷有益）：对模型输入海量的互联网文本，让模型自己学习、做单字接龙（GPT-3学习材料45TB，参数1750亿，变成了超大模型LLM）。 监督学习（模板规范）：输入人工写好的优质对话范例，让模型学习如何组织符合人类规范的回答。例如对不知道的问题回答“不知道”而非乱说，对错误的问题指出错误而非顺着说，对违法的问题指出违法而非直接回答。 强化学习（创意引导）：不再要求ChatGPT按对话范例回答，而是直接向它提问，让它自由回答。对回答进行人工评分，奖励有创意的回答。 当单字接龙达到超大规模，成为LLM后，出现了3个意外能力： 理解指令：因为可以把各种任务要求（归纳、拆分、仿写、润色、洗稿、比对、翻译）等都以优质对话范例的形式输入模型，ChatGPT可以理解各种指令，支持各种任务。 理解例子（语境内学习）：ChatGPT可以通过用户输入的若干例子，来明确用户想干什么，处理新的要求。这种能力如何产生目前还无定论。 思维链：若要求ChatGPT分步思考，它就可以一步步连续推理，且最终答对的可能性大幅提升。 三、ChatGPT的意义\n类似一次试点火实验，它展示了大语言模型（LLM）的可行性，使全世界愿意投入更多到LLM的开发改进中，使LLM变得更好用、更便宜，更多相关产品得以普及。\n四、LLM的应用价值\n自然语言处理技术（NLP）实现理解自然语言后，能够帮助人类处理海量语言内容，使一个普通人快捷准确地接触到各行各业的平均知识，从而提高人们【创造、继承和应用知识】的语言处理效率。\nLLM自身不能改造世界。因为其对语言的“理解”与人类不同，不认识语言符号的指代对象，只是学会了【承载知识的语言搭配模式】。所以其身份是成为人类的工具（百科全书），由人类对模型的回答进行解读和实践。 五、LLM的社会影响\n深影响行业：与【语言中的知识】密切相关的行业：学术界-创造知识（eg: 人机科研），教育界-传承知识，新闻界-传播信息。 教育界的挑战：现有的教育模式主要是“传授既有知识”，但有可能未来人们学到的所有知识LLM也都拥有。因此需要新建教育的理论框架，转向主要传授“学习能力和创造能力”，并且需要将“人的更高层次的创新”与“LLM的创新”区分开来。 网络安全的挑战：ChatGPT可能输出违法信息。如何确保提问中的商业、国家机密不被泄露。由于数据安全问题，各国、各公司可能会开发自己的LLM，但如何实现数据规模效应，实现联邦学习。 六、如何应对\n克服抵触心理。很多人会因为害怕被取代而抵触新工具，但这只会让我们更晚学会利用新工具，更晚获得新工具带来的优势。 重塑终身学习能力。应试教育使人习惯将与分数有关的学习才称为“学习”，有学校之外不愿学习的怠惰心理。但GPT-4后还会有新工具出现，只能靠自己学会终身学习。 国家重视。LLM可能是一项升级人类学习系统的技术，带来新一轮工业革命，国家不能错过。 总结2 写在前面：\n视频其中提到自然语言模型与现实人类社会的问题进行的个人总结\n（个人的思考能力固然是有限的，欢迎大家在评论区探讨）\n**标题：【**Ep.1 万字科普ChatGPT-4为何会颠覆人类社会】\n作者原意主题是「为什么所有人都应关注ChatGPT」\n作者先是解释了 GPT的原理【单字接龙】进而引出GPT版本。\n是有三部训练的【开卷有益】【模板规范】【创作引导】。\n未来影响的【应用价值】和【社会影响】。\n【如何应对】ChatGPT 非常强大，但它仍是一个没有意识的工具，\n不会主动配合人，面对空洞的提问就给出空洞的回答，\n需要被【正确地使用】，才能发挥最大的价值。\n【克服抵触心】【个人学习能力】【国家的竞争力】\n1、ChatGPT是如何回答问题的\n答：ChatGPT的实质功能是单字接龙 长文由单字接龙的自回归所生成 通过提前训练才能让它生成人们想要的问答 训练方式是让它按照问答范例来做单字接龙 这样训练是为了让它学会「能举一反三的规律」 缺点是可能混淆记忆，无法直接查看和更新所学，且高度依赖学习材料。 2、Chat-GPT它是怎么被制造的，为什么它不是搜索引擎\n总结：\n开卷有益：【超大语言模型（LLM）】缺陷：【胡言乱语】需要规范。\n模板规范：【优质对话范例】，【什么该说什么不该说】引用台词：不利于XX的话不要说。\n进而引发【回答不知道】，【你说问题的是错误的】，在回答二极管问题时【不仅仅是回答对错而是原因】。\n创意引导：根据【人类对它生成答案的好坏评分】来调节模型，以引导它生成人类认可的【创意回答】。\n【使ChatGPT变成既懂规矩又会试探】的聊天机器人。\n：\n我的理解是GPT家族的模型并不真的理解语意，把句子和句意联系起来。它们“能够明确接受到的语言符号”\n引用作者总结:\n（1）对于ChatGPT而言，一个token是一个语言符号。\n（2）“能够明确接受到的语言符号”是指，它能够明白你发的这个单词，是它字典中的哪个一，甚至包不包括在它的字典中，也可以「明确」。\n（3）不同符号间的关系就是，A句子和B词汇，到底说的是不是一回事，它能判断。\n（4）ChatGPT的强，在于第三章提到的「涌现能力」，至于为什么会出现这几个能力，大家还在研究\n3、它有哪些惊人能力，为什么它不只是聊天机器人\n4、它将给社会带来什么样的冲击\n首先要讨论的就是「大语言模型能为人类做什么」，只有弄清楚这一点，才有依据判断「它对社会的影响」。\n【应用价值】自然语言处理技术（NLP）应运而生，也就是 ChatGPT 所隶属的技术，其目标是让机器“理解”自然语言，协助人类处理繁琐的语言类工作，所以 NLP 也被誉为“人工智能皇冠上的明珠”。\n【社会影响的预测】由于大语言模型所能改善的是：群体协作过程中「创造、继承、应用知识」时的「语言处理效率」。所以随着技术的发展，大语言模型对社会的影响范围将和当初「电脑的影响范围」一样，即「全社会」。\n引用作者总结：\n跟「搜索引擎」结合：帮助用户精准寻找和筛选信息，比如，微软的 new bing。 跟「笔记工具」结合，辅助阅读和写作，比如，notion，Flow us，wolai。 跟「办公软件」结合，辅助文字处理、数据分析和演示制作，比如，office的下一步动作。 跟「教育培训」结合，定制个人的学习计划和学习材料，全天家教。 跟「开发工具」结合，辅助编写业务代码、调试纠错。 跟「动画小说」结合，辅助小说配图、配乐。 跟「客服系统」结合，7x24小时随便问，没有任何情绪。 跟「视频会议」结合，多语翻译、会议记录与总结、谈话查找。 跟「评论审核」结合，筛选评论、统计舆论、给出提醒。 跟「行业顾问」结合，提供法律、医疗、健身等指导。 跟「社交媒体」结合，帮助找到兴趣相投的用户和话题 。 跟「视频娱乐」结合，个性化推荐音乐、电影、小说、动漫。 跟「游戏剧情」结合，让 NPC 给玩家带来更灵活的对话体验。 大语言模型对【网络安全】的威胁。\n5、我们该如何维持未来的竞争力\nChatGPT并不会让你失业，但会熟练使用ChatGPT的人会让你失业。\n引用作者总结：\n总的来说，ChatGPT 的出现确实带来了各种各样的问题和风险：存在准确性和可解释性的缺陷，存在科技伦理安全和结构性失业的冲击，存在民族文化和意识形态的侵袭。\n但这些问题和风险，所有国家都要面对，一样会有害怕和抵触的情绪，我们应该利用这一点，率先克服抵触心理，反过来抓住 ChatGPT 的机会，率先研究大语言模型的改进和配套技术的重组；率先培养终身学习能力和推动教育改革；率先做好科技伦理的约束和换岗转行的防备；主动输出我们的文化和价值观。\n最后，我非常喜欢一个UP说过的一句话：【工具无法取代人，只有会用工具的人取代不会工具的人】\n真正需要害怕的是我们「无法成为会用工具的人」，可并没有人阻止我们探索工具，能够阻止我们的只有我们自己的心态和学习能力。\n谢谢各位看到最后。\n希望对阅读笔记的朋友有些帮助。\n总结3 ChatGPT技术可以影响整个人类社会。 **工作原理：**包括生成下一个字、自回归生成、模型本身的影响等; **训练方式：**使用学习材料来训练模型，并让模型学习提问和回答的通用规律，以便在未被记忆的情况下仍能生成用户想要的回答； ChatGPT与搜索引擎的不同，ChatGPT可以创造不存在的文本，但也存在混淆记忆的风险。 ChatGPT的**实质功能：**单字接龙长文，通过提前训练才能让他生成人们想要的回答。 ChatGPT的内容无法被直接增删改查，决策缺乏可解释性，使用时带来安全风险。 ChatGPT高度依赖数据，需要提供数量足够多种类足够丰富，质量足够高的学习材料。 ChatGPT的三个训练阶段：开卷有益阶段、模板规范阶段和创意引导阶段。 **开卷有益阶段：**让ChatGPT对海量互联网文本做单词接龙，以扩充模型的词汇量和语言知识世界的信息与知识。 **模板规范阶段：**让ChatGPT对优质对话范例做单词接龙，以规范回答的对话模式和对话内容。 **创意引导阶段：**让ChatGPT根据人类对它生成答案的好坏评分来调整模型，以引导它生成人类认可的创意回答。 **ChatGPT涌现出的能力：**当单字接龙模型的规模达到一定程度后，就会涌现出理解指令、理解粒子、思维链等能力。 **ChatGPT的意义：**虽然ChatGPT从产品形态和技术创新上来看不够完善，但它完成了一次验证，让全球都看到了大语言模型的可行性，吸引全球大力开发和改进大语言模型。 大语言模型将变得更好用、更快速、更便宜，相关产品也会普及； 大语言模型能够进行语法校对、翻译等，但真正有价值的是在精通语言的基础上，能存储人类从古至今积累的世界知识； 自然语言处理技术的发展可以协助人类处理繁琐的语言类工作； 合理使用大语言模型可以让人们更快捷准确地接触各行各业的平均知识； 大语言模型与搜索引擎、办公软件、教育培训、医疗健身等方面结合可以帮助用户更精准地寻找和筛选信息； 学术界、教育界、商业界和内容生产行业受到的影响最大。 现有的人才培养模式难以适应未来的就业市场，教育界需要转变培养模式，以培养学习能力和创造能力为主； ChatGPT的出现迫使人们加速推进培养创新性人才的目标，需要对知识的层级做更精细的划分，并提供相应的培养工具和易于实施的普及方案; ChatGPT的使用带来了网络安全和社会安全的新挑战; 面对新工具，应掌握其优点和缺点，正确使用； 克服自己的抵触心理，做好终身学习的准备。 应试教育对学生的学习能力产生了负面影响，导致很多学生对学习概念的理解变得片面和扭曲。 重塑自己的终身学习能力是最困难的一步，需要克服长期养成的错误习惯。 ChatGPT会改变人类群体应用知识的方式和继承知识的方式，重塑人类学习系统，并带来新的认知革命，重组政治和社会。 ChatGPT的出现带来了各种各样的问题和风险，包括准确性和可解释性的缺陷，存在科技伦理安全和结构性失业的冲击，存在民族文化和意识形态的侵袭，但这些问题和风险所有国家都要面对。 视频呼吁利用ChatGPT的机会，率先研究大语言模型的改进和配套技术的重组，培养终身学习能力和推动教育改革，做好科技伦理的约束和换岗转行的防备，主动输出我们的文化和价值观。 ","date":"2024-03-20T00:00:00Z","permalink":"https://huuuuuuo.github.io/post/%E5%85%B3%E4%BA%8Egpt%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%BD%B1%E5%93%8D%E8%BD%AC%E8%BD%BD-copy/","section":"post","tags":["gpt","大模型","ai","人工智能","B站","视频"],"title":"关于GPT的底层原理和未来影响（转载）"},{"categories":["Tech"],"contents":"本文借鉴并修改自 Windows下使用hugo和Github Pages配置博客\n1 下载安装hugo 访问最新版本页面下载，推荐使用 Hugo extended 版本\n解压到某个目录，然后将该目录添加到环境变量中\n通过上述操作安装 hugo 程序后，就可以通过 hugo new site 命令进行网站创建、配置与本地调试了。 选择一个本地文件夹作为根目录，右键——Git Bash Here，输入下面的命令\n1hugo new site \u0026lt;site-name\u0026gt; 注：后续命令未经说明，均在 Git Bash 中的 E:\\Workspace\\blog 目录下运行\n2、主题 2.1 安装 初始化你的项目目录为一个空的 Git 存储库，将主题克隆到 themes 目录中，将其作为 [Git 子模块][git-submodule] 添加到您的项目中。\n1git init 2git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 2.2 基础配置 用VScode打开E:\\Workspace\\blog文件夹，用下面的内容覆盖hugo.toml文件。并自行修改baseURL和title。 其中，baseURL为你的github账户名.github.io，也可以像我一样设置自定义域名。记得逐项修改为你的配置。\n1# ===================================================================================== 2# It\u0026#39;s recommended to use Alternate Theme Config to configure FixIt 3# Modifying this file may result in merge conflict 4# ===================================================================================== 5 6# ------------------------------------------------------------------------------------- 7# Hugo Configuration 8# See: https://gohugo.io/getting-started/configuration/ 9# ------------------------------------------------------------------------------------- 10 11# 网站标题 12title = \u0026#34;云吱的小站\u0026#34; 13# Hostname (and path) to the root 14baseURL = \u0026#34;https://haoyep.com/\u0026#34; 15# baseURL = \u0026#34;https://leegical.github.io/\u0026#34; 16# 更改使用 Hugo 构建网站时使用的默认主题 17theme = [\u0026#34;FixIt\u0026#34;] 18# determines default content language [\u0026#34;en\u0026#34;, \u0026#34;zh-cn\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] 19defaultContentLanguage = \u0026#34;zh-cn\u0026#34; 20# 网站语言, 仅在这里 CN 大写 [\u0026#34;en\u0026#34;, \u0026#34;zh-CN\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] 21languageCode = \u0026#34;zh-CN\u0026#34; 22# 语言名称 [\u0026#34;English\u0026#34;, \u0026#34;简体中文\u0026#34;, \u0026#34;Français\u0026#34;, \u0026#34;Polski\u0026#34;, ...] 23languageName = \u0026#34;简体中文\u0026#34; 24# 是否包括中日韩文字 25hasCJKLanguage = true 26# default amount of posts in each pages 27paginate = 12 28# copyright description used only for seo schema 29copyright = \u0026#34;\u0026#34; 30# whether to use robots.txt 31enableRobotsTXT = true 32# whether to use git commit log 33enableGitInfo = true 34# whether to use emoji code 35enableEmoji = true 36 37# ------------------------------------------------------------------------------------- 38# Menu Configuration 39# See: https://fixit.lruihao.cn/documentation/basics/#menu-configuration 40# ------------------------------------------------------------------------------------- 41 42[menu] 43 [[menu.main]] 44 identifier = \u0026#34;posts\u0026#34; 45 # you can add extra information before the name (HTML format is supported), such as icons 46 pre = \u0026#34;\u0026#34; 47 # you can add extra information after the name (HTML format is supported), such as icons 48 post = \u0026#34;\u0026#34; 49 name = \u0026#34;文章\u0026#34; 50 url = \u0026#34;/posts/\u0026#34; 51 # title will be shown when you hover on this menu link 52 title = \u0026#34;\u0026#34; 53 weight = 1 54 # FixIt 0.2.14 | NEW add user-defined content to menu items 55 [menu.main.params] 56 # add css class to a specific menu item 57 class = \u0026#34;\u0026#34; 58 # whether set as a draft menu item whose function is similar to a draft post/page 59 draft = false 60 # FixIt 0.2.16 | NEW add fontawesome icon to a specific menu item 61 icon = \u0026#34;fa-solid fa-archive\u0026#34; 62 # FixIt 0.2.16 | NEW set menu item type, optional values: [\u0026#34;mobile\u0026#34;, \u0026#34;desktop\u0026#34;] 63 type = \u0026#34;\u0026#34; 64 [[menu.main]] 65 identifier = \u0026#34;categories\u0026#34; 66 pre = \u0026#34;\u0026#34; 67 post = \u0026#34;\u0026#34; 68 name = \u0026#34;分类\u0026#34; 69 url = \u0026#34;/categories/\u0026#34; 70 title = \u0026#34;\u0026#34; 71 weight = 2 72 [menu.main.params] 73 icon = \u0026#34;fa-solid fa-th\u0026#34; 74 [[menu.main]] 75 identifier = \u0026#34;tags\u0026#34; 76 pre = \u0026#34;\u0026#34; 77 post = \u0026#34;\u0026#34; 78 name = \u0026#34;标签\u0026#34; 79 url = \u0026#34;/tags/\u0026#34; 80 title = \u0026#34;\u0026#34; 81 weight = 3 82 [menu.main.params] 83 icon = \u0026#34;fa-solid fa-tags\u0026#34; 84 85# ------------------------------------------------------------------------------------- 86# Theme Core Configuration 87# See: https://fixit.lruihao.cn/documentation/basics/#theme-configuration 88# ------------------------------------------------------------------------------------- 89 90[params] 91 # FixIt 0.2.15 | CHANGED FixIt theme version 92 version = \u0026#34;0.2.X\u0026#34; # e.g. \u0026#34;0.2.X\u0026#34;, \u0026#34;0.2.15\u0026#34;, \u0026#34;v0.2.15\u0026#34; etc. 93 # 网站描述 94 description = \u0026#34;\u0026#34; 95 # 网站关键词 96 keywords = [\u0026#34;程序员\u0026#34;] 97 # 网站默认主题样式 [\u0026#34;light\u0026#34;, \u0026#34;dark\u0026#34;, \u0026#34;auto\u0026#34;] 98 defaultTheme = \u0026#34;auto\u0026#34; 99 # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 100 gitRepo = \u0026#34;\u0026#34; 101 # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI 102 # [\u0026#34;sha256\u0026#34;, \u0026#34;sha384\u0026#34;, \u0026#34;sha512\u0026#34;, \u0026#34;md5\u0026#34;] 103 fingerprint = \u0026#34;sha256\u0026#34; 104 # 日期格式 105 dateFormat = \u0026#34;2006-01-02\u0026#34; 106 # 网站图片，用于 Open Graph 和 Twitter Cards 107 images = [\u0026#34;/logo.png\u0026#34;] 108 # 开启 PWA 支持 109 enablePWA = true 110 # 是否自动显示外链图标 111 externalIcon = false 112 # 默认情况下，FixIt 只会在主页的 HTML 头中注入主题元标记 113 # 您可以将其关闭，但如果您不这样做，我们将不胜感激，因为这是观察 FixIt 受欢迎程度上升的好方法 114 disableThemeInject = false 115 116 # 作者配置 117 [params.author] 118 name = \u0026#34;\u0026#34; 119 email = \u0026#34;\u0026#34; 120 link = \u0026#34;\u0026#34; 121 avatar = \u0026#34;\u0026#34; 122 123 # 应用图标配置 124 [params.app] 125 # 当添加到 iOS 主屏幕或者 Android 启动器时的标题，覆盖默认标题 126 title = \u0026#34;云吱的小站\u0026#34; 127 # 是否隐藏网站图标资源链接 128 noFavicon = false 129 # 更现代的 SVG 网站图标，可替代旧的 .png 和 .ico 文件 130 svgFavicon = \u0026#34;/favicon.svg\u0026#34; 131 # Safari 图标颜色 132 iconColor = \u0026#34;#5bbad5\u0026#34; 133 # Windows v8-10 磁贴颜色 134 tileColor = \u0026#34;#da532c\u0026#34; 135 # Android 浏览器主题色 136 [params.app.themeColor] 137 light = \u0026#34;#f8f8f8\u0026#34; 138 dark = \u0026#34;#252627\u0026#34; 139 140 # 搜索配置 141 [params.search] 142 enable = true 143 # 搜索引擎的类型 [\u0026#34;lunr\u0026#34;, \u0026#34;algolia\u0026#34;, \u0026#34;fuse\u0026#34;] 144 type = \u0026#34;lunr\u0026#34; 145 # 文章内容最长索引长度 146 contentLength = 4000 147 # 搜索框的占位提示语 148 placeholder = \u0026#34;\u0026#34; 149 # 最大结果数目 150 maxResultLength = 10 151 # 结果内容片段长度 152 snippetLength = 50 153 # 搜索结果中高亮部分的 HTML 标签 154 highlightTag = \u0026#34;em\u0026#34; 155 # 是否在搜索索引中使用基于 baseURL 的绝对路径 156 absoluteURL = false 157 [params.search.algolia] 158 index = \u0026#34;\u0026#34; 159 appID = \u0026#34;\u0026#34; 160 searchKey = \u0026#34;\u0026#34; 161 [params.search.fuse] 162 # https://fusejs.io/api/options.html 163 isCaseSensitive = false 164 minMatchCharLength = 2 165 findAllMatches = false 166 location = 0 167 threshold = 0.3 168 distance = 100 169 ignoreLocation = false 170 useExtendedSearch = false 171 ignoreFieldNorm = false 172 173 # 页面头部导航栏配置 174 [params.header] 175 # 桌面端导航栏模式 [\u0026#34;sticky\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;] 176 desktopMode = \u0026#34;sticky\u0026#34; 177 # 移动端导航栏模式 [\u0026#34;sticky\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;] 178 mobileMode = \u0026#34;auto\u0026#34; 179 # 页面头部导航栏标题配置 180 [params.header.title] 181 # LOGO 的 URL 182 logo = \u0026#34;/logo.png\u0026#34; 183 # 标题名称 184 name = \u0026#34;云吱的小站\u0026#34; 185 # 你可以在名称（允许 HTML 格式）之前添加其他信息，例如图标 186 pre = \u0026#34;\u0026#34; 187 # 你可以在名称（允许 HTML 格式）之后添加其他信息，例如图标 188 post = \u0026#34;\u0026#34; 189 # 是否为标题显示打字机动画 190 typeit = false 191 # 页面头部导航栏副标题配置 192 [params.header.subtitle] 193 # 副标题名称 194 name = \u0026#34;\u0026#34; 195 # 是否为副标题显示打字机动画 196 typeit = false 197 198 # FixIt 0.2.18 | NEW Breadcrumb config 199 [params.breadcrumb] 200 enable = false 201 sticky = false 202 showHome = false 203 204 # 页面底部信息配置 205 [params.footer] 206 enable = true 207 # 自定义内容（支持 HTML 格式） 208 # 进阶使用，见参数 `params.customFilePath.footer` 209 custom = \u0026#34;\u0026#34; 210 # 是否显示 Hugo 和主题信息 211 hugo = false 212 # 是否显示版权信息 213 copyright = true 214 # 是否显示作者 215 author = true 216 # 网站创立年份 217 since = 2019 218 # 是否显示网站内容总字数 219 wordCount = true 220 # 公网安备信息，仅在中国使用（支持 HTML 格式） 221 gov = \u0026#34;\u0026#34; 222 # ICP 备案信息，仅在中国使用（支持 HTML 格式） 223 icp = \u0026#34;\u0026#34; 224 # 许可协议信息（支持 HTML 格式） 225 license = \u0026#39;\u0026lt;a rel=\u0026#34;license external nofollow noopener noreferrer\u0026#34; href=\u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;CC BY-NC 4.0\u0026lt;/a\u0026gt;\u0026#39; 226 # 网站创立时间 227 [params.footer.siteTime] 228 enable = true 229 animate = true 230 icon = \u0026#34;fa-solid fa-heartbeat\u0026#34; 231 pre = \u0026#34;\u0026#34; 232 value = \u0026#34;2018-02-06T11:15:22+08:00\u0026#34; # e.g. \u0026#34;2021-12-18T16:15:22+08:00\u0026#34; 233 # 页面底部行排序，可选值：[\u0026#34;first\u0026#34;, 0, 1, 2, 3, 4, 5, \u0026#34;last\u0026#34;] 234 [params.footer.order] 235 powered = 0 236 copyright = 0 237 statistics = 0 238 visitor = 0 239 beian = 0 240 241 # Section（所有文章）页面配置 242 [params.section] 243 # section 页面每页显示文章数量 244 paginate = 20 245 # 日期格式（月和日） 246 dateFormat = \u0026#34;01-02\u0026#34; 247 # RSS 文章数目 248 rss = 10 249 # 最近更新文章设置 250 [params.section.recentlyUpdated] 251 enable = true 252 rss = true 253 days = 30 254 maxCount = 10 255 256 # List（目录或标签）页面配置 257 [params.list] 258 # list 页面每页显示文章数量 259 paginate = 20 260 # 日期格式（月和日） 261 dateFormat = \u0026#34;01-02\u0026#34; 262 # RSS 文章数目 263 rss = 10 264 265 # 标签云配置 266 [params.tagcloud] 267 enable = false 268 min = 14 # 最小字体大小，单位：px 269 max = 32 # 最大字体大小，单位：px 270 peakCount = 10 # 每个标签的最大文章数 271 orderby = \u0026#34;name\u0026#34; # 标签排序方式，可选值：[\u0026#34;name\u0026#34;, \u0026#34;count\u0026#34;] 272 273 # 主页配置 274 [params.home] 275 # RSS 文章数目 276 rss = 10 277 # 主页个人信息 278 [params.home.profile] 279 enable = true 280 # Gravatar 邮箱，用于优先在主页显示的头像 281 gravatarEmail = \u0026#34;\u0026#34; 282 # 主页显示头像的 URL 283 avatarURL = \u0026#34;/avatar.jpg\u0026#34; 284 # 头像菜单链接的 identifier 285 avatarMenu = \u0026#34;\u0026#34; 286 # 主页显示的网站标题（支持 HTML 格式） 287 title = \u0026#34;云吱的小站\u0026#34; 288 # 主页显示的网站副标题 289 subtitle = \u0026#34;色相事一刹那，光阴里无尽藏\u0026#34; 290 # 是否为副标题显示打字机动画 291 typeit = true 292 # 是否显示社交账号 293 social = true 294 # 免责声明（支持 HTML 格式） 295 disclaimer = \u0026#34;\u0026#34; 296 # 主页文章列表 297 [params.home.posts] 298 enable = true 299 # 主页每页显示文章数量 300 paginate = 10 301 302 # FixIt 0.2.16 | CHANGED Social config about the author 303 [params.social] 304 GitHub = \u0026#34;\u0026#34; 305 Linkedin = \u0026#34;\u0026#34; 306 Twitter = \u0026#34;\u0026#34; 307 Instagram = \u0026#34;\u0026#34; 308 Facebook = \u0026#34;\u0026#34; 309 Telegram = \u0026#34;\u0026#34; 310 Medium = \u0026#34;\u0026#34; 311 Gitlab = \u0026#34;\u0026#34; 312 Youtubelegacy = \u0026#34;\u0026#34; 313 Youtubecustom = \u0026#34;\u0026#34; 314 Youtubechannel = \u0026#34;\u0026#34; 315 Tumblr = \u0026#34;\u0026#34; 316 Quora = \u0026#34;\u0026#34; 317 Keybase = \u0026#34;\u0026#34; 318 Pinterest = \u0026#34;\u0026#34; 319 Reddit = \u0026#34;\u0026#34; 320 Codepen = \u0026#34;\u0026#34; 321 FreeCodeCamp = \u0026#34;\u0026#34; 322 Bitbucket = \u0026#34;\u0026#34; 323 Stackoverflow = \u0026#34;\u0026#34; 324 Weibo = \u0026#34;\u0026#34; 325 Odnoklassniki = \u0026#34;\u0026#34; 326 VK = \u0026#34;\u0026#34; 327 Flickr = \u0026#34;\u0026#34; 328 Xing = \u0026#34;\u0026#34; 329 Snapchat = \u0026#34;\u0026#34; 330 Soundcloud = \u0026#34;\u0026#34; 331 Spotify = \u0026#34;\u0026#34; 332 Bandcamp = \u0026#34;\u0026#34; 333 Paypal = \u0026#34;\u0026#34; 334 Fivehundredpx = \u0026#34;\u0026#34; 335 Mix = \u0026#34;\u0026#34; 336 Goodreads = \u0026#34;\u0026#34; 337 Lastfm = \u0026#34;\u0026#34; 338 Foursquare = \u0026#34;\u0026#34; 339 Hackernews = \u0026#34;\u0026#34; 340 Kickstarter = \u0026#34;\u0026#34; 341 Patreon = \u0026#34;\u0026#34; 342 Steam = \u0026#34;\u0026#34; 343 Twitch = \u0026#34;\u0026#34; 344 Strava = \u0026#34;\u0026#34; 345 Skype = \u0026#34;\u0026#34; 346 Whatsapp = \u0026#34;\u0026#34; 347 Zhihu = \u0026#34;\u0026#34; 348 Douban = \u0026#34;\u0026#34; 349 Angellist = \u0026#34;\u0026#34; 350 Slidershare = \u0026#34;\u0026#34; 351 Jsfiddle = \u0026#34;\u0026#34; 352 Deviantart = \u0026#34;\u0026#34; 353 Behance = \u0026#34;\u0026#34; 354 Dribbble = \u0026#34;\u0026#34; 355 Wordpress = \u0026#34;\u0026#34; 356 Vine = \u0026#34;\u0026#34; 357 Googlescholar = \u0026#34;\u0026#34; 358 Researchgate = \u0026#34;\u0026#34; 359 Mastodon = \u0026#34;\u0026#34; 360 Thingiverse = \u0026#34;\u0026#34; 361 Devto = \u0026#34;\u0026#34; 362 Gitea = \u0026#34;\u0026#34; 363 XMPP = \u0026#34;\u0026#34; 364 Matrix = \u0026#34;\u0026#34; 365 Bilibili = \u0026#34;\u0026#34; 366 ORCID = \u0026#34;\u0026#34; 367 Liberapay = \u0026#34;\u0026#34; 368 Ko-Fi = \u0026#34;\u0026#34; 369 BuyMeaCoffee = \u0026#34;\u0026#34; 370 Linktree = \u0026#34;\u0026#34; 371 QQ = \u0026#34;\u0026#34; 372 QQGroup = \u0026#34;\u0026#34; # https://qun.qq.com/join.html 373 Diaspora = \u0026#34;\u0026#34; 374 CSDN = \u0026#34;\u0026#34; 375 Discord = \u0026#34;\u0026#34; 376 DiscordInvite = \u0026#34;\u0026#34; 377 Lichess = \u0026#34;\u0026#34; 378 Pleroma = \u0026#34;\u0026#34; 379 Kaggle = \u0026#34;\u0026#34; 380 MediaWiki= \u0026#34;\u0026#34; 381 Plume = \u0026#34;\u0026#34; 382 HackTheBox = \u0026#34;\u0026#34; 383 RootMe = \u0026#34;\u0026#34; 384 Feishu = \u0026#34;\u0026#34; 385 TryHackMe = \u0026#34;\u0026#34; 386 Douyin = \u0026#34;\u0026#34; 387 TikTok = \u0026#34;\u0026#34; 388 Phone = \u0026#34;\u0026#34; 389 Email = \u0026#34;\u0026#34; 390 RSS = true 391 392 # 文章页面配置 393 [params.page] 394 # 是否启用文章作者头像 395 authorAvatar = true 396 # 是否在主页隐藏一篇文章 397 hiddenFromHomePage = false 398 # 是否在搜索结果中隐藏一篇文章 399 hiddenFromSearch = false 400 # 是否使用 twemoji 401 twemoji = false 402 # 是否使用 lightgallery 403 # 如果设为 \u0026#34;force\u0026#34;，文章中的图片将强制按照画廊形式呈现 404 lightgallery = true 405 # 是否使用 ruby 扩展语法 406 ruby = true 407 # 是否使用 fraction 扩展语法 408 fraction = true 409 # 是否使用 fontawesome 扩展语法 410 fontawesome = true 411 # 许可协议信息（支持 HTML 格式） 412 license = \u0026#39;\u0026lt;a rel=\u0026#34;license external nofollow noopener noreferrer\u0026#34; href=\u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;CC BY-NC 4.0\u0026lt;/a\u0026gt;\u0026#39; 413 # 是否在文章页面显示原始 Markdown 文档链接 414 linkToMarkdown = true 415 # 是否在 RSS 中显示全文内容 416 rssFullText = false 417 # 页面样式 [\u0026#34;narrow\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;wide\u0026#34;, ...] 418 pageStyle = \u0026#34;normal\u0026#34; 419 # 强制使用 Gravatar 作为作者头像 420 # gravatarForce = true 421 # 开启自动书签支持 422 # 如果为 true，则在关闭页面时保存阅读进度 423 autoBookmark = true 424 # 是否使用 字数统计 425 wordCount = true 426 # 是否使用 预计阅读 427 readingTime = true 428 # 文章结束标志 429 endFlag = \u0026#34;\u0026#34; 430 # 是否开启即时页面 431 instantPage = false 432 # FixIt 0.3.0 | 是否在侧边栏开启合集 433 collectionList = true 434 # FixIt 0.3.0 | NEW whether to enable collection navigation at the end of the post 435 collectionNavigation = false 436 437 # FixIt 0.2.15 | 转载配置 438 [params.page.repost] 439 enable = false 440 url = \u0026#34;\u0026#34; 441 # 目录配置 442 [params.page.toc] 443 # 是否使用目录 444 enable = true 445 # 是否保持使用文章前面的静态目录 446 keepStatic = false 447 # 是否使侧边目录自动折叠展开 448 auto = false 449 # 目录位置 [\u0026#34;left\u0026#34;, \u0026#34;right\u0026#34;] 450 position = \u0026#34;right\u0026#34; 451 # 在文章开头显示提示信息，提醒读者文章内容可能过时 452 [params.page.expirationReminder] 453 enable = true 454 # 如果文章最后更新于这天数之前，显示提醒 455 reminder = 90 456 # 如果文章最后更新于这天数之前，显示警告 457 warning = 180 458 # 如果文章到期是否关闭评论 459 closeComment = false 460 # FixIt 0.2.16 | 数学公式 CHANGED KaTeX mathematical formulas (https://katex.org) 461 [params.page.math] 462 enable = true 463 # 默认行内定界符是 $ ... $ 和 \\( ... \\) 464 inlineLeftDelimiter = \u0026#34;\u0026#34; 465 inlineRightDelimiter = \u0026#34;\u0026#34; 466 # 默认块定界符是 $$ ... $$, \\[ ... \\], \\begin{equation} ... \\end{equation} 和一些其它的函数 467 blockLeftDelimiter = \u0026#34;\u0026#34; 468 blockRightDelimiter = \u0026#34;\u0026#34; 469 # KaTeX 插件 copy_tex 470 copyTex = true 471 # KaTeX 插件 mhchem 472 mhchem = true 473 # 代码配置 474 [params.page.code] 475 # 是否显示代码块的复制按钮 476 copy = true 477 # 是否显示代码块的编辑按钮 478 edit = true 479 # 默认展开显示的代码行数 480 maxShownLines = 10 481 # FixIt 0.2.14 | 文章编辑 482 [params.page.edit] 483 enable = false 484 # FixIt 0.2.15 | 编辑的基础链接 485 # url = \u0026#34;/edit/branch-name/subdirectory-name\u0026#34; # base on `params.gitRepo` 486 # url = \u0026#34;https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name\u0026#34; # full url 487 url = \u0026#34;\u0026#34; 488 # FixIt 0.2.0 | Mapbox GL JS 配置 (https://docs.mapbox.com/mapbox-gl-js) 489 [params.page.mapbox] 490 # Mapbox GL JS 的 access token 491 accessToken = \u0026#34;\u0026#34; 492 # 浅色主题的地图样式 493 lightStyle = \u0026#34;mapbox://styles/mapbox/light-v9\u0026#34; 494 # 深色主题的地图样式 495 darkStyle = \u0026#34;mapbox://styles/mapbox/dark-v9\u0026#34; 496 # 是否添加 NavigationControl 497 navigation = true 498 # 是否添加 GeolocateControl 499 geolocate = true 500 # 是否添加 ScaleControl 501 scale = true 502 # 是否添加 FullscreenControl 503 fullscreen = true 504 # FixIt 0.2.17 | NEW 赞赏设置 505 [params.page.reward] 506 enable = false 507 animation = false 508 # 相对于页脚的位置，可选值：[\u0026#34;before\u0026#34;, \u0026#34;after\u0026#34;] 509 position = \u0026#34;after\u0026#34; 510 # comment = \u0026#34;Buy me a coffee\u0026#34; 511 # 二维码图片展示模式，可选值：[\u0026#34;static\u0026#34;, \u0026#34;fixed\u0026#34;]，默认：`static` 512 mode = \u0026#34;static\u0026#34; 513 [params.page.reward.ways] 514 # wechatpay = \u0026#34;/images/wechatpay.png\u0026#34; 515 # alipay = \u0026#34;/images/alipay.png\u0026#34; 516 # paypal = \u0026#34;/images/paypal.png\u0026#34; 517 # bitcoin = \u0026#34;/images/bitcoin.png\u0026#34; 518 # 文章页面的分享信息设置 519 [params.page.share] 520 enable = true 521 Twitter = true 522 Facebook = true 523 Linkedin = false 524 Whatsapp = true 525 Pinterest = false 526 Tumblr = false 527 HackerNews = false 528 Reddit = false 529 VK = false 530 Buffer = false 531 Xing = false 532 Line = true 533 Instapaper = false 534 Pocket = false 535 Flipboard = false 536 Weibo = true 537 Myspace = true 538 Blogger = true 539 Baidu = false 540 Odnoklassniki = false 541 Evernote = true 542 Skype = false 543 Trello = false 544 Mix = false 545 # 评论系统设置 546 [params.page.comment] 547 enable = true 548 # FixIt 0.2.13 | NEW Artalk comment config (https://artalk.js.org/) 549 [params.page.comment.artalk] 550 enable = false 551 server = \u0026#34;https://yourdomain\u0026#34; 552 site = \u0026#34;默认站点\u0026#34; 553 placeholder = \u0026#34;\u0026#34; 554 noComment = \u0026#34;\u0026#34; 555 sendBtn = \u0026#34;\u0026#34; 556 editorTravel = true 557 flatMode = \u0026#34;auto\u0026#34; 558 # FixIt 0.2.17 | CHANGED enable lightgallery support 559 lightgallery = false 560 locale = \u0026#34;\u0026#34; # FixIt 0.2.15 | NEW 561 # FixIt 0.2.18 | NEW 562 emoticons = \u0026#34;\u0026#34; 563 nestMax = 2 564 nestSort = \u0026#34;DATE_ASC\u0026#34; # [\u0026#34;DATE_ASC\u0026#34;, \u0026#34;DATE_DESC\u0026#34;, \u0026#34;VOTE_UP_DESC\u0026#34;] 565 vote = true 566 voteDown = false 567 uaBadge = true 568 listSort = true 569 imgUpload = true 570 preview = true 571 versionCheck = true 572 # FixIt 0.1.1 | NEW Disqus comment config (https://disqus.com) 573 [params.page.comment.disqus] 574 enable = false 575 # Disqus shortname to use Disqus in posts 576 shortname = \u0026#34;\u0026#34; 577 # FixIt 0.1.1 | NEW Gitalk comment config (https://github.com/gitalk/gitalk) 578 [params.page.comment.gitalk] 579 enable = false 580 owner = \u0026#34;\u0026#34; 581 repo = \u0026#34;\u0026#34; 582 clientId = \u0026#34;\u0026#34; 583 clientSecret = \u0026#34;\u0026#34; 584 # Valine comment config (https://github.com/xCss/Valine) 585 [params.page.comment.valine] 586 enable = false 587 appId = \u0026#34;\u0026#34; 588 appKey = \u0026#34;\u0026#34; 589 placeholder = \u0026#34;\u0026#34; 590 avatar = \u0026#34;mp\u0026#34; 591 meta = \u0026#34;\u0026#34; 592 requiredFields = \u0026#34;\u0026#34; 593 pageSize = 10 594 lang = \u0026#34;\u0026#34; 595 visitor = true 596 recordIP = true 597 highlight = true 598 enableQQ = false 599 serverURLs = \u0026#34;\u0026#34; 600 # FixIt 0.2.6 | NEW emoji data file name, default is \u0026#34;google.yml\u0026#34; 601 # [\u0026#34;apple.yml\u0026#34;, \u0026#34;google.yml\u0026#34;, \u0026#34;facebook.yml\u0026#34;, \u0026#34;twitter.yml\u0026#34;] 602 # located in \u0026#34;themes/FixIt/assets/lib/valine/emoji/\u0026#34; directory 603 # you can store your own data files in the same path under your project: 604 # \u0026#34;assets/lib/valine/emoji/\u0026#34; 605 emoji = \u0026#34;\u0026#34; 606 commentCount = true # FixIt 0.2.13 | NEW 607 # FixIt 0.2.16 | CHANGED Waline comment config (https://waline.js.org) 608 [params.page.comment.waline] 609 enable = false 610 serverURL = \u0026#34;\u0026#34; 611 pageview = false # FixIt 0.2.15 | NEW 612 emoji = [\u0026#34;//unpkg.com/@waline/emojis@1.1.0/weibo\u0026#34;] 613 meta = [\u0026#34;nick\u0026#34;, \u0026#34;mail\u0026#34;, \u0026#34;link\u0026#34;] 614 requiredMeta = [] 615 login = \u0026#34;enable\u0026#34; 616 wordLimit = 0 617 pageSize = 10 618 imageUploader = false # FixIt 0.2.15 | NEW 619 highlighter = false # FixIt 0.2.15 | NEW 620 comment = false # FixIt 0.2.15 | NEW 621 texRenderer = false # FixIt 0.2.16 | NEW 622 search = false # FixIt 0.2.16 | NEW 623 recaptchaV3Key = \u0026#34;\u0026#34; # FixIt 0.2.16 | NEW 624 reaction = false # FixIt 0.2.18 | NEW 625 # Facebook comment config (https://developers.facebook.com/docs/plugins/comments) 626 [params.page.comment.facebook] 627 enable = false 628 width = \u0026#34;100%\u0026#34; 629 numPosts = 10 630 appId = \u0026#34;\u0026#34; 631 languageCode = \u0026#34;\u0026#34; 632 # FixIt 0.2.0 | NEW Telegram comments config (https://comments.app) 633 [params.page.comment.telegram] 634 enable = false 635 siteID = \u0026#34;\u0026#34; 636 limit = 5 637 height = \u0026#34;\u0026#34; 638 color = \u0026#34;\u0026#34; 639 colorful = true 640 dislikes = false 641 outlined = false 642 # FixIt 0.2.0 | NEW Commento comment config (https://commento.io) 643 [params.page.comment.commento] 644 enable = false 645 # FixIt 0.2.5 | NEW Utterances comment config (https://utteranc.es) 646 [params.page.comment.utterances] 647 enable = false 648 # owner/repo 649 repo = \u0026#34;\u0026#34; 650 issueTerm = \u0026#34;pathname\u0026#34; 651 label = \u0026#34;\u0026#34; 652 lightTheme = \u0026#34;github-light\u0026#34; 653 darkTheme = \u0026#34;github-dark\u0026#34; 654 # FixIt 0.2.13 | NEW Twikoo comment config (https://twikoo.js.org/) 655 [params.page.comment.twikoo] 656 enable = false 657 envId = \u0026#34;\u0026#34; 658 region = \u0026#34;\u0026#34; 659 path = \u0026#34;\u0026#34; 660 visitor = true 661 commentCount = true 662 # FixIt 0.2.17 | CHANGED enable lightgallery support 663 lightgallery = false 664 # FixIt 0.2.17 | NEW enable Katex support 665 katex = false 666 # Giscus 评论系统设置 667 [params.page.comment.giscus] 668 enable = true 669 repo = \u0026#34;\u0026#34; 670 repoId = \u0026#34;\u0026#34; 671 category = \u0026#34;\u0026#34; 672 categoryId = \u0026#34;\u0026#34; 673 mapping = \u0026#34;pathname\u0026#34; 674 strict = \u0026#34;0\u0026#34; # 675 term = \u0026#34;\u0026#34; 676 reactionsEnabled = \u0026#34;1\u0026#34; 677 emitMetadata = \u0026#34;0\u0026#34; 678 inputPosition = \u0026#34;top\u0026#34; # [\u0026#34;top\u0026#34;, \u0026#34;bottom\u0026#34;] 679 lightTheme = \u0026#34;light\u0026#34; 680 darkTheme = \u0026#34;dark\u0026#34; 681 lazyLoad = true 682 # 第三方库配置 683 [params.page.library] 684 [params.page.library.css] 685 # someCSS = \u0026#34;some.css\u0026#34; 686 # 位于 \u0026#34;assets/\u0026#34; 687 # 或者 688 # someCSS = \u0026#34;https://cdn.example.com/some.css\u0026#34; 689 [params.page.library.js] 690 # someJavascript = \u0026#34;some.js\u0026#34; 691 # 位于 \u0026#34;assets/\u0026#34; 692 # 或者 693 # someJavascript = \u0026#34;https://cdn.example.com/some.js\u0026#34; 694 # 页面 SEO 配置 695 [params.page.seo] 696 # 图片 URL 697 images = [\u0026#34;/favicon.ico\u0026#34;] 698 # 出版者信息 699 [params.page.seo.publisher] 700 name = \u0026#34;云吱\u0026#34; 701 logoUrl = \u0026#34;/logo.png\u0026#34; 702 703 # TypeIt 配置 704 [params.typeit] 705 # 每一步的打字速度（单位是毫秒） 706 speed = 100 707 # 光标的闪烁速度（单位是毫秒） 708 cursorSpeed = 1000 709 # 光标的字符（支持 HTML 格式） 710 cursorChar = \u0026#34;|\u0026#34; 711 # 打字结束之后光标的持续时间（单位是毫秒，\u0026#34;-1\u0026#34; 代表无限大） 712 duration = -1 713 # 打字完成后是否会连续循环 714 loop = false 715 716 # Mermaid 配置 717 [params.mermaid] 718 # 取值详见 https://mermaid.js.org/config/theming.html#available-themes 719 themes = [\u0026#34;default\u0026#34;, \u0026#34;dark\u0026#34;] 720 721 # 盘古之白配置 722 [params.pangu] 723 # 适用于中文写作用户 724 enable = true 725 selector = \u0026#34;article\u0026#34; # 726 727 # 水印配置 728 # 详细参数见 https://github.com/Lruihao/watermark#readme 729 [params.watermark] 730 enable = false 731 # 水印内容（允许 HTML 格式） 732 content = \u0026#34;\u0026#34; 733 # 水印透明度 734 opacity = 0.1 735 # 水印父节点 736 appendTo = \u0026#34;.wrapper\u0026gt;main\u0026#34; 737 # 单水印宽度 单位：px 738 width = 150 739 # 单水印高度 单位：px 740 height = 20 741 # 水印行间距 单位：px 742 rowSpacing = 60 743 # 水印列间距 单位：px 744 colSpacing = 30 745 # 水印旋转角度 单位：deg 746 rotate = 15 747 # 水印字体大小，单位：rem 748 fontSize = 0.85 749 # 水印字体 750 fontFamily = \u0026#34;inherit\u0026#34; 751 752 # 不蒜子统计 753 [params.ibruce] 754 enable = true 755 # 在文章中开启 756 enablePost = true 757 758 # 网站验证代码，用于 Google/Bing/Yandex/Pinterest/Baidu/360/Sogou 759 [params.verification] 760 google = \u0026#34;\u0026#34; 761 bing = \u0026#34;\u0026#34; 762 yandex = \u0026#34;\u0026#34; 763 pinterest = \u0026#34;\u0026#34; 764 baidu = \u0026#34;\u0026#34; 765 so = \u0026#34;\u0026#34; 766 sogou = \u0026#34;\u0026#34; 767 768 # FixIt 0.2.10 | 网站 SEO 配置 769 [params.seo] 770 # 图片 URL 771 image = \u0026#34;/favicon.ico\u0026#34; 772 # 缩略图 URL 773 thumbnailUrl = \u0026#34;favicon-32x32.png\u0026#34; 774 775 # FixIt 0.2.0 | NEW 网站分析配置 776 [params.analytics] 777 enable = true 778 # Google Analytics 779 [params.analytics.google] 780 id = \u0026#34;\u0026#34; 781 # 是否匿名化用户 IP 782 anonymizeIP = true 783 # Fathom Analytics 784 [params.analytics.fathom] 785 id = \u0026#34;\u0026#34; 786 # 自行托管追踪器时的主机路径 787 server = \u0026#34;\u0026#34; 788 789 # FixIt 0.2.7 | NEW Cookie 许可配置 790 [params.cookieconsent] 791 enable = false 792 # 用于 Cookie 许可横幅的文本字符串 793 [params.cookieconsent.content] 794 message = \u0026#34;\u0026#34; 795 dismiss = \u0026#34;\u0026#34; 796 link = \u0026#34;\u0026#34; 797 798 # FixIt 0.2.7 | 第三方库文件的 CDN 设置 799 [params.cdn] 800 # CDN 数据文件名称，默认不启用 [\u0026#34;jsdelivr.yml\u0026#34;, \u0026#34;unpkg.yml\u0026#34;, ...] 801 # 位于 \u0026#34;themes/FixIt/assets/data/cdn/\u0026#34; 目录 802 # 可以在你的项目下相同路径存放你自己的数据文件：\u0026#34;assets/data/cdn/\u0026#34; 803 # data = \u0026#34;unpkg.yml\u0026#34; 804 805 # FixIt 0.2.8 | NEW 兼容性设置 806 [params.compatibility] 807 # 是否使用 Polyfill.io 来兼容旧式浏览器 808 polyfill = false 809 # 是否使用 object-fit-images 来兼容旧式浏览器 810 objectFit = false 811 812 # FixIt 0.2.14 | NEW 在左上角或者右上角显示 GitHub 开源链接 813 [params.githubCorner] 814 enable = false 815 permalink = \u0026#34;https://github.com/hugo-fixit/FixIt\u0026#34; 816 title = \u0026#34;在 GitHub 上查看源代码\u0026#34; 817 position = \u0026#34;right\u0026#34; # [\u0026#34;left\u0026#34;, \u0026#34;right\u0026#34;] 818 819 # FixIt 0.2.14 | NEW Gravatar 设置 820 [params.gravatar] 821 # 取决于作者邮箱，作者邮箱未设置则使用本地头像 822 enable = true 823 # Gravatar 主机，默认：“www.gravatar.com” 824 host = \u0026#34;cn.gravatar.com\u0026#34; # [\u0026#34;cn.gravatar.com\u0026#34;, \u0026#34;gravatar.loli.net\u0026#34;, ...] 825 style = \u0026#34;identicon\u0026#34; # [\u0026#34;\u0026#34;, \u0026#34;mp\u0026#34;, \u0026#34;identicon\u0026#34;, \u0026#34;monsterid\u0026#34;, \u0026#34;wavatar\u0026#34;, \u0026#34;retro\u0026#34;, \u0026#34;blank\u0026#34;, \u0026#34;robohash\u0026#34;] 826 827 # FixIt 0.2.16 | NEW 返回顶部 828 [params.backToTop] 829 enable = true 830 # 在 b2t 按钮中显示滚动百分比 831 scrollpercent = true 832 833 # FixIt 0.2.16 | NEW 阅读进度条 834 [params.readingProgress] 835 enable = true 836 # 可用值：[\u0026#34;left\u0026#34;, \u0026#34;right\u0026#34;] 837 start = \u0026#34;left\u0026#34; 838 # 可用值：[\u0026#34;top\u0026#34;, \u0026#34;bottom\u0026#34;] 839 position = \u0026#34;top\u0026#34; 840 reversed = false 841 light = \u0026#34;\u0026#34; 842 dark = \u0026#34;\u0026#34; 843 height = \u0026#34;2px\u0026#34; 844 845 # FixIt 0.2.17 | NEW 页面加载期间顶部的进度条 846 # 有关详细信息：https://github.com/CodeByZach/pace 847 [params.pace] 848 enable = false 849 # 所有可用颜色： 850 # [\u0026#34;black\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;pink\u0026#34;, \u0026#34;purple\u0026#34;, \u0026#34;red\u0026#34;, \u0026#34;silver\u0026#34;, \u0026#34;white\u0026#34;, \u0026#34;yellow\u0026#34;] 851 color = \u0026#34;blue\u0026#34; 852 # 所有可用主题： 853 # [\u0026#34;barber-shop\u0026#34;, \u0026#34;big-counter\u0026#34;, \u0026#34;bounce\u0026#34;, \u0026#34;center-atom\u0026#34;, \u0026#34;center-circle\u0026#34;, \u0026#34;center-radar\u0026#34;, \u0026#34;center-simple\u0026#34;, 854 # \u0026#34;corner-indicator\u0026#34;, \u0026#34;fill-left\u0026#34;, \u0026#34;flash\u0026#34;, \u0026#34;flat-top\u0026#34;, \u0026#34;loading-bar\u0026#34;, \u0026#34;mac-osx\u0026#34;, \u0026#34;material\u0026#34;, \u0026#34;minimal\u0026#34;] 855 theme = \u0026#34;minimal\u0026#34; 856 857 # FixIt 0.2.18-lts.3 | [试验性功能] 缓存图床图片到本地，详见：https://github.com/hugo-fixit/FixIt/pull/362 858 [params.cacheRemoteImages] 859 enable = false 860 # 用本地图片链接替换远程图片链接 861 replace = false 862 863 # FixIt 0.2.17 | NEW 定义自定义文件路径 864 # 在站点目录 `layouts/partials/custom` 中创建您的自定义文件，并取消注释下面需要的文件 865 [params.customFilePath] 866 # aside = \u0026#34;custom/aside.html\u0026#34; 867 # profile = \u0026#34;custom/profile.html\u0026#34; 868 # footer = \u0026#34;custom/footer.html\u0026#34; 869 870 # FixIt 0.2.15 | NEW 开发者选项 871 [params.dev] 872 enable = false 873 # 检查更新 874 c4u = false 875 # 请勿公开展示！ 876 githubToken = \u0026#34;\u0026#34; 877 # 移动端开发者工具配置 878 [params.dev.mDevtools] 879 enable = false 880 # 支持 \u0026#34;vConsole\u0026#34;, \u0026#34;eruda\u0026#34; 881 type = \u0026#34;vConsole\u0026#34; 882 883# ------------------------------------------------------------------------------------- 884# Modules Configuration 885# See: https://gohugo.io/hugo-modules/configuration/#module-config-imports 886# ------------------------------------------------------------------------------------- 887 888[module] 889 [module.hugoVersion] 890 extended = true 891 min = \u0026#34;0.110.0\u0026#34; 892 893# ------------------------------------------------------------------------------------- 894# Markup related configuration in Hugo 895# See: https://gohugo.io/getting-started/configuration-markup/ 896# ------------------------------------------------------------------------------------- 897 898# Hugo 解析文档的配置 899[markup] 900 # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) 901 [markup.highlight] 902 ################## 必要的配置 ################## 903 # https://github.com/hugo-fixit/FixIt/issues/43 904 codeFences = true 905 lineNos = true 906 lineNumbersInTable = true 907 noClasses = false 908 ################## 必要的配置 ################## 909 guessSyntax = true 910 # Goldmark 是 Hugo 0.60 以来的默认 Markdown 解析库 911 [markup.goldmark] 912 [markup.goldmark.extensions] 913 definitionList = true 914 footnote = true 915 linkify = true 916 strikethrough = true 917 table = true 918 taskList = true 919 typographer = true 920 [markup.goldmark.renderer] 921 # 是否在文档中直接使用 HTML 标签 922 unsafe = true 923 # Table Of Contents settings 924 [markup.tableOfContents] 925 startLevel = 2 926 # endLevel = 4 927 928# ------------------------------------------------------------------------------------- 929# Sitemap Configuration 930# See: https://gohugo.io/templates/sitemap-template/#configuration 931# ------------------------------------------------------------------------------------- 932 933# 网站地图配置 934[sitemap] 935 changefreq = \u0026#34;daily\u0026#34; 936 filename = \u0026#34;sitemap.xml\u0026#34; 937 priority = 0.5 938 939# ------------------------------------------------------------------------------------- 940# Permalinks Configuration 941# See: https://gohugo.io/content-management/urls/#permalinks 942# ------------------------------------------------------------------------------------- 943 944# Permalinks 配置 (https://gohugo.io/content-management/urls#permalinks) 945[Permalinks] 946 # posts = \u0026#34;:year/:month/:filename\u0026#34; 947 posts = \u0026#34;/posts/:slug\u0026#34; 948 949# ------------------------------------------------------------------------------------- 950# Privacy Configuration 951# See: https://gohugo.io/about/hugo-and-gdpr/ 952# ------------------------------------------------------------------------------------- 953# 隐私信息配置 (https://gohugo.io/about/hugo-and-gdpr/) 954[privacy] 955 [privacy.twitter] 956 enableDNT = true 957 [privacy.youtube] 958 privacyEnhanced = true 959 960# ------------------------------------------------------------------------------------- 961# Media Types 962# See: https://gohugo.io/templates/output-formats/#media-types 963# ------------------------------------------------------------------------------------- 964 965[mediaTypes] 966 # 用于输出 Markdown 格式文档的设置 967 [mediaTypes.\u0026#34;text/markdown\u0026#34;] 968 suffixes = [\u0026#34;md\u0026#34;] 969 # 用于输出 txt 格式文档的设置 970 [mediaTypes.\u0026#34;text/plain\u0026#34;] 971 suffixes = [\u0026#34;txt\u0026#34;] 972 973# ------------------------------------------------------------------------------------- 974# Output Format Definitions 975# See: https://gohugo.io/templates/output-formats/#output-format-definitions 976# ------------------------------------------------------------------------------------- 977 978[outputFormats] 979 # 用于输出 Markdown 格式文档的设置 980 [outputFormats.MarkDown] 981 mediaType = \u0026#34;text/markdown\u0026#34; 982 isPlainText = true 983 isHTML = false 984 # 用于输出 baidu_urls.txt 文件的设置 985 [outputFormats.BaiduUrls] 986 baseName = \u0026#34;baidu_urls\u0026#34; 987 mediaType = \u0026#34;text/plain\u0026#34; 988 isPlainText = true 989 isHTML = false 990 991# ------------------------------------------------------------------------------------- 992# Customizing Output Formats 993# See: https://gohugo.io/templates/output-formats/#customizing-output-formats 994# ------------------------------------------------------------------------------------- 995# 用于 Hugo 输出文档的设置 996[outputs] 997 home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;, \u0026#34;BaiduUrls\u0026#34;] 998 page = [\u0026#34;HTML\u0026#34;] 999 section = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;] 1000 taxonomy = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;] 1001 taxonomyTerm = [\u0026#34;HTML\u0026#34;] 1002 1003# ------------------------------------------------------------------------------------- 1004# Taxonomies Configuration 1005# See: https://gohugo.io/content-management/taxonomies/#configure-taxonomies 1006# ------------------------------------------------------------------------------------- 1007 1008[taxonomies] 1009 # series = \u0026#34;series\u0026#34; 1010 category = \u0026#34;categories\u0026#34; 1011 tag = \u0026#34;tags\u0026#34; 1012 collections = \u0026#34;collections\u0026#34; 2.3 修改文章前缀模板 在每篇 markdown 文章最前面可以用一部分注释来告诉主题，这篇文章的属性，譬如文章标签、分类、是否为草稿等。\n2.4 创建你的第一篇文章 创建新文章的命令：\n1hugo new posts/文章标题.md 执行完成后，在./content/posts目录下应该可以看到新文件，同时里面已经有 markdown 模版中的文章前缀参数。\n2.5 本地调试 1hugo serve -D --disableFastRender 3、Github 3.1 创建SSH密钥并添加 3.2 生成 SSH 密钥\n使用 Git Bash 或命令行打开终端窗口，输入以下命令。记得把your_email@example.com改成你自己的邮箱地址。\n1ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; 按照提示键入您想要保存密钥的文件名和路径，或使用默认设置。\n接下来，系统将生成一个随机字符串作为密钥密码。此处可以选用默认密码以便于不需要输入密码进行 SSH 登录。进入生成密钥的文件夹，查看密钥：\n登录到 GitHub 账户，并转到“Settings”（设置）中的“SSH and GPG keys”（SSH 和 GPG 密钥）页面。\n点击“New SSH key”（新建 SSH 密钥），填写标题和密钥的内容。\n打开id_rsa.pub公钥文件 (即你在生成的时候保存的文件) ，将其内容复制到 GitHub 的 “Key” 字段中。\n最后，点击“Add SSH key” （添加 SSH 密钥），完成密钥添加。\n3.4 创建 blog 仓库 用于存储博客源文件，也就是刚才的本地项目文件。\n在 GitHub 网站上登录你的账号，然后点击页面右上角的加号图标，选择 “New repository”（新建仓库）。\n在 “Initialize this repository with”（使用以下方式初始化仓库）部分，选择 “Add a README file”（添加一个 README 文件）选项。\n暂存并提交现有文件\n1git add . 2git commit -m \u0026#34;init blog files\u0026#34; 点击 “Create repository”（创建仓库）按钮，完成 GitHub 仓库的创建。\n将本地仓库与远程 GitHub 仓库关联起来。在项目目录中打开 Git Bash，执行以下命令，将 \u0026lt;remote-url\u0026gt; 替换为你的 GitHub 仓库的远程 URL：\n1git remote add origin \u0026lt;remote-url\u0026gt; 例如：\n1git remote add origin https://github.com/your-username/your-repository.git 将本地代码推送到远程仓库的 main 分支。执行以下命令：\n1git push -u origin main 这将把本地的代码推送到远程仓库的 main 分支，并将其设置为默认上游分支。\n3.5 创建Github Pages公开仓库 用于实际展示博客。\n创建新仓库\nRepository name 这里一定要填 [你的github账号].github.io。你的github账号必须小写字母。仓库可见性设为Public。选择“使用 README 初始化此存储库”。\n3.6 上传页面 1hugo 执行后，站点根目录下会生成一个 public 文件夹，该文件下的内容即 Hugo 生成的整个静态网站。每次更新内容后，将 pubilc 目录里所有文件 push 到 GitHub Pages 所在的仓库即可。\n首次使用的时候要执行以下命令：\n1cd public 2git init 3git remote add origin https://github.com/leegical/leegical.github.io.git # 将本地目录链接到远程服务器的代码仓库 4git add . 5git commit -m \u0026#34;[介绍，随便写点什么，比如日期]\u0026#34; 6git push -u origin master 进入 Github Pages 仓库的Setting-Pages，把Branch修改为master，点击 save。\n稍等几分钟即可通过[你的github账号].github.io来访问博客站点了，和hugo serve -D本地调试完全一致。\n3.5 Github Action 自动发布 通过上述命令我们可以手动发布我们的静态文件，但还是有以下弊端：\n发布步骤还是比较繁琐，本地调试后还需要切换到 public/ 目录进行上传 无法对博客 .md 源文件进行备份与版本管理 可以通过官方提供的 GitHub Action 进行 CI 自动发布。 回到 blog 仓库的本地文件夹，新增.github/workflows/deploy.yml\n1mkdir .github 2mkdir .github/workflows 3touch .github/workflows/deploy.yml 用 vscode 编辑 deploy.yml 的内容，参考如下：\n注意：EXTERNAL_REPOSITORY要修改为 Github Pages 的链接\n提交变更到 Github：\n1git add . 2git commit -m \u0026#34;add action config\u0026#34; 3git push 进入 Github tokens ，点击Generate new token——Generate new token (classic)\nNote：随便写\nExpiration：No expiration\nSelect scopes：只勾选\n1repo 拉到最下面，点击生成。\n注意生成的 token 只会显示这一次，形如 ghp_xxxxxxxxxx，点击复制。 回到 blog 仓库——Setting，新建仓库密钥\nName：PERSONAL_TOKEN\nSecret：填刚才复制的密钥\n4 自定义博客域名 你的github账户名.github.io的网址在国内访问速度较慢，为博客设置一个自定义域名可以有效加快速度。以本博客为例，要设置的自定义域名为：haoyep.com。\n4.1 Cloudflare 配置 使用 Cloudflare 托管域名，这一点教程很多，跟着做就行。\n在 DNS 配置中，新增一条 CNAME 解析记录到你的github账户名.github.io，不启用代理。\n4.2 hugo 配置 在 static 中添加 CNAME 文件，内容为自定义域名为 haoyep.com。\nhugo.toml 修改 baseURL 为自定义域名为 haoyep.com。\n提交到 Github 仓库\n1hugo 2git add . 3git commit -m \u0026#34;Create CNAME\u0026#34; 4git push 4.3 Github Pages 仓库配置 为自定义域名启用 SSL 证书。 Settings——Pages——Custom domain，勾选 Enforce HTTPS。 5 总结 以上整个环境部署好之后，接下来的常用命令就是以下几个：\n站点目录下，新建文章，执行：\n1hugo new posts/文章名.md 使用VScode编辑文章内容或修改，包括修改主题之类的。在本地进行调试:\n1hugo serve -D --disableFastRender 修改完成，确定要上传到 GitHub 上后，站点目录下执行：\n1hugo 进行编译，没错误的话修改的内容就顺利同步到public下了，然后执行提交命令：\n1git add . 2git commit -m \u0026#34;随便写点提交信息\u0026#34; 3git push 稍等片刻，github action 执行完毕，页面就会更新了。\n","date":"2024-03-20T00:00:00Z","permalink":"https://huuuuuuo.github.io/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAhugo+githubpages-copy/","section":"post","tags":["hugo","githubpages","博客搭建"],"title":"博客搭建：Hugo+GithubPages"},{"categories":["Tech"],"contents":"1 failed to push some refs 报错 1git push -u origin main 2To https://github.com/xxxx.git 3 ! [rejected] main -\u0026gt; main (non-fast-forward) 4error: failed to push some refs to \u0026#39;https://github.com/xxxx.git\u0026#39; 5hint: Updates were rejected because the tip of your current branch is behind 6hint: its remote counterpart. Integrate the remote changes (e.g. 7hint: \u0026#39;git pull ...\u0026#39;) before pushing again. 8hint: See the \u0026#39;Note about fast-forwards\u0026#39; in \u0026#39;git push --help\u0026#39; for details. 1.1 解决方案： 错误消息表明本地分支位于远程分支后面，并且 Git 阻止我推送更改以避免覆盖远程更改。如果其他人已将提交推送到本地没有的远程分支，则可能会出现这种情况。若要解决此问题，需要先将远程更改集成到本地分支中，然后才能推送更改。以下是步骤：\n1.1.1 Fetch the Remote Changes: First, you need to fetch the changes from the remote repository without merging them into your local branch. This ensures that you have the latest changes from the remote repository but keeps your local branch unchanged. 获取远程更改：首先，你需要从远程存储库获取更改，而无需将它们合并到本地分支中。这可确保你拥有来自远程存储库的最新更改，但保持本地分支不变。\n1git fetch origin 1.1.2 Merge or Rebase: After fetching the changes, you have two main options to integrate the remote changes into your local branch: 合并或变基：获取更改后，你有两个主要选项将远程更改集成到本地分支中：\n1- **Merge**: This will create a new merge commit in your local branch that combines your changes with the changes from the remote branch. 2git merge origin/main Rebase: This will replay your local commits on top of the remote changes, creating a linear history. This is a cleaner approach but can be more complex if there are conflicts. 变基：这将在远程更改之上重放你的本地提交，从而创建线性历史记录。这是一种更简洁的方法，但如果存在冲突，可能会更复杂。 1git rebase origin/main If you choose to rebase and encounter conflicts, you\u0026rsquo;ll need to resolve them manually. After resolving conflicts, continue the rebase with git rebase --continue. 如果选择变基并遇到冲突，则需要手动解决它们。解决冲突后，继续使用 git rebase --continue .\n1.1.3 Push Your Changes: Once you\u0026rsquo;ve integrated the remote changes into your local branch, you can push your changes to the remote repository. If you\u0026rsquo;ve rebased, you might need to force push, but be cautious as this can overwrite history on the remote repository. 推送更改：将远程更改集成到本地分支后，可以将更改推送到远程存储库。如果已变基，则可能需要强制推送，但要小心，因为这可能会覆盖远程存储库上的历史记录。\n1git push origin main If you\u0026rsquo;ve merged and there are no conflicts, a simple push should work. If you\u0026rsquo;ve rebased and need to force push, use: 如果已合并并且没有冲突，则简单的推送应该可以工作。如果你已重新定位并需要强制推送，请使用：\n1git push -f origin main Remember, force pushing (git push -f) should be used with caution, especially in shared repositories, as it can overwrite history and potentially cause issues for other collaborators. Always communicate with your team before force pushing. 请记住，应谨慎使用强制推送 （ git push -f ），尤其是在共享存储库中，因为它可能会覆盖历史记录并可能给其他协作者带来问题。在强制推动之前，请务必与你的团队沟通。\n2 Empty reply from server报错 or Timed out报错 1git push -u origin main 2fatal: unable to access \u0026#39;https://github.com/HuuuuuuO/blog.git/\u0026#39;: Empty reply from server 或者为：\n1git push -f origin main 2fatal: unable to access \u0026#39;https://github.com/HuuuuuuO/blog.git/\u0026#39;: Failed to connect to github.com port 443: Timed out 2.1 解决方案： 2.1.1 检查 SSH 访问： 如果使用 SSH 连接到 GitHub，请确保将 SSH 密钥正确添加到 GitHub 帐户。您可以使用命令 ssh -T git@github.com 测试 SSH 连接。如果您收到成功的身份验证消息，则您的 SSH 设置是正确的。\n1ssh -T git@github.com 2.使用 SSH 而不是 HTTPS： 如果当前使用 HTTPS 推送到 GitHub，请尝试切换到 SSH。这有时可以绕过与 HTTPS 连接相关的问题。您可以将远程 URL 更改为通过命令 git remote set-url origin git@github.com:HuuuuuuO/blog.git 使用 SSH。\n1git remote set-url origin git@github.com:HuuuuuuO/blog.git 3.进行push 1git push origin main 成功。\n","date":"2024-03-19T19:30:42+08:00","permalink":"https://huuuuuuo.github.io/post/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","section":"post","tags":["git","branch","分支","git bug"],"title":"git push：本地分支和远程分支冲突问题解决"},{"categories":null,"contents":" 本文阅读书籍与参考代码：\nhttps://github.com/MichalDanielDobrzanski/DeepLearningPython\n1 使⽤神经⽹络识别⼿写数字 神经⽹络使⽤样本来⾃动推断出识别⼿写数字的规则。另外，通过增加训练样本的数量，⽹络可以学到更多关于⼿写数字的知识，这样就能够提升⾃⾝的准确性。\n1.1 感知器 ⼀个感知器接受⼏个⼆进制输⼊，x1, x2, . . .，并产⽣⼀个⼆进制输出。你可以将感知器看作依据权重来作出决定的设备。感知器的规则可以写为：\n感知器网络可以表示为如下，并且我们完全能⽤感知器⽹络来计算任何逻辑功能，例如“与”，“或”和“与⾮”：\n1.2 S型神经元 假设我们把⽹络中的权重（或者偏置）做些微⼩的改动。就像我们⻢上会看到的，这⼀属性会让学习变得可能：\n如果对权重（或者偏置）的微⼩的改动真的能够仅仅引起输出的微⼩变化，那我们可以利⽤这⼀事实来修改权重和偏置，让我们的⽹络能够表现得像我们想要的那样。\n例如，假设⽹络错误地把⼀个“9”的图像分类为“8”。我们能够计算出怎么对权重和偏置做些⼩的改动，这样⽹络能够接近于把图像分类为“9”。\n然后我们要重复这个⼯作，反复改动权重和偏置来产⽣更好的输出。这时⽹络就在学习。\n实际上，⽹络中单个感知器上⼀个权重或偏置的微⼩改动有时候会引起那个感知器的输出完全翻转，如 0 变到 1。因此，虽然你的“9”可能被正确分类，⽹络在其它图像上的⾏为很可能以⼀些很难控制的⽅式被完全改变。\n我们引⼊⼀种称为 S 型神经元的新的⼈⼯神经元来克服这个问题。S 型神经元和感知器类似，但是被修改为权重和偏置的微⼩改动只引起输出的微⼩变化。这对于让神经元⽹络学习起来是很关键的。\nS 型神经元有多个输⼊，x1, x2, . . .。但是这些输⼊可以取 0 和 1 中的任意值，⽽不仅仅是 0 或 1。例如，0.638 。\n其中z ≡ w · x + b，σ 有时被称为逻辑函数。\n形状如下：\nσ 函数的平滑特性，正是关键因素，⽽不是其细部形式。σ 的平滑意味着权重和偏置的微⼩变化，即 ∆wj 和 ∆b，会从神经元产⽣⼀个微⼩的输出变化 ∆output。实际上它的意思⾮常简单（这可是个好消息）：∆output 是⼀个反映权重和偏置变化 —— 即 ∆wj 和 ∆b —— 的线性函数。这⼀线性使得选择权重和偏置的微⼩变化来达到输出的微⼩变化的运算变得容易。\nS 型神经元不仅仅输出 0 或 1。它可以输出 0 和 1 之间的任何实数，所以诸如 0.173。\n1.3 神经⽹络的架构 有这样一个网络：\n这个⽹络中，最左边的称为输⼊层，其中的神经元称为输⼊神经元。\n最右边的，即输出层，包含有输出神经元，在本例中，输出层只有⼀个神经元。\n中间层，既然这层中的神经元既不是输⼊也不是输出，则被称为隐藏层。“隐藏”这⼀术语也许听上去有些神秘——但它实际上仅仅意味着“既⾮输⼊也⾮输出”。\n1.3.1 网络层的设计 设计⽹络的输⼊输出层通常是⽐较直接的。例如，假设我们尝试确定⼀张⼿写数字的图像上是否写的是“9”。很⾃然地，我们可以将图⽚像素的强度进⾏编码作为输⼊神经元来设计⽹络。\n如果图像是⼀个 64 × 64 的灰度图像，那么我们会需要 4096 = 64 × 64 个输⼊神经元，每个强度取 0 和 1 之间合适的值。\n输出层只需要包含⼀个神经元，当输出值⼩于 0.5 时表⽰“输⼊图像不是⼀个 9”，⼤于 0.5 的值表⽰“输⼊图像是⼀个 9”。\n⽬前为⽌，我们讨论的神经⽹络，都是以上⼀层的输出作为下⼀层的输⼊。这种⽹络被称为前馈神经⽹络。\n1.4 ⼀个简单的分类⼿写数字的⽹络 我们给⽹络的训练数据会有很多扫描得到的 28 × 28 的⼿写数字的图像组成，所有输⼊层包含有 784 = 28 × 28个神经元。输⼊像素是灰度级的，值为 0.0 表⽰⽩⾊，值为 1.0 表⽰⿊⾊，中间数值表⽰逐渐暗淡的灰⾊。\n⽹络的第⼆层是⼀个隐藏层。我们⽤ n 来表⽰神经元的数量，我们将给 n 实验不同的数值。⽰例中⽤⼀个⼩的隐藏层来说明，仅仅包含 n = 15 个神经元。\n⽹络的输出层包含有 10 个神经元。如果第⼀个神经元激活，即输出 ≈ 1，那么表明⽹络认为数字是⼀个 0。\n1.4.1 隐藏层的神经元在做什么 假设隐藏层的第⼀个神经元只是⽤于检测如下的图像是否存在：\n为了达到这个⽬的，它通过对此图像对应部分的像素赋予较⼤权重，对其它部分赋予较⼩的 权重。同理，我们可以假设隐藏层的第⼆，第三，第四个神经元是为检测下列图⽚是否存在：\n这四幅图像组合在⼀起构成了前⾯显⽰的⼀⾏数字图像中的 0：\n1.4.2 练习——十进制转二进制 通过在上述的三层神经⽹络加⼀个额外的⼀层就可以实现按位表⽰数字。额外的⼀层把原来的输出层转化为⼀个⼆进制表⽰，如下图所⽰。为新的输出层寻找⼀些合适的权重和偏置。假定原先的 3 层神经⽹络在第三层得到正确输出（即原来的输出层）的激活值⾄少是0.99，得到错误的输出的激活值⾄多是0.01。\n原数字 二进制表示 0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111 8 1000 9 1001 四位二进制用abcd表示，当十进制输入为8，9的时候，a=1。\n所以可以设置权重为[0，0，0，0，0，0，0，0，1，1]T\n例如，计算第一个神经元a的w·x，当第三层十进制输出8时：\n激活值：当该位激活时=0.99，未激活时=0.01。第三层输出8时，8那个位置激活了，所以激活值=0.99 9的权重为1，但是未激活，所以激活值为0.01 计算各位的权重·激活值并进行相加，结果=1.00 原数字 权重 激活值 计算w·激活值 0 0 0.01 0 1 0 0.01 0 2 0 0.01 0 3 0 0.01 0 4 0 0.01 0 5 0 0.01 0 6 0 0.01 0 7 0 0.01 0 8 1 0.99 0.99 9 1 0.01 0.01 1.00 又例如，计算第三个神经元c的w·x，当第三层十进制输出7时：\n激活值：当该位激活时=0.99，未激活时=0.01。第三层输出7时，7那个位置激活了，所以激活值=0.99 2、3、6的权重为1，但是未激活，所以激活值为0.01 计算各位的权重·激活值并进行相加，结果=1.02 原数字 权重 激活值 计算w·激活值 0 0 0.01 0 1 0 0.01 0 2 1 0.01 0.01 3 1 0.01 0.01 4 0 0.01 0 5 0 0.01 0 6 1 0.01 0.01 7 1 0.99 0.99 8 0 0.01 0 9 0 0.01 0 1.02 最后可以得出总表：\n数字 w·x（第一个神经元） 第二个神经元 第三个神经元 第四个神经元 0 0.02 0.04 0.04 0.05 1 0.02 0.04 0.04 1.03 2 0.02 0.04 1.02 0.05 3 0.02 0.04 1.02 1.03 4 0.02 1.02 0.04 0.05 5 0.02 1.02 0.04 0.05 6 0.02 1.02 1.02 0.05 7 0.02 1.02 1.02 1.03 8 1.00 0.04 0.04 0.05 9 1.00 0.04 0.04 0.05 可以看出最大误差为0.05，那么我们可以设置偏置b为-0.06，就可以消去误差，然后规定至少大于0激活。比如，当第三层输出的数字为7，得出4个神经元adcd的输出w·x分别为[0.02，1.02，1.02，1.03]，这时候去掉误差-0.06，得到[-0.04，0.96，0.96，0.97]，-0.04未激活，结果=0。此时adcd=0111，也就是十进制的7。\n1.5 使⽤梯度下降算法进⾏学习 把每个训练输⼊ x 看作⼀个 28 × 28 = 784维的向量。每个向量中的项⽬代表图像中单个像素的灰度值。我们⽤ y = y(x) 表⽰对应的期望输出，这⾥ y 是⼀个 10 维的向量。\n我们希望有⼀个算法，能让我们找到权重和偏置，以⾄于⽹络的输出 y(x) 能够拟合所有的训练输⼊ x。为了量化我们如何实现这个⽬标，我们定义⼀个损失函数：\n这⾥ w 表⽰所有的⽹络中权重的集合，b 是所有的偏置，n 是训练输⼊数据的个数，a 是表⽰当输⼊为 x 时输出的向量，求和则是在总的训练输⼊ x 上进⾏的。\n我们训练算法的⽬的，是最⼩化权重和偏置的代价函数 C(w, b)。换句话说，我们想要找到⼀系列能让代价尽可能⼩的权重和偏置。\n我们将采⽤称为梯度下降的算法来达到这个⽬的。\n梯度下降算法⼯作的⽅式就是重复计算梯度 ∇C，然后沿着相反的⽅向移动，沿 着⼭⾕“滚落”。我们可以想象它像这样：\n梯度下降法可以被视为⼀种在 C 下降最快的⽅向上做微⼩变化的⽅法。\n1.6 实现我们的⽹络来分类数字 ⼀旦我们给⼀个⽹络学会了⼀组好的权重集和偏置集，它能很容易地被移植到⽹络浏览器中以 Javascript 运⾏，或者如在移动设备上的本地应⽤。\n建立一个test1.py文件，写入以下代码：\n1import mnist_loader 2import network 3 4training_data, validation_data, test_data = mnist_loader.load_data_wrapper() 5net = network.Network([784, 30, 10]) 6net.SGD(training_data, 30, 10, 3.0, test_data=test_data) 代码输出如下，最高准确率为95.08%：\n1Epoch 0 : 8937 / 10000 2... 3Epoch 19 : 9508 / 10000 4... 5Epoch 29 : 9488 / 10000 将隐藏层神经元数量改到 100，准确率提升到了96%以上，⾄少在这种情况下，使⽤更多的隐藏神经元帮助我们得到了更好的结果。\n当然，为了获得这些准确性，我不得不对训练的迭代期数量，⼩批量数据⼤⼩和学习速率η做特别的选择。正如我上⾯所提到的，这些在我们的神经⽹络中被称为超参数，以区别于通过我们的学习算法所学到的参数（权重和偏置）。如果我们选择了糟糕的超参数，我们会得到较差的结果。\n","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/","section":"img_move_back","tags":null,"title":""},{"categories":null,"contents":"1 目标 构建一个自己手写的数据集，作为测试集，测试神经网络的性能。\n2 步骤 数据处理：将图片转化为28*28的大小（同时进行灰度化，归一化等）\n格式转换：转为mnist数据集的格式。这一步将图片转为下面这样，第一个\n读取并测试：将原本的mnist_loader.py改为加载自己的测试集，并运行test1.py进行测试\n3 数据处理 灰度化、转化为28*28的大小、归一化并反相（因为输入为白底黑字，若为黑底白字就不需要）：\n1img = Image.open(os.path.join(root, filename)).convert(\u0026#39;L\u0026#39;) 2resized_img = img.resize((28, 28)) 3normalized_arr =1-arr.astype(np.float32) / 255 不过这样生成的图片是灰度的，而不是纯黑白的。实验证明，准确率比较低，因此仿照官方测试集进行处理。\n对于准确率来说，数据处理的怎么样很重要。如果数据处理的时候只进行灰度化，识别结果会比较差，准确率最高为18%。如果加一点对比度，结果会有点提升，能到23%左右，但是拉不开区别。\n若进行了纯黑纯白化，即通过设置阈值，在阈值以上的全部设置为255，阈值以下的全部设置为0，那么图片将变为黑底白字的只有两个极端的图片，如下图，此时识别结果就会好很多，最高能达到40%。\n1arr = np.array(resized_img) 2 3# 将数据拉平成一维数组 4arr_1 = arr.flatten() 5 6# 计算每个元素的出现次数 7counts = np.bincount(arr_1) 8# 找出出现次数最多的元素 9max_count = max(counts) 10most_frequent_elements = np.where(counts == max_count)[0][0] 11# 设置阈值和区间 12intervals=40 13threshold_1 = most_frequent_elements-int(intervals/2) 14threshold_2 = most_frequent_elements+int(intervals/2) 15 16# 调整阈值，将之绝对化为0和255，输出画面可变为纯黑白 17arr[(arr \u0026gt; threshold_1) \u0026amp; (arr \u0026lt; threshold_2)] = 255 18arr[arr \u0026lt; threshold_1] = 0 置于为何设置阈值和区间，通过下图的像素分布可以看出，有很大一部分的像素深度位于一个区间，而这个区间则是背景像素所在的区间（背景像素占比最多）。\n如果简单设置一个阈值，则可能出现如下结果：\n1threshold=127 2arr[arr \u0026gt; threshold] = 255 3arr[arr \u0026lt; threshold] = 0 同样这张图片，在前面可以被调整成下面这样，差别很大。\n4 格式转换 输出原本数据集的数组形状可以得知，原本的数据集形状是（10000，784），这意味着要把我们从图片转化而来的（28，28）数组展平，而标签数据已经通过文件夹名字获取（这里的前提是，我们将各个数字放在其对应的文件夹中，完成分类，例如数字1就放在文件夹“1”中）。\n1# 图片数据，归一化数据拉平成一维数组 2flattened_arr = normalized_arr.flatten() 3array_data.append(flattened_arr) 4 5# 标签数据 6label = get_label(root) 7label_data.append(label) 8 9label_data_out=np.array(label_data, dtype=np.int64) 10array_data_out=np.array(array_data, dtype=np.float32) 然后我们将这些数据保存成pkl：\n1def save_as_pkl_gz(data_list, file_path): 2 with gzip.open(file_path, \u0026#39;wb\u0026#39;) as f: 3 pickle.dump(data_list, f) 4 5def save_images(images_data, label_data, directory): 6 os.makedirs(directory, exist_ok=True) 7 for i, (image, label) in enumerate(zip(images_data, label_data)): 8 sub_dir = os.path.join(directory, label) 9 os.makedirs(sub_dir, exist_ok=True) 10 image.save(f\u0026#39;{sub_dir}/image_{label}_{i}.png\u0026#39;) 5 读取并测试 本书例子里面，mnist数据集的格式是mnist.pkl，里面直接把训练集和测试集都包括进去了\n1training_data, validation_data, test_data = pickle.load(f, encoding=\u0026#34;latin1\u0026#34;) 我们要做的就是：转换我们自己的图片数据为pkl，并作为test_data。\n在mnist_loader.py修改这个函数代码，将测试集替换成我们自己的：\n1def load_data(): 2 f = gzip.open(\u0026#39;mnist.pkl.gz\u0026#39;, \u0026#39;rb\u0026#39;) 3 training_data, validation_data, test_data = pickle.load(f, encoding=\u0026#34;latin1\u0026#34;) 4 f.close() 5 6 f_mydata = gzip.open(\u0026#39;mydata.pkl.gz\u0026#39;, \u0026#39;rb\u0026#39;) 7 test_data = pickle.load(f_mydata, encoding=\u0026#34;latin1\u0026#34;) 8 f_mydata.close() 9 10 return (training_data, validation_data, test_data) 最终，在使用官方训练集，我们自己的测试集进行测试的情况下，结果如下。其中0和9的识别率降低，推测与写法以及7和9易混淆有关。\n1[(4, 0), (5, 0), (2, 0), (7, 0), (0, 0), (7, 0), (9, 0), (0, 0), (4, 0), 2(1, 1), (6, 1), (6, 1), (1, 1), (1, 1), (5, 1), (1, 1), (5, 1), (5, 1), 3(1, 2), (2, 2), (2, 2), (2, 2), (2, 2), (1, 2), (2, 2), (6, 2), (1, 2), (8, 2), 4(5, 3), (3, 3), (3, 3), (3, 3), (3, 3), (5, 3), (5, 3), (4, 3), (1, 3), 5(4, 4), (5, 4), (0, 4), (4, 4), (4, 4), (9, 4), (4, 4), (6, 4), (9, 4), (8, 4), 6(1, 5), (5, 5), (1, 5), (5, 5), (5, 5), (5, 5), (5, 5), (1, 5), (5, 5), (5, 5), 7(1, 6), (6, 6), (1, 6), (5, 6), (6, 6), (6, 6), (6, 6), (6, 6), (4, 6), (5, 6), 8(1, 7), (2, 7), (2, 7), (7, 7), (1, 7), (1, 7), (7, 7), (7, 7), (5, 7), (1, 7), 9(6, 8), (8, 8), (8, 8), (5, 8), (8, 8), (8, 8), (8, 8), (8, 8), (8, 8), (8, 8), 10(1, 9), (1, 9), (1, 9), (2, 9), (7, 9), (5, 9), (7, 9), (5, 9), (7, 9)] 110 : 22.22% 121 : 44.44% 132 : 50.0% 143 : 44.44% 154 : 40.0% 165 : 70.0% 176 : 50.0% 187 : 30.0% 198 : 80.0% 209 : 0.0% 21Epoch 2 : 42 / 96 43.75% 43.75% ","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0/","section":"img_move_back","tags":null,"title":""},{"categories":null,"contents":" 参考：\nhttps://blog.csdn.net/fsfjdtpzus/article/details/106256925\n1 目标 学习《神经网络与深度学习》第二章反向传播，并在第一章练习的基础上，将训练集掺入我们自己的数据进行训练，看看泛化效果如何。例如在其中几个epoch中，将训练数据指定为我们的数据（随机选择），测试结果是否会更好。\n2 添加训练集 切割数据集的时候，设定训练集的比例\n1def array_split(array_data,label_data,train_data_ratio): 2 combined = list(zip(array_data, label_data)) 3 random.shuffle(combined) 4 array_data[:], label_data[:] = zip(*combined) 5 6 train_size = int(len(array_data) * train_data_ratio) 7 test_size = len(array_data) - train_size 8 9 # 提取训练集和测试集 10 train_set_array, train_set_label = array_data[:train_size], label_data[:train_size] 11 test_set_array, test_set_label = array_data[train_size:], label_data[train_size:] 12 13 return train_set_array, train_set_label,test_set_array, test_set_label 在第j个epoch中，利用j来求余，调整添加的频率\n1if j % 1 == 0: 2 mini_batches_mydata_tarin = [ 3 mydata_tarin[k:k+mini_batch_size] 4 for k in range(0, n_mydata_tarin, mini_batch_size)] 5 6 if len(mini_batches_mydata_tarin) != 0: 7 mini_batches = mini_batches + mini_batches_mydata_tarin 设定为1，即为每个epoch都添加。mini_batch_size设为5，学习率为1.5，9的倍数的epoch添加自己的训练集，结果为18%。\n16 : 0.0% 25 : 50.0% 39 : 0.0% 47 : 100.0% 58 : 100.0% 64 : 0.0% 72 : 25.0% 81 : 0.0% 90 : 0.0% 103 : 0.0% 11Epoch 28 : 4 / 22 18.18% 18.18% mini_batch_size设为10，学习率为3.0，1的倍数的epoch添加自己的训练集，结果为23%。\n18 : 50.0% 27 : 20.0% 31 : 0.0% 45 : 0.0% 53 : 0.0% 62 : 0.0% 70 : 50.0% 86 : 0.0% 94 : 50.0% 10Epoch 22 : 5 / 22 22.73% 22.73% 在上述参数下，将数据集分割的比例改为0.2，结果为27%。\n在上述参数下，将数据集分割的比例改为0，也就是不掺入自己的数据，结果为27%。\n有可能是掺入的数据污染了原始训练集，所以自己的数据加的越多，结果越差。\n3 反向传播 3.1 四个方程 BP1：输出层误差的⽅程\nBP2：使⽤下⼀层的误差来表⽰当前层的误差。\n通过组合 (BP1) 和 (BP2)，我们可以计算任何层的误差 δl。⾸先使⽤ (BP1) 计算 δL，然后应⽤⽅程 (BP2) 来计算 δL−1，然后再次⽤⽅程 (BP2) 来计算 δL−2，如此⼀步⼀步地反向传播完整个⽹络。 BP3：代价函数关于⽹络中任意偏置的改变率\nBP4：代价函数关于任何⼀个权重的改变率\n3.2 计算误差 计算神经网络的输出(预测值)和真值的误差。 计算完误差后，需要将这个误差向不断的向前一层传播。向前一层传播时，需要考虑到前一个神经元的权重系数(因为不同神经元的重要性不同，因此回传时需要考虑权重系数)。 与前向传播时相同，反向传播时后一层的节点会与前一层的多个节点相连，因此需要对所有节点的误差求和。 计算出每个神经元的误差，接下来就更新权重。 3.3 更新权重 η代表学习率，w′是更新后的权重，通过这个式子来更新权重。\n计算好误差，并且更新权重，反向传播就结束了。\n将这个过程不断重复，就可以不断减小误差，提高正确率，获得比较好的模型了。\n","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/img_move_back/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8F%8A%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%83%E4%B9%A0%E4%BC%98%E5%8C%96/","section":"img_move_back","tags":null,"title":""},{"categories":null,"contents":"About Me Hello ~\nIf you\u0026rsquo;ve got something to say, just leave a comment😊 ~\n","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/about/","section":"","tags":null,"title":"About"},{"categories":null,"contents":"","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/daily/","section":"","tags":null,"title":"Daily"},{"categories":null,"contents":"","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/movies/","section":"","tags":null,"title":"Movies"},{"categories":null,"contents":"","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/archive/","section":"","tags":null,"title":"Timeline"},{"categories":null,"contents":"","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/trend/","section":"","tags":null,"title":"Trend"},{"categories":null,"contents":"\r","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/tweet/","section":"","tags":null,"title":"Tweet"}]